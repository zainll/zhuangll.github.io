{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/Software&Tool.md","hash":"ebc77dc7db8e6b218baa73f912be1203c6111a92","modified":1638083527571},{"_id":"source/_posts/WSL.md","hash":"1b8c04d64d86e38851c3043391706e0e2633c5f5","modified":1636479333352},{"_id":"source/_posts/hello-world.md","hash":"2557e0b9ce1179b4e2a7e7c0c5d44099069b9aee","modified":1635258853311},{"_id":"source/_posts/书单.md","hash":"f5529976e9b3a4ece56c404ba86b817e0502f824","modified":1638107541044},{"_id":"source/_posts/数据结构与算法基础.md","hash":"2bacd98f26bc3f11087eac08af1331cf1620f69f","modified":1638119005472},{"_id":"source/GithubPages/index.md","hash":"7ac012dac84e158f62b0a1b9c7ec25155d845748","modified":1635181808306},{"_id":"source/about/index.md","hash":"3f945fcdbdee9baedf2f5b87601553f6efdc8505","modified":1635260167912},{"_id":"source/tags/index.md","hash":"05263d4b30ffeffa6ab06a99679b3ca160cca2c0","modified":1635262584034},{"_id":"source/categories/index.md","hash":"3e84de4d4d88b363553433992dc8be79d1ca52e7","modified":1635262679021},{"_id":"source/guestbook/index.md","hash":"9432f7a64ab6933b5d483a4dc15a1e2a5305abb1","modified":1638083365224},{"_id":"source/_posts/2021/11/leetcode题解算法.md","hash":"516fb41287de269faa690dd2413e7eebda1a3b77","modified":1636737703588},{"_id":"source/_posts/2021/11/内存.md","hash":"ee89e92c6897fd1912fbbdfb5fb28c96c93a771d","modified":1636733885640},{"_id":"themes/next/.editorconfig","hash":"731c650ddad6eb0fc7c3d4a91cad1698fe7ad311","modified":1635177260128},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1635177260128},{"_id":"themes/next/.gitignore","hash":"83418530da80e6a78501e1d62a89c3bf5cbaec3d","modified":1635177260132},{"_id":"themes/next/.gitattributes","hash":"3e00e1fb043438cd820d94ee3dc9ffb6718996f3","modified":1635177260129},{"_id":"themes/next/.stylintrc","hash":"6259e2a0b65d46865ab89564b88fc67638668295","modified":1635177260133},{"_id":"themes/next/.travis.yml","hash":"379f31a140ce41e441442add6f673bf397d863ea","modified":1635177260133},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1635177260133},{"_id":"themes/next/README.md","hash":"7d56751b580d042559b2acf904fca4b42bcb30a7","modified":1635177260134},{"_id":"themes/next/_config.yml","hash":"24c7cd42a9126cd8c74963d2363ffcd48cb063b5","modified":1638085051395},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1635177260134},{"_id":"themes/next/gulpfile.js","hash":"0c76a1ac610ee8cbe8e2cc9cca1c925ffd0edf98","modified":1635177260141},{"_id":"themes/next/package.json","hash":"b099e7cea4406e209130410d13de87988ba37b2a","modified":1635177260164},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"778b7e052993ed59f21ed266ba7119ee2e5253fb","modified":1635177260129},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ddde54fb50d11dc08cec899a3588addb56aa386","modified":1635177260129},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"d2f8e6b65783e31787feb05d2ccea86151f53f35","modified":1635177260130},{"_id":"themes/next/.github/config.yml","hash":"df3d970700e6b409edc3d23be8d553db78d5ba3f","modified":1635177260131},{"_id":"themes/next/.github/issue-close-app.yml","hash":"b14756e65546eb9ecc9d4393f0c9a84a3dac1824","modified":1635177260131},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"533fbe6b2f87d7e7ec6949063bb7ea7eb4fbe52d","modified":1635177260131},{"_id":"themes/next/.github/lock.yml","hash":"3ce3d0a26030a1cd52b273cc6a6d444d7c8d85c2","modified":1635177260131},{"_id":"themes/next/.github/mergeable.yml","hash":"1c1cb77a62df1e3654b151c2da34b4a10d351170","modified":1635177260132},{"_id":"themes/next/.github/release-drafter.yml","hash":"09c3352b2d643acdc6839601ceb38abc38ab97c5","modified":1635177260132},{"_id":"themes/next/.github/stale.yml","hash":"590b65aca710e0fba75d3cf5361a64d13b6b0f63","modified":1635177260132},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1635177260135},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1635177260132},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"60c7e9ef0c578deebad43e9395c958fa61096baf","modified":1635177260135},{"_id":"themes/next/docs/AUTHORS.md","hash":"cde7cc095ac31b421a573042cf61060f90d9ad0d","modified":1635177260135},{"_id":"themes/next/docs/DATA-FILES.md","hash":"980fb8d37701f7fd96b30bb911519de3bbb473d1","modified":1635177260136},{"_id":"themes/next/docs/INSTALLATION.md","hash":"07ea00bee149a1bdc9073e903ee6b411e9f2f818","modified":1635177260136},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"6cc663db5e99fd86bb993c10d446ad26ada88e58","modified":1635177260136},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1635177260136},{"_id":"themes/next/docs/MATH.md","hash":"f56946053ade0915ff7efa74d43c38b8dd9e63bb","modified":1635177260137},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"1e86d32063b490d204baa9d45d8d3cb22c24a37d","modified":1635177260137},{"_id":"themes/next/languages/ar.yml","hash":"abcf220bd615cec0dd50e4d98da56580169d77e1","modified":1635177260141},{"_id":"themes/next/languages/de.yml","hash":"15078b7ede1b084e8a6a15d271f0db9c325bd698","modified":1635177260141},{"_id":"themes/next/languages/en.yml","hash":"dbb64776f9c001c54d0058256c415a9a0724ed5d","modified":1635177260142},{"_id":"themes/next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1635177260141},{"_id":"themes/next/languages/es.yml","hash":"f064c793d56a5e0f20cda93b6f0e355044efc7d8","modified":1635177260142},{"_id":"themes/next/languages/fa.yml","hash":"6c0a7d5bcc26eb45a9f3e02f13117c668e77fffd","modified":1635177260142},{"_id":"themes/next/languages/fr.yml","hash":"3e2f89d4bb4441d33ecc7b5a4ee114f627603391","modified":1635177260142},{"_id":"themes/next/languages/hu.yml","hash":"0ea89ffaefd02a10494995f05a2a59d5e5679a28","modified":1635177260143},{"_id":"themes/next/languages/id.yml","hash":"7599bb0ecf278beb8fde3d17bfc148a3241aef82","modified":1635177260143},{"_id":"themes/next/languages/it.yml","hash":"46222f468e66789e9ba13095809eb5e5b63edf30","modified":1635177260143},{"_id":"themes/next/languages/ja.yml","hash":"bf279d0eb1911806d01a12f27261fbc76a3bb3f9","modified":1635177260143},{"_id":"themes/next/languages/ko.yml","hash":"af4be6cb394abd4e2e9a728418897d2ed4cc5315","modified":1635177260143},{"_id":"themes/next/languages/nl.yml","hash":"9749cf90b250e631dd550a4f32ada3bb20f66dd0","modified":1635177260144},{"_id":"themes/next/languages/pt-BR.yml","hash":"69aa3bef5710b61dc9a0f3b3a8f52f88c4d08c00","modified":1635177260144},{"_id":"themes/next/languages/pt.yml","hash":"f6606dd0b916a465c233f24bd9a70adce34dc8d6","modified":1635177260144},{"_id":"themes/next/languages/ru.yml","hash":"012abc694cf9de281a0610f95f79c594f0a16562","modified":1635177260144},{"_id":"themes/next/languages/tr.yml","hash":"c4e9ab7e047ae13a19f147c6bec163c3ba2c6898","modified":1635177260145},{"_id":"themes/next/languages/uk.yml","hash":"69ef00b1b8225920fcefff6a6b6f2f3aad00b4ce","modified":1635177260145},{"_id":"themes/next/languages/vi.yml","hash":"6a578cc28773bd764f4418110500478f185d6efa","modified":1635177260145},{"_id":"themes/next/layout/_layout.swig","hash":"9554bd0f5c5a0438aa7b64065be5561c374d260e","modified":1635177260146},{"_id":"themes/next/languages/zh-CN.yml","hash":"0d6c0380e255ba29c16d8027805821653fe68bd8","modified":1638082642941},{"_id":"themes/next/languages/zh-HK.yml","hash":"92ccee40c234626bf0142152949811ebe39fcef2","modified":1635177260145},{"_id":"themes/next/languages/zh-TW.yml","hash":"cf0740648725983fb88409d6501876f8b79db41d","modified":1635177260146},{"_id":"themes/next/layout/archive.swig","hash":"d9bca77f6dcfef71e300a294f731bead11ce199f","modified":1635177260163},{"_id":"themes/next/layout/category.swig","hash":"c546b017a956faaa5f5643c7c8a363af7ac9d6b9","modified":1635177260163},{"_id":"themes/next/layout/index.swig","hash":"8dfd96fb6f833dd5d037de800813105654e8e8e6","modified":1635262331795},{"_id":"themes/next/layout/page.swig","hash":"357d916694d4c9a0fd1140fa56d3d17e067d8b52","modified":1635177260163},{"_id":"themes/next/layout/post.swig","hash":"5f0b5ba2e0a5b763be5e7e96611865e33bba24d7","modified":1635177260164},{"_id":"themes/next/scripts/renderer.js","hash":"e3658eea97b1183ee2e9f676231e53f7994741f6","modified":1635177260170},{"_id":"themes/next/layout/tag.swig","hash":"d44ff8755727f6532e86fc9fc8dc631200ffe161","modified":1635177260164},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"e67146befddec3a0dc47dc80d1109070c71d5d04","modified":1635177260130},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6beeca0f45a429cd932b6e648617f548ff64c27c","modified":1635177260130},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"59275aa0582f793fee7be67904dcf52ad33a7181","modified":1635177260130},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"3202be9a8d31986caac640e7a4c7ce22e99917eb","modified":1635177260138},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d5aa1a3323639a36bcd9a401484b67537043cd3c","modified":1635177260130},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7e6f227f2aaf30f400d4c065650a4e3d0d61b9e1","modified":1635177260139},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"611f2930c2b281b80543531b1bf33d082531456a","modified":1635177260139},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"2d868cd271d78b08775e28c5b976de8836da4455","modified":1635177260139},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"716111dd36d276f463c707dfcc9937fea2a1cf7a","modified":1635177260139},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"50ab381c27611d5bf97bb3907b5ca9998f28187d","modified":1635177260140},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"0d46f9f50cf2e4183970adce705d1041155b0d37","modified":1635177260140},{"_id":"themes/next/docs/zh-CN/README.md","hash":"8f7c0d0b766024152591d4ccfac715c8e18b37f3","modified":1635177260140},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"54e6a067ed95268eab6be2ba040a7e9b1907928e","modified":1635177260137},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"b3201934b966bc731eaf8a4dad4ba4bdcd300c10","modified":1635177260140},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"a9cfe5ac9ef727a8650b2b6584482751a26b1460","modified":1635177260137},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"30ade8c806d7826cc50a4a3e46a9e6213fddf333","modified":1635177260146},{"_id":"themes/next/docs/ru/README.md","hash":"1e5ddb26ad6f931f8c06ce2120f257ff38b74fdf","modified":1635177260138},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"cb8e39c377fc4a14aaf133b4d1338a48560e9e65","modified":1635177260138},{"_id":"themes/next/layout/_macro/post.swig","hash":"c3fd56bac90ce45a0c79ddfe68beb223ad0d72b4","modified":1635262330087},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5bffdb1448caca7db7b1f84e1693e6657a106d50","modified":1635177260147},{"_id":"themes/next/layout/_partials/comments.swig","hash":"142efb4c6b73d8f736f6784804b40d5871333172","modified":1635177260147},{"_id":"themes/next/layout/_partials/footer.swig","hash":"51b32d39c7700e5bdb98a5199b44a7d98252cbc3","modified":1635261827330},{"_id":"themes/next/layout/_partials/languages.swig","hash":"c3ea82604a5853fb44c5f4e4663cbe912aa5dcf8","modified":1635177260150},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"2de77d533c91532a8a4052000244d0c1693370df","modified":1635177260150},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"5392dcbb504266f0f61d5b8219914068ef9cdc25","modified":1635177260153},{"_id":"themes/next/layout/_scripts/index.swig","hash":"1822eaf55bbb4bec88871c324fc18ad95580ccb4","modified":1635177260153},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"7b9e0f776a5be6c3f95bc7f394e1424ba02ba93b","modified":1635177260153},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"ccff5a773644d33ff22f6b45b6734f52b048f22b","modified":1635177260154},{"_id":"themes/next/layout/_scripts/three.swig","hash":"6b092c6d882b2dfa5273e1b3f60b244cb7c29fcd","modified":1635177260155},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"244ca2d74ee0d497c87572c6a26b43c62a952673","modified":1635177260155},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"28b0a7e843ec4365db1963646659a153753cd746","modified":1635177260157},{"_id":"themes/next/layout/_third-party/index.swig","hash":"c6b63cbc80938e6e09578b8c67e01adf13a9e3bd","modified":1635177260159},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5ae5adcd6f63ed98b2071e4f7e5e38c4d7d24e1b","modified":1635177260160},{"_id":"themes/next/source/css/_colors.styl","hash":"11aef31a8e76f0f332a274a8bfd4537b73d4f88f","modified":1635177260172},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"269102fc5e46bd1ce75abdcce161f0570ae70e2f","modified":1635177260160},{"_id":"themes/next/source/css/_mixins.styl","hash":"072a3fa473c19b20ccd7536a656cda044dbdae0a","modified":1635177260189},{"_id":"themes/next/scripts/events/index.js","hash":"5c355f10fe8c948a7f7cd28bd8120adb7595ebde","modified":1635177260164},{"_id":"themes/next/source/css/main.styl","hash":"815ef30987d02f3d76dbe4b5ee3a72135a152678","modified":1635177260195},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1635177260195},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1635177260196},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1635177260196},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1635177260196},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1635177260196},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1635177260197},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1635177260197},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1635177260197},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1635177260198},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1635177260198},{"_id":"themes/next/source/js/algolia-search.js","hash":"6a813410e33824d7acc65a369a2983912bb3420c","modified":1635177260199},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1635177260198},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1635177260198},{"_id":"themes/next/source/js/local-search.js","hash":"cfa6a0f3f9c2bc759ee507668a21f4e8f250f42a","modified":1635177260199},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1635177260198},{"_id":"themes/next/source/js/bookmark.js","hash":"9f05fd3672789311dc0cf5b37e40dc654cb04a2a","modified":1635177260199},{"_id":"themes/next/source/js/motion.js","hash":"d5aa1a08cdf3c8d1d8d550fb1801274cc41e5874","modified":1635177260200},{"_id":"themes/next/source/js/next-boot.js","hash":"250d8dcd6322e69e3fbadd0f3e37081c97b47c52","modified":1635177260200},{"_id":"themes/next/source/js/utils.js","hash":"26a82e46fdcadc7c3c2c56a7267284b61a26f7f3","modified":1635177260201},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"ad321db012cea520066deb0639335e9bc0dcc343","modified":1635177260168},{"_id":"themes/next/scripts/filters/locals.js","hash":"a5e7d05d3bd2ae6dcffad5a8ea0f72c6e55dbd02","modified":1635177260168},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"305d03c1e45782988809298c3e3b3c5d5ee438aa","modified":1635177260168},{"_id":"themes/next/source/lib/anime.min.js","hash":"960be51132134acd65c2017cc8a5d69cb419a0cd","modified":1635177260201},{"_id":"themes/next/scripts/filters/minify.js","hash":"21196a48cb127bf476ce598f25f24e8a53ef50c2","modified":1635177260168},{"_id":"themes/next/scripts/helpers/font.js","hash":"8fb1c0fc745df28e20b96222974402aab6d13a79","modified":1635177260169},{"_id":"themes/next/scripts/filters/post.js","hash":"57f2d817578dd97e206942604365e936a49854de","modified":1635177260168},{"_id":"themes/next/scripts/helpers/engine.js","hash":"eb6b8bbc1dce4846cd5e0fac0452dbff56d07b5d","modified":1635177260169},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"b8d7ddfa4baa9b8d6b9066a634aa81c6243beec9","modified":1635177260169},{"_id":"themes/next/scripts/tags/button.js","hash":"bb0e8abbc0a6d5b3a1a75a23976f2ac3075aab31","modified":1635177260170},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"4044129368d0e2811859a9661cad8ab47118bc32","modified":1635177260169},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"840536754121e0da5968f5ad235f29200fc5d769","modified":1635177260170},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"e2d0184bc4a557e1017395b80ff46880078d8537","modified":1635177260170},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"93ccd3f99d3cb42674f29183c756df63acb5d7f8","modified":1635177260170},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1635177260171},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1635177260171},{"_id":"themes/next/scripts/tags/pdf.js","hash":"37b53661ad00a01a2ca7d2e4a5ad3a926073f8e2","modified":1635177260171},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1635177260171},{"_id":"themes/next/scripts/tags/tabs.js","hash":"c70a4a66fd0c28c98ccb6c5d5f398972e5574d28","modified":1635177260172},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"7d638e413f2548fc990c4a467dd03de6c81fc960","modified":1635177260148},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1635177260172},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"90cce9f407e9490756ba99580e3eb09f55b05eaa","modified":1635177260148},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"0dd316f153c492c0a03bd0273d50fa322bc81f11","modified":1635177260149},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"91056a6c98cca63ff8cc6956e531ee3faf4b8ad9","modified":1635177260149},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"4baa86ca631168fc6388d27f4b1b501b40c877a8","modified":1635177260149},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"bed6cc2b48cf2655036ba39c9bae73a295228a4d","modified":1635177260149},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"91c0addb33006619faa4c32e5d66874e25f1e9b3","modified":1635177260150},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"90d3eaba6fbe69bee465ddd67c467fd2c0239dc4","modified":1635177260149},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"8d4e3dd0d3631ce0b21bc15c259f6ac886de631d","modified":1635177260150},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"f2eb455c8bf13533427254f0c9b4b17b2498168b","modified":1635177260151},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"d8f785c062c6b0763a778bd4a252e6f5fee0e432","modified":1635177260151},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"ce712c110b5ce8aacba7a86b0558ff89700675c9","modified":1635177260151},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"bc7b047a6246df07767373644b1637d91c3a88b1","modified":1635177260151},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"a6c761d5193cb6f22e9422dbbcf209e05471b0ed","modified":1635177260152},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"f349a226e5370075bb6924e60da8b0170c7cfcc1","modified":1635177260152},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"7b2ef5db9615267a24b884388925de1e9b447c1f","modified":1635177260153},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"98fd1f5df044f4534e1d4ca9ab092ba5761739a9","modified":1635177260152},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"128f7d679bb4d53b29203d598d217f029a66dee7","modified":1635177260152},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"34c05e9d73b0f081db70990c296b6d6a0f8ea2ca","modified":1635177260154},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1635177260154},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1635177260155},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"34495d408e8467555afee489500b8aad98c52079","modified":1635177260155},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0b44f400ec00d2b5add5ee96c11d22465c432376","modified":1635177260155},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"84adaadd83ce447fa9da2cff19006334c9fcbff9","modified":1635177260156},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b8819bd056f8a580c5556d4415836a906ed5d7a4","modified":1635177260156},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"91c2cb900c76224c5814eeb842d1d5f517f9bf05","modified":1635177260156},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"85b60e222712ca3b2c4dc2039de2dc36b8d82940","modified":1635177260156},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"2642e8aef5afbe23a2a76efdc955dab2ee04ed48","modified":1635177260157},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"fb94ee487d75e484e59b7fba96e989f699ff8a83","modified":1635177260157},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"9298e6d6c4a62a0862fc0f4060ed99779d7b68cb","modified":1635177260157},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"1b29b99fa921f12c25d3dc95facdf84ef7bb1b5c","modified":1635177260158},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"a42f97eda3748583bac2253c47fe5dfa54f07b8f","modified":1635177260158},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"606ad14a29320157df9b8f33738282c51bb393d9","modified":1635177260158},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"3d91899ca079e84d95087b882526d291e6f53918","modified":1635177260158},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ae2707d6e47582bb470c075649ec7bad86a6d5a9","modified":1635177260158},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"59df21fcfe9d0ada8cee3188cb1075529c1c3eb8","modified":1635177260159},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"fd726aad77a57b288f07d6998ec29291c67c7cbb","modified":1635177260160},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"276f523e414d4aa7f350a8f2fd3df8a3d8ea9656","modified":1635177260159},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"1f34b2d3c753a3589ab6c462880bd4eb7df09914","modified":1635177260159},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"58296a5c1883f26464c2a5ccf734c19f5fbf395a","modified":1635177260160},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"aa6ab95b8b76611694613defb4bf25003d1b927f","modified":1635177260161},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d2f0e4c598410ec33785abe302c7ea7492bb791a","modified":1635177260161},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"53a0760c75d5aaabb3ce8e8aa8e003510d59807f","modified":1635177260161},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"01d94354d07e72cad47100482068b6be69fcc033","modified":1635177260161},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"964cd6bac668cf6d211a2624fbef3948cfdece55","modified":1635177260162},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"c171ea94e9afbba97f06856904264da331559463","modified":1635177260162},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"619338ddacf01e3df812e66a997e778f672f4726","modified":1635177260162},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"5a223b60406cee7438cfe3a5e41d1284425aa7a5","modified":1635177260162},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"583ff1e7a2ca889f1f54eb0ca793894466823c7c","modified":1635177260193},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"5980abbbbeacd8541121f436fa414d24ad5e97c2","modified":1635177260194},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c22b58af3327236ec54d5706501aa5a20e15012e","modified":1635177260194},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ad680efdfb2f86546182bf3f59886efbcf3c1b2d","modified":1635177260194},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4e33774b1fe6d0a51f3a428c54c5e600e83bf154","modified":1635177260194},{"_id":"themes/next/scripts/events/lib/config.js","hash":"aefe3b38a22bc155d485e39187f23e4f2ee5680a","modified":1635177260165},{"_id":"themes/next/source/js/schemes/muse.js","hash":"a18559a9c332199efad0100cf84bb0c23fc0f17a","modified":1635177260200},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"08496b71c9939718e7955704d219e44d7109247b","modified":1635177260165},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"e73f697bb160b223fdde783237148be5f41c1d78","modified":1635177260165},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"b85a6e2af1387fe64b51e7cd3e2da8616e6f5a3f","modified":1635177260200},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"2f22f48f7370470cef78561a47c2a47c78035385","modified":1635177260166},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"0c3bea89d64bc12c1bbe6f208a83773c6fb5375a","modified":1635177260166},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"713056d33dbcd8e9748205c5680b456c21174f4e","modified":1635177260166},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"3a80559df0b670ccb065ea9d3bb587d0b61be3a4","modified":1635177260166},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"67cf90d9a2428c14eb113a64bdd213c22a019aef","modified":1635177260166},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"323a47df6ded894944a2647db44556d6163e67c4","modified":1635177260167},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"a4f3153ac76a7ffdf6cc70f52f1b2cc218ed393e","modified":1635177260167},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"851359f5ff90f733a9bd7fe677edbee8b8ac714c","modified":1635177260167},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1635177260204},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1635177260204},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"510a6f0ba7485dd54ce347cca890ab52c4957081","modified":1635177260173},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"0534b329d279a6f255112b3305ff92c810f31724","modified":1635177260173},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"d17236df3b4d6def1e4e81133ef4729c390de3ac","modified":1635177260173},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"c52648a7b09f9fe37858f5694fcc1ffc709ad147","modified":1635177260177},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7a95c27762e1303bf06ee808c63f616cb192fcaf","modified":1635177260181},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5540c9259cb7895a5f10a289c7937e5470a7c134","modified":1635177260184},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"a2ee16cac29a82cfce26804c160286fcbee94161","modified":1635177260181},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"45f4badac6ec45cf24355f6157aece1d4d3f1134","modified":1635177260184},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"4b068d0d898f4e624937503f0e1428993050bd65","modified":1635177260185},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"6d740699fb6a7640647a8fd77c4ea4992d8d6437","modified":1635177260186},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b619f39e18398422e0ac4999d8f042a5eaebe9cd","modified":1635177260186},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"43045d115f8fe95732c446aa45bf1c97609ff2a5","modified":1635177260187},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"e342b8f8e11a3a6aa5a029912c9778c25bf5d135","modified":1635177260189},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f317d2e3886e94f5fbb8781c2e68edd19669ff58","modified":1635177260187},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"20e0e3e3eba384930c022e21511214d244b4c9e7","modified":1635177260189},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"b9e87d32da24264bda247c1526afe140c858b0ef","modified":1635177260190},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"716e8b0f056bf6393e6bc6969ac84598ab8e7a6f","modified":1635177260190},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"12b265f82840f27112ca2b1be497677f20f87545","modified":1635177260190},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e1c29b81a32273a0dedd926cda199a71aea72624","modified":1635177260190},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"c5142739e01e9f25c8b32b2209af85c787bb2b42","modified":1635177260190},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"8674bd88df076a1dfe4023ed6750ded1f5b00223","modified":1635177260191},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"49c76bc723d3952abb613d9d68398ed7305da999","modified":1635177260191},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4b7f057dbb53efd7cbe7eac7835a793ab3cbb135","modified":1635177260191},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"9898323ee5a7ac2a5d4f633c653112280beb2643","modified":1635177260191},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"2d3e05015796a790abd9d68957a5c698c0c9f9b6","modified":1635177260192},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1635177260192},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"558794fced306339b98dc2b0ee7f0576802f1355","modified":1635177260192},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5de34e1d8a290751641ae456c942410852d5e809","modified":1635177260192},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0a9f0d9eb042595502d200fb8c65efb0e6c89aa9","modified":1635177260192},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"dc9318992ce2eb086ebaa2fe56b325e56d24098b","modified":1635177260193},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b69ac38b9da8c9c1b7de696fdeea7f9d7705213a","modified":1635177260193},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"25c2a7930da14f023329df20f38df2728057fb4d","modified":1635177260193},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"82e34d28f8a1169b20b60101d5bb0446deba3514","modified":1635177260202},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1635177260203},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"236a039b0900f4267de566b46f62314ad967d30f","modified":1635177260173},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"18edddb2ffb3f85a68e4367f81e06c461e07bc25","modified":1635177260174},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"6cf78a379bb656cc0abb4ab80fcae60152ce41ad","modified":1635177260174},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"f6f05f02d50f742c84ee5122016c0563a8bb2cf9","modified":1635177260174},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"97974c231b4659b8aa5e9321c4d54db5c816d0db","modified":1635177260174},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a52f8cae599099231866298ed831fdf76c9b6717","modified":1635177260175},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"9af620eba5ccceea21a0e3bc69f6f1fa7637c2f3","modified":1635177260175},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"70b3eb9d36543ab92796ac163544e9cf51b7c1e6","modified":1635177260175},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"57b9a179675f1536e017cba457b6ac575e397c4f","modified":1635177260175},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"97dec98d0403097d66822f1c90b50b2890c84698","modified":1635177260175},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0dfb97703a519d9438f64f9e41ab1dd37381f733","modified":1635177260176},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"93ba8172c0d2c37d738e6dbd44fcd5a2e23b92f3","modified":1635177260176},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2c24829d95c742eb9e8316ebf2fbe9f2c168b59a","modified":1635177260176},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"66fc406796b6efe6cea76550573b7a632112406a","modified":1635177260176},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"09dda2667628d1f91b2e37d8fc6df1413f961b64","modified":1635177260176},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5cc9e7394c927065c688cba5edd6e0a27587f1d8","modified":1635177260177},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b266d2ce5e2b117be01537889e839a69004dc0bb","modified":1635177260177},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"b87f4a06c0db893df4f756f24be182e1a4751f24","modified":1635177260178},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"fcb25180e69715f17cbf4cdc8e971a0212287623","modified":1635261704773},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"d83102771df652769e51ddfd041cf5f4ca1a041d","modified":1635177260178},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"8ed7a9d5dfac592de703421b543978095129aa5b","modified":1635177260178},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"bad99f4cccb93b3cefe990a2c85124e60698d32e","modified":1635177260178},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1f6b0d3ab227697ca115e57fd61122ea7950e19d","modified":1635177260178},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"7eeb22c5696f8e0c95161dc57703973cf81c8c12","modified":1635177260179},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"b4f4bae437d4f994af93cf142494ffcd86bae46b","modified":1635177260179},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"b31c86d1a4f89837f9187bed646bda96b2cd286c","modified":1635177260179},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"300058ca12e81013e77ba01fe66ac210525768b6","modified":1635177260180},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"6d5f26646e2914474f295de8bf6dc327d4acd529","modified":1635177260180},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"7a3a56b10ab714c0e2ed240d0939deeecdcad167","modified":1635177260181},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"3d16ac0f4ccaeed868c246d4d49bde543d1f62cb","modified":1635177260181},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b8c816fba0a9b4a35fbae03ba5b1b2da96ba2687","modified":1635177260181},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"49722d555a2edb18094bb2cb3d7336dd72051b93","modified":1635177260182},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"357f825f0a649b2e28cba1481d4c9a0cb402e43a","modified":1635177260182},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"096f908c08ce553e482aadfd3e767a0145191093","modified":1635177260182},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"525242ce9e912c4adfe5134347c67dbdb9e98e3d","modified":1635177260182},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"12f7eaf6b56624cbc411528562d6bb848ff97039","modified":1635177260183},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"b11b04737a1a0fea3bd9f0081d96ee6c015358d4","modified":1635177260183},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"fa0a2ea57b7b4ce75b5d18c264af2d92ea3192f9","modified":1635177260183},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"098b4bdf49c7300490f959386d5d1185a32543f6","modified":1635177260183},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"5d540f683018745a5ed1d6f635df28ea610c1244","modified":1635177260184},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"4079e616fbf36112dec0674c1e0713d1d9769068","modified":1635177260185},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"67a1fcb33535122d41acd24f1f49cf02c89b88fa","modified":1635177260184},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"83bd737f663a8461e66985af8ddbfc0a731fc939","modified":1635177260185},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"c911045b2ce9a66e38d9dd30c7ed078abbc10cbf","modified":1635177260186},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"80488259271bcfe38031f4c2e902463daba9336b","modified":1635177260185},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"ceacfa6218f6084c71a230b086e5d2708d29927e","modified":1635177260187},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"aca7bb220fc14ef2a8f96282d2a95a96a9238d46","modified":1635177260187},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"8b7aafb911850c73074cdb6cc87abe4ac8c12e99","modified":1635177260187},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"adaf0f580fccf4158169eeaf534a18005b39a760","modified":1635177260188},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"03a5bcecc0b12231462ef6ffe432fa77ee71beff","modified":1635177260188},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"3256e39f281f06751a1c0145d9806a0e56d68170","modified":1635177260188},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"51d46fa3c7c6b691c61a2c2b0ac005c97cfbf72b","modified":1635177260188},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1635177260202},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1635177260203},{"_id":"public/baidusitemap.xml","hash":"5476d04f7639045821d4a2c5c7e1c71c9ad565a3","modified":1638119567636},{"_id":"public/atom.xml","hash":"89dcb86f5ed3ba69caeb5631c07c70cfbbd8d101","modified":1638119567636},{"_id":"public/search.xml","hash":"1c949e68311131d3cbd0b100e4352dfa81a307f4","modified":1638119567636},{"_id":"public/sitemap.xml","hash":"08ebd7214344948a0e23bc12027eda5b440b16d8","modified":1638119567636},{"_id":"public/GithubPages/index.html","hash":"68de3e4194336c7423bb9acb27246fc618890008","modified":1638119567636},{"_id":"public/about/index.html","hash":"e65dd18ef7e970cdee10078704af2ff633c12fa4","modified":1638119567636},{"_id":"public/tags/index.html","hash":"f0cad22cb769ae524399cbc9e805a2b839a0bb17","modified":1638119567636},{"_id":"public/categories/index.html","hash":"59567759b60b1e662d7b55018d6f574a59bb7f69","modified":1638119567636},{"_id":"public/guestbook/index.html","hash":"5bac3bc1d0017d9bc169d7d46a361253a03c6e5d","modified":1638119567636},{"_id":"public/archives/2021/10/index.html","hash":"7fbd7122c3f25145db081602add4f3d2fe06ec2a","modified":1638119567636},{"_id":"public/archives/2021/11/index.html","hash":"64f145dc87f1f817273e299cbf73a8f43b8c2a31","modified":1638119567636},{"_id":"public/categories/tool/index.html","hash":"ef9c92757c507d370aedabf0011e14f720268210","modified":1638119567636},{"_id":"public/categories/tool/2021/index.html","hash":"d7f9d722d882352ac5b4137d4a6e3c332854288c","modified":1638119567636},{"_id":"public/categories/tool/2021/11/index.html","hash":"be85c5e93f574331a70af33de4e40636e8da5c24","modified":1638119567636},{"_id":"public/tags/实用教程/index.html","hash":"e0dd3ef07d3633cc3bc0cfe50fad1d69f9c3a948","modified":1638119567636},{"_id":"public/tags/Another-Tag/index.html","hash":"af809fb06a8d54e47414b928245026864a128aaf","modified":1638119567636},{"_id":"public/tags/Computer-Science/index.html","hash":"3ef6d2c93cfc81c90e1c35daad0eaeea25c760eb","modified":1638119567636},{"_id":"public/2021/11/07/2021/11/内存/index.html","hash":"1fea484d8521c4a26f3566b766217dfb0db7c2ee","modified":1638119567636},{"_id":"public/2021/10/27/WSL/index.html","hash":"b56dec633439660102476d8b78b0ca605b1b0b13","modified":1638119567636},{"_id":"public/2021/10/27/书单/index.html","hash":"0df82c744e7dd5fa0350fbe89f0add2f6b712f28","modified":1638119567636},{"_id":"public/2021/10/27/数据结构与算法基础/index.html","hash":"8cbbbc2d008348bca8faabebe5a2e8c7e6c4c7f9","modified":1638119567636},{"_id":"public/2021/10/27/2021/11/leetcode题解算法/index.html","hash":"3bd8e980fbc2e210f59277b550996b63078901f4","modified":1638119567636},{"_id":"public/2021/10/26/Software&Tool/index.html","hash":"20352cd999aee7c8ee7b04e3cbd47134a29eedb2","modified":1638119567636},{"_id":"public/2021/10/25/hello-world/index.html","hash":"ac52f340fbfcc22c97ab3b036aa8d1a33fc74326","modified":1638119567636},{"_id":"public/archives/index.html","hash":"83c7ff23520f7757b5d28fb8ca24e8d1235cf8dd","modified":1638119567636},{"_id":"public/archives/2021/index.html","hash":"46b24f7ea2db247ac0660956cbf83648f1981529","modified":1638119567636},{"_id":"public/index.html","hash":"5c36f55939c5ceb8bbeea26a3e11c1e67185d327","modified":1638119567636},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1638119567636},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1638119567636},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1638119567636},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1638119567636},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1638119567636},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1638119567636},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1638119567636},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1638119567636},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1638119567636},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1638119567636},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1638119567636},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1638119567636},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1638119567636},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1638119567636},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1638119567636},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1638119567636},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1638119567636},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1638119567636},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1638119567636},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1638119567636},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1638119567636},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1638119567636},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1638119567636},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1638119567636},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1638119567636},{"_id":"public/css/main.css","hash":"b8c445048664e89bf750a0f1722093859fd85c81","modified":1638119567636},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1638119567636},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1638119567636},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1638119567636},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1638119567636}],"Category":[{"name":"tool","_id":"ckwji3h3r0004akuu0g194urk"},{"name":"2021","parent":"ckwji3h3r0004akuu0g194urk","_id":"ckwji3h7z0013akuu3p3d9rhf"},{"name":"11","parent":"ckwji3h7z0013akuu3p3d9rhf","_id":"ckwji3h9d0015akuu86b166kr"}],"Data":[],"Page":[{"title":"GithubPages","date":"2021-10-25T16:58:24.000Z","_content":"\n## TTT\n\nsadf\n\n\n### kk\n\n- dafd","source":"GithubPages/index.md","raw":"---\ntitle: GithubPages\ndate: 2021-10-26 00:58:24\n---\n\n## TTT\n\nsadf\n\n\n### kk\n\n- dafd","updated":"2021-10-25T17:10:08.306Z","path":"GithubPages/index.html","comments":1,"layout":"page","_id":"ckwji3h3l0000akuu0hsi96ic","content":"<h2 id=\"TTT\"><a href=\"#TTT\" class=\"headerlink\" title=\"TTT\"></a>TTT</h2><p>sadf</p>\n<h3 id=\"kk\"><a href=\"#kk\" class=\"headerlink\" title=\"kk\"></a>kk</h3><ul>\n<li>dafd</li>\n</ul>\n","site":{"data":{}},"length":13,"excerpt":"","more":"<h2 id=\"TTT\"><a href=\"#TTT\" class=\"headerlink\" title=\"TTT\"></a>TTT</h2><p>sadf</p>\n<h3 id=\"kk\"><a href=\"#kk\" class=\"headerlink\" title=\"kk\"></a>kk</h3><ul>\n<li>dafd</li>\n</ul>\n"},{"title":"关于","date":"2021-10-25T17:30:59.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2021-10-26 01:30:59\n---\n","updated":"2021-10-26T14:56:07.912Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckwji3h3q0002akuu40hhbr5p","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"标签","date":"2021-10-25T17:30:18.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2021-10-26 01:30:18\ntype: \"tags\"\n---\n","updated":"2021-10-26T15:36:24.034Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckwji3h3t0006akuu8xb39uh2","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"分类","date":"2021-10-25T17:28:51.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2021-10-26 01:28:51\ntype: \"categories\"\n---\n","updated":"2021-10-26T15:37:59.021Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckwji3h3u0008akuu1cxdg4el","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""},{"title":"札记","date":"2021-11-28T06:52:03.000Z","_content":"","source":"guestbook/index.md","raw":"---\ntitle: 札记\ndate: 2021-11-28 14:52:03\n---\n","updated":"2021-11-28T07:09:25.224Z","path":"guestbook/index.html","comments":1,"layout":"page","_id":"ckwji3h3v000aakuueksxashl","content":"","site":{"data":{}},"length":0,"excerpt":"","more":""}],"Post":[{"title":"Software&Tool","date":"2021-10-25T16:47:53.000Z","updated":"2021-10-26T16:53:53.000Z","_content":"\n\n## GitHub Pages + Hexo使用及配置\n\ngithub上创建一个  username.github.io 的工程，username 必须为github的用户名\n\n<!--more-->\n\n### Hexo 安装\n\n```sh\n# 清理缓存\nhexo clean\n# 生成网页\nhexo g\n# 启动本地服务端口\nhexo s\n# 发布到github\nhexo d\n\n\n# 强制推送备份源码分支\ngit push -f origin backup\n```\n\n## 参考链接\n\nhttps://www.jianshu.com/p/f82c76b90336\n\nhttps://www.jianshu.com/p/5d0b31032d55\n\nhttps://blog.csdn.net/weixin_41922289/article/details/95639870\n\nhttps://theme-next.org/\n\nhttps://hexo.io/zh-cn/docs/\n\nhttps://www.jianshu.com/p/3a05351a37dc\n\nhttps://www.zhyong.cn/posts/ca02/\n\nhttp://theme-next.iissnan.com/\n\nhttps://liam.page/\n\nhttps://liam.page/en/\n\n- Hexo博客添加helper-live2d动态模型插件\nhttps://blog.csdn.net/qq_30930805/article/details/\n\n## vscode\n\n### vscode 上传图片\n\n```sh\n# 上传剪贴板中的图片到服务器。\nctrl + alt + u\n# 打开文件浏览器选择图片上传。\nctrl + alt + e\n\n```\n- https://www.jianshu.com/p/868b3a2028f8\n\n\n## plantuml\n\n\n\n\n## windows 开源软件\n\n potplayer \nhttps://iptv-org.github.io/iptv/index.m3u\n\n\n\neveryting\n\n7zip\n\nrustdesk  远程开源软件\n\nmaya\n\nimagine\n\nscreentogif\n\nditto\n\nbleachbit\n\nqbittorrent\n\ngrammarly\n\n剪切板win10自带的有很多剪切记录的快捷键Windows键➕V键\n\n线上思维导图\nhttps://gitmind.cn/app/template\n在线文档转换\nhttps://www.aconvert.com/cn/\n开源软件下载网站\nhttps://www.fosshub.com/#\n\n### windows ternial \n- 添加 git base 到ternial\n\n\n## linux\n\n### linux 各种系统\n\nubuntu、Linux Mint、suse、Manjaro\n\n### chrome插件\n\n油猴\n\n\n\n## React Router\n\n\nhttp://react-guide.github.io/react-router-cn/index.html\n\n\n## youtube 下载\nhttps://www.ganbey.com/youtube-download-3774\n\n\n\n## zlog\nhttps://blog.csdn.net/twd_1991/article/details/80481920\n\nhttp://hardysimpson.github.io/zlog/UsersGuide-CN.html\n","source":"_posts/Software&Tool.md","raw":"---\ntitle: Software&Tool\ndate: 2021-10-26 00:47:53\nupdated: 2021-10-27 00:53:53\ncategories: \n    - tool\ntags: \n    - 实用教程\n    - Another Tag\n---\n\n\n## GitHub Pages + Hexo使用及配置\n\ngithub上创建一个  username.github.io 的工程，username 必须为github的用户名\n\n<!--more-->\n\n### Hexo 安装\n\n```sh\n# 清理缓存\nhexo clean\n# 生成网页\nhexo g\n# 启动本地服务端口\nhexo s\n# 发布到github\nhexo d\n\n\n# 强制推送备份源码分支\ngit push -f origin backup\n```\n\n## 参考链接\n\nhttps://www.jianshu.com/p/f82c76b90336\n\nhttps://www.jianshu.com/p/5d0b31032d55\n\nhttps://blog.csdn.net/weixin_41922289/article/details/95639870\n\nhttps://theme-next.org/\n\nhttps://hexo.io/zh-cn/docs/\n\nhttps://www.jianshu.com/p/3a05351a37dc\n\nhttps://www.zhyong.cn/posts/ca02/\n\nhttp://theme-next.iissnan.com/\n\nhttps://liam.page/\n\nhttps://liam.page/en/\n\n- Hexo博客添加helper-live2d动态模型插件\nhttps://blog.csdn.net/qq_30930805/article/details/\n\n## vscode\n\n### vscode 上传图片\n\n```sh\n# 上传剪贴板中的图片到服务器。\nctrl + alt + u\n# 打开文件浏览器选择图片上传。\nctrl + alt + e\n\n```\n- https://www.jianshu.com/p/868b3a2028f8\n\n\n## plantuml\n\n\n\n\n## windows 开源软件\n\n potplayer \nhttps://iptv-org.github.io/iptv/index.m3u\n\n\n\neveryting\n\n7zip\n\nrustdesk  远程开源软件\n\nmaya\n\nimagine\n\nscreentogif\n\nditto\n\nbleachbit\n\nqbittorrent\n\ngrammarly\n\n剪切板win10自带的有很多剪切记录的快捷键Windows键➕V键\n\n线上思维导图\nhttps://gitmind.cn/app/template\n在线文档转换\nhttps://www.aconvert.com/cn/\n开源软件下载网站\nhttps://www.fosshub.com/#\n\n### windows ternial \n- 添加 git base 到ternial\n\n\n## linux\n\n### linux 各种系统\n\nubuntu、Linux Mint、suse、Manjaro\n\n### chrome插件\n\n油猴\n\n\n\n## React Router\n\n\nhttp://react-guide.github.io/react-router-cn/index.html\n\n\n## youtube 下载\nhttps://www.ganbey.com/youtube-download-3774\n\n\n\n## zlog\nhttps://blog.csdn.net/twd_1991/article/details/80481920\n\nhttp://hardysimpson.github.io/zlog/UsersGuide-CN.html\n","slug":"Software&Tool","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckwji3h3o0001akuu26hw1ifk","content":"<h2 id=\"GitHub-Pages-Hexo使用及配置\"><a href=\"#GitHub-Pages-Hexo使用及配置\" class=\"headerlink\" title=\"GitHub Pages + Hexo使用及配置\"></a>GitHub Pages + Hexo使用及配置</h2><p>github上创建一个  username.github.io 的工程，username 必须为github的用户名</p>\n<span id=\"more\"></span>\n\n<h3 id=\"Hexo-安装\"><a href=\"#Hexo-安装\" class=\"headerlink\" title=\"Hexo 安装\"></a>Hexo 安装</h3><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清理缓存</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"><span class=\"comment\"># 生成网页</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"comment\"># 启动本地服务端口</span></span><br><span class=\"line\">hexo s</span><br><span class=\"line\"><span class=\"comment\"># 发布到github</span></span><br><span class=\"line\">hexo d</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强制推送备份源码分支</span></span><br><span class=\"line\">git push -f origin backup</span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.jianshu.com/p/f82c76b90336\">https://www.jianshu.com/p/f82c76b90336</a></p>\n<p><a href=\"https://www.jianshu.com/p/5d0b31032d55\">https://www.jianshu.com/p/5d0b31032d55</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_41922289/article/details/95639870\">https://blog.csdn.net/weixin_41922289/article/details/95639870</a></p>\n<p><a href=\"https://theme-next.org/\">https://theme-next.org/</a></p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\">https://hexo.io/zh-cn/docs/</a></p>\n<p><a href=\"https://www.jianshu.com/p/3a05351a37dc\">https://www.jianshu.com/p/3a05351a37dc</a></p>\n<p><a href=\"https://www.zhyong.cn/posts/ca02/\">https://www.zhyong.cn/posts/ca02/</a></p>\n<p><a href=\"http://theme-next.iissnan.com/\">http://theme-next.iissnan.com/</a></p>\n<p><a href=\"https://liam.page/\">https://liam.page/</a></p>\n<p><a href=\"https://liam.page/en/\">https://liam.page/en/</a></p>\n<ul>\n<li>Hexo博客添加helper-live2d动态模型插件<br><a href=\"https://blog.csdn.net/qq_30930805/article/details/\">https://blog.csdn.net/qq_30930805/article/details/</a></li>\n</ul>\n<h2 id=\"vscode\"><a href=\"#vscode\" class=\"headerlink\" title=\"vscode\"></a>vscode</h2><h3 id=\"vscode-上传图片\"><a href=\"#vscode-上传图片\" class=\"headerlink\" title=\"vscode 上传图片\"></a>vscode 上传图片</h3><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 上传剪贴板中的图片到服务器。</span></span><br><span class=\"line\">ctrl + alt + u</span><br><span class=\"line\"><span class=\"comment\"># 打开文件浏览器选择图片上传。</span></span><br><span class=\"line\">ctrl + alt + e</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/868b3a2028f8\">https://www.jianshu.com/p/868b3a2028f8</a></li>\n</ul>\n<h2 id=\"plantuml\"><a href=\"#plantuml\" class=\"headerlink\" title=\"plantuml\"></a>plantuml</h2><h2 id=\"windows-开源软件\"><a href=\"#windows-开源软件\" class=\"headerlink\" title=\"windows 开源软件\"></a>windows 开源软件</h2><p> potplayer<br><a href=\"https://iptv-org.github.io/iptv/index.m3u\">https://iptv-org.github.io/iptv/index.m3u</a></p>\n<p>everyting</p>\n<p>7zip</p>\n<p>rustdesk  远程开源软件</p>\n<p>maya</p>\n<p>imagine</p>\n<p>screentogif</p>\n<p>ditto</p>\n<p>bleachbit</p>\n<p>qbittorrent</p>\n<p>grammarly</p>\n<p>剪切板win10自带的有很多剪切记录的快捷键Windows键➕V键</p>\n<p>线上思维导图<br><a href=\"https://gitmind.cn/app/template\">https://gitmind.cn/app/template</a><br>在线文档转换<br><a href=\"https://www.aconvert.com/cn/\">https://www.aconvert.com/cn/</a><br>开源软件下载网站<br><a href=\"https://www.fosshub.com/#\">https://www.fosshub.com/#</a></p>\n<h3 id=\"windows-ternial\"><a href=\"#windows-ternial\" class=\"headerlink\" title=\"windows ternial\"></a>windows ternial</h3><ul>\n<li>添加 git base 到ternial</li>\n</ul>\n<h2 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h2><h3 id=\"linux-各种系统\"><a href=\"#linux-各种系统\" class=\"headerlink\" title=\"linux 各种系统\"></a>linux 各种系统</h3><p>ubuntu、Linux Mint、suse、Manjaro</p>\n<h3 id=\"chrome插件\"><a href=\"#chrome插件\" class=\"headerlink\" title=\"chrome插件\"></a>chrome插件</h3><p>油猴</p>\n<h2 id=\"React-Router\"><a href=\"#React-Router\" class=\"headerlink\" title=\"React Router\"></a>React Router</h2><p><a href=\"http://react-guide.github.io/react-router-cn/index.html\">http://react-guide.github.io/react-router-cn/index.html</a></p>\n<h2 id=\"youtube-下载\"><a href=\"#youtube-下载\" class=\"headerlink\" title=\"youtube 下载\"></a>youtube 下载</h2><p><a href=\"https://www.ganbey.com/youtube-download-3774\">https://www.ganbey.com/youtube-download-3774</a></p>\n<h2 id=\"zlog\"><a href=\"#zlog\" class=\"headerlink\" title=\"zlog\"></a>zlog</h2><p><a href=\"https://blog.csdn.net/twd_1991/article/details/80481920\">https://blog.csdn.net/twd_1991/article/details/80481920</a></p>\n<p><a href=\"http://hardysimpson.github.io/zlog/UsersGuide-CN.html\">http://hardysimpson.github.io/zlog/UsersGuide-CN.html</a></p>\n","site":{"data":{}},"abbrlink":"3H7GMJR","length":1303,"excerpt":"<h2 id=\"GitHub-Pages-Hexo使用及配置\"><a href=\"#GitHub-Pages-Hexo使用及配置\" class=\"headerlink\" title=\"GitHub Pages + Hexo使用及配置\"></a>GitHub Pages + Hexo使用及配置</h2><p>github上创建一个  username.github.io 的工程，username 必须为github的用户名</p>","more":"<h3 id=\"Hexo-安装\"><a href=\"#Hexo-安装\" class=\"headerlink\" title=\"Hexo 安装\"></a>Hexo 安装</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清理缓存</span></span><br><span class=\"line\">hexo clean</span><br><span class=\"line\"><span class=\"comment\"># 生成网页</span></span><br><span class=\"line\">hexo g</span><br><span class=\"line\"><span class=\"comment\"># 启动本地服务端口</span></span><br><span class=\"line\">hexo s</span><br><span class=\"line\"><span class=\"comment\"># 发布到github</span></span><br><span class=\"line\">hexo d</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 强制推送备份源码分支</span></span><br><span class=\"line\">git push -f origin backup</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.jianshu.com/p/f82c76b90336\">https://www.jianshu.com/p/f82c76b90336</a></p>\n<p><a href=\"https://www.jianshu.com/p/5d0b31032d55\">https://www.jianshu.com/p/5d0b31032d55</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_41922289/article/details/95639870\">https://blog.csdn.net/weixin_41922289/article/details/95639870</a></p>\n<p><a href=\"https://theme-next.org/\">https://theme-next.org/</a></p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\">https://hexo.io/zh-cn/docs/</a></p>\n<p><a href=\"https://www.jianshu.com/p/3a05351a37dc\">https://www.jianshu.com/p/3a05351a37dc</a></p>\n<p><a href=\"https://www.zhyong.cn/posts/ca02/\">https://www.zhyong.cn/posts/ca02/</a></p>\n<p><a href=\"http://theme-next.iissnan.com/\">http://theme-next.iissnan.com/</a></p>\n<p><a href=\"https://liam.page/\">https://liam.page/</a></p>\n<p><a href=\"https://liam.page/en/\">https://liam.page/en/</a></p>\n<ul>\n<li>Hexo博客添加helper-live2d动态模型插件<br><a href=\"https://blog.csdn.net/qq_30930805/article/details/\">https://blog.csdn.net/qq_30930805/article/details/</a></li>\n</ul>\n<h2 id=\"vscode\"><a href=\"#vscode\" class=\"headerlink\" title=\"vscode\"></a>vscode</h2><h3 id=\"vscode-上传图片\"><a href=\"#vscode-上传图片\" class=\"headerlink\" title=\"vscode 上传图片\"></a>vscode 上传图片</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 上传剪贴板中的图片到服务器。</span></span><br><span class=\"line\">ctrl + alt + u</span><br><span class=\"line\"><span class=\"comment\"># 打开文件浏览器选择图片上传。</span></span><br><span class=\"line\">ctrl + alt + e</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/868b3a2028f8\">https://www.jianshu.com/p/868b3a2028f8</a></li>\n</ul>\n<h2 id=\"plantuml\"><a href=\"#plantuml\" class=\"headerlink\" title=\"plantuml\"></a>plantuml</h2><h2 id=\"windows-开源软件\"><a href=\"#windows-开源软件\" class=\"headerlink\" title=\"windows 开源软件\"></a>windows 开源软件</h2><p> potplayer<br><a href=\"https://iptv-org.github.io/iptv/index.m3u\">https://iptv-org.github.io/iptv/index.m3u</a></p>\n<p>everyting</p>\n<p>7zip</p>\n<p>rustdesk  远程开源软件</p>\n<p>maya</p>\n<p>imagine</p>\n<p>screentogif</p>\n<p>ditto</p>\n<p>bleachbit</p>\n<p>qbittorrent</p>\n<p>grammarly</p>\n<p>剪切板win10自带的有很多剪切记录的快捷键Windows键➕V键</p>\n<p>线上思维导图<br><a href=\"https://gitmind.cn/app/template\">https://gitmind.cn/app/template</a><br>在线文档转换<br><a href=\"https://www.aconvert.com/cn/\">https://www.aconvert.com/cn/</a><br>开源软件下载网站<br><a href=\"https://www.fosshub.com/#\">https://www.fosshub.com/#</a></p>\n<h3 id=\"windows-ternial\"><a href=\"#windows-ternial\" class=\"headerlink\" title=\"windows ternial\"></a>windows ternial</h3><ul>\n<li>添加 git base 到ternial</li>\n</ul>\n<h2 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h2><h3 id=\"linux-各种系统\"><a href=\"#linux-各种系统\" class=\"headerlink\" title=\"linux 各种系统\"></a>linux 各种系统</h3><p>ubuntu、Linux Mint、suse、Manjaro</p>\n<h3 id=\"chrome插件\"><a href=\"#chrome插件\" class=\"headerlink\" title=\"chrome插件\"></a>chrome插件</h3><p>油猴</p>\n<h2 id=\"React-Router\"><a href=\"#React-Router\" class=\"headerlink\" title=\"React Router\"></a>React Router</h2><p><a href=\"http://react-guide.github.io/react-router-cn/index.html\">http://react-guide.github.io/react-router-cn/index.html</a></p>\n<h2 id=\"youtube-下载\"><a href=\"#youtube-下载\" class=\"headerlink\" title=\"youtube 下载\"></a>youtube 下载</h2><p><a href=\"https://www.ganbey.com/youtube-download-3774\">https://www.ganbey.com/youtube-download-3774</a></p>\n<h2 id=\"zlog\"><a href=\"#zlog\" class=\"headerlink\" title=\"zlog\"></a>zlog</h2><p><a href=\"https://blog.csdn.net/twd_1991/article/details/80481920\">https://blog.csdn.net/twd_1991/article/details/80481920</a></p>\n<p><a href=\"http://hardysimpson.github.io/zlog/UsersGuide-CN.html\">http://hardysimpson.github.io/zlog/UsersGuide-CN.html</a></p>"},{"title":"WSL","date":"2021-10-26T16:47:53.000Z","updated":"2021-10-26T16:53:53.000Z","_content":"\n\n## 安装ubuntu20.04\n\n安装到非系统盘目录，下载离线安装包，复制到想要安装的目录下，解压，以管理员身份运行ubuntu2004.exe\n\n## 卸载wsl\n\n```sh\nwslconfig /l\n# 从列表中选择要卸载的发行版（例如Ubuntu）并键入命令\nwslconfig /u Ubuntu\n```\n参考链接：[WSL系列操作：安装，卸载](https://blog.csdn.net/zhangpeterx/article/details/97616268\n)\n\n<!--more-->\n\n## 设置wsl\n```sh\n# 更改默认root用户登录\nubuntu1804.exe config --default-user root\n# 更改默认登陆目录\n# list 中 Ubuntu-20.04 条目中添加\n\"startingDirectory\": \"//wsl$/Ubuntu-20.04\"\n```\n\n## ubuntu 换源\n\n```sh\n# 备份\ncp /etc/apt/sources.list /etc/apt/sources.list.20211013\nlsb_release -c\nlsb_release -a\n# \n\nsudo apt-get update\nsudo apt-get upgrade\n\n```\n参考链接：[ubuntu20.04更改国内镜像源](https://blog.csdn.net/qq_33706673/article/details/106869016)\n\n\n## Read The Docs 环境搭建\n\n```sh\n\nsudo apt-get install python3-pip\n\npip install sphinx sphinx-autobuild sphinx_rtd_theme\npip install recommonmark\npip install sphinx-markdown-tables\npip install Pyinstaller -i http://pypi.douban.com/simple --trusted-host pypi.douban.com\n（其中的Pyinstaller是你需要下载的库或包名，根据自己需求自行更改即可）\n\nextensions = [\n    'recommonmark',\n    'sphinx_markdown_tables'\n]\n\npython3 -m pip freeze > requirements.txt\n```\n\n参考链接：\n[VsCode +Read The Docs 环境搭建](https://zhuanlan.zhihu.com/p/112919704)\n<br>\n\n[Sphinx + Read the Docs 从懵逼到入门](https://zhuanlan.zhihu.com/p/264647009)\n<br>\n\n[ReadTheDocs搭建第一本电子书](https://zhuanlan.zhihu.com/p/388640347)\n\n\nhttps://www.jianshu.com/p/8aae1c1453ae\n\n## git\n\ngit push -u origin main\n\n[玩转WSL(6)之Git配置](https://zhuanlan.zhihu.com/p/252505037)\n\n## PowerShell\n\nwinget search Microsoft.PowerShell\n\n- [Windows Powershell和Windows Terminal的区别](https://blog.csdn.net/The_Time_Runner/article/details/106038222)\n<br>\n\n[安装和设置 Windows 终端](https://docs.microsoft.com/zh-cn/windows/terminal/get-started)\n\n\n## windows 包管理工具\n\n- winget 官方推出\n```sh\n# 使用 WinGet 安装一遍\nwinget install postman\nwinget search postman\n\n# 卸载，再用 Scoop 安装一遍\nscoop install postman\n```\n- choro\n\n- vcpkg\n[Get started with vcpkg](https://vcpkg.io/en/getting-started.html)\n<br>\n\n[开源库集成器Vcpkg全教程](https://blog.csdn.net/cjmqas/article/details/79282847)\n\n\n Scoop ","source":"_posts/WSL.md","raw":"---\ntitle: WSL\ndate: 2021-10-27 00:47:53\nupdated: 2021-10-27 00:53:53\ncategories: \n    - tool\ntags: \n    - 实用教程\n    - Another Tag\n---\n\n\n## 安装ubuntu20.04\n\n安装到非系统盘目录，下载离线安装包，复制到想要安装的目录下，解压，以管理员身份运行ubuntu2004.exe\n\n## 卸载wsl\n\n```sh\nwslconfig /l\n# 从列表中选择要卸载的发行版（例如Ubuntu）并键入命令\nwslconfig /u Ubuntu\n```\n参考链接：[WSL系列操作：安装，卸载](https://blog.csdn.net/zhangpeterx/article/details/97616268\n)\n\n<!--more-->\n\n## 设置wsl\n```sh\n# 更改默认root用户登录\nubuntu1804.exe config --default-user root\n# 更改默认登陆目录\n# list 中 Ubuntu-20.04 条目中添加\n\"startingDirectory\": \"//wsl$/Ubuntu-20.04\"\n```\n\n## ubuntu 换源\n\n```sh\n# 备份\ncp /etc/apt/sources.list /etc/apt/sources.list.20211013\nlsb_release -c\nlsb_release -a\n# \n\nsudo apt-get update\nsudo apt-get upgrade\n\n```\n参考链接：[ubuntu20.04更改国内镜像源](https://blog.csdn.net/qq_33706673/article/details/106869016)\n\n\n## Read The Docs 环境搭建\n\n```sh\n\nsudo apt-get install python3-pip\n\npip install sphinx sphinx-autobuild sphinx_rtd_theme\npip install recommonmark\npip install sphinx-markdown-tables\npip install Pyinstaller -i http://pypi.douban.com/simple --trusted-host pypi.douban.com\n（其中的Pyinstaller是你需要下载的库或包名，根据自己需求自行更改即可）\n\nextensions = [\n    'recommonmark',\n    'sphinx_markdown_tables'\n]\n\npython3 -m pip freeze > requirements.txt\n```\n\n参考链接：\n[VsCode +Read The Docs 环境搭建](https://zhuanlan.zhihu.com/p/112919704)\n<br>\n\n[Sphinx + Read the Docs 从懵逼到入门](https://zhuanlan.zhihu.com/p/264647009)\n<br>\n\n[ReadTheDocs搭建第一本电子书](https://zhuanlan.zhihu.com/p/388640347)\n\n\nhttps://www.jianshu.com/p/8aae1c1453ae\n\n## git\n\ngit push -u origin main\n\n[玩转WSL(6)之Git配置](https://zhuanlan.zhihu.com/p/252505037)\n\n## PowerShell\n\nwinget search Microsoft.PowerShell\n\n- [Windows Powershell和Windows Terminal的区别](https://blog.csdn.net/The_Time_Runner/article/details/106038222)\n<br>\n\n[安装和设置 Windows 终端](https://docs.microsoft.com/zh-cn/windows/terminal/get-started)\n\n\n## windows 包管理工具\n\n- winget 官方推出\n```sh\n# 使用 WinGet 安装一遍\nwinget install postman\nwinget search postman\n\n# 卸载，再用 Scoop 安装一遍\nscoop install postman\n```\n- choro\n\n- vcpkg\n[Get started with vcpkg](https://vcpkg.io/en/getting-started.html)\n<br>\n\n[开源库集成器Vcpkg全教程](https://blog.csdn.net/cjmqas/article/details/79282847)\n\n\n Scoop ","slug":"WSL","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckwji3h3q0003akuuc8lxffwx","content":"<h2 id=\"安装ubuntu20-04\"><a href=\"#安装ubuntu20-04\" class=\"headerlink\" title=\"安装ubuntu20.04\"></a>安装ubuntu20.04</h2><p>安装到非系统盘目录，下载离线安装包，复制到想要安装的目录下，解压，以管理员身份运行ubuntu2004.exe</p>\n<h2 id=\"卸载wsl\"><a href=\"#卸载wsl\" class=\"headerlink\" title=\"卸载wsl\"></a>卸载wsl</h2><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wslconfig /l</span><br><span class=\"line\"><span class=\"comment\"># 从列表中选择要卸载的发行版（例如Ubuntu）并键入命令</span></span><br><span class=\"line\">wslconfig /u Ubuntu</span><br></pre></td></tr></tbody></table></figure>\n<p>参考链接：<a href=\"https://blog.csdn.net/zhangpeterx/article/details/97616268\">WSL系列操作：安装，卸载</a></p>\n<span id=\"more\"></span>\n\n<h2 id=\"设置wsl\"><a href=\"#设置wsl\" class=\"headerlink\" title=\"设置wsl\"></a>设置wsl</h2><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更改默认root用户登录</span></span><br><span class=\"line\">ubuntu1804.exe config --default-user root</span><br><span class=\"line\"><span class=\"comment\"># 更改默认登陆目录</span></span><br><span class=\"line\"><span class=\"comment\"># list 中 Ubuntu-20.04 条目中添加</span></span><br><span class=\"line\"><span class=\"string\">\"startingDirectory\"</span>: <span class=\"string\">\"//wsl$/Ubuntu-20.04\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<h2 id=\"ubuntu-换源\"><a href=\"#ubuntu-换源\" class=\"headerlink\" title=\"ubuntu 换源\"></a>ubuntu 换源</h2><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 备份</span></span><br><span class=\"line\">cp /etc/apt/sources.list /etc/apt/sources.list.20211013</span><br><span class=\"line\">lsb_release -c</span><br><span class=\"line\">lsb_release -a</span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<p>参考链接：<a href=\"https://blog.csdn.net/qq_33706673/article/details/106869016\">ubuntu20.04更改国内镜像源</a></p>\n<h2 id=\"Read-The-Docs-环境搭建\"><a href=\"#Read-The-Docs-环境搭建\" class=\"headerlink\" title=\"Read The Docs 环境搭建\"></a>Read The Docs 环境搭建</h2><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install python3-pip</span><br><span class=\"line\"></span><br><span class=\"line\">pip install sphinx sphinx-autobuild sphinx_rtd_theme</span><br><span class=\"line\">pip install recommonmark</span><br><span class=\"line\">pip install sphinx-markdown-tables</span><br><span class=\"line\">pip install Pyinstaller -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br><span class=\"line\">（其中的Pyinstaller是你需要下载的库或包名，根据自己需求自行更改即可）</span><br><span class=\"line\"></span><br><span class=\"line\">extensions = [</span><br><span class=\"line\">    <span class=\"string\">'recommonmark'</span>,</span><br><span class=\"line\">    <span class=\"string\">'sphinx_markdown_tables'</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">python3 -m pip freeze &gt; requirements.txt</span><br></pre></td></tr></tbody></table></figure>\n\n<p>参考链接：<br><a href=\"https://zhuanlan.zhihu.com/p/112919704\">VsCode +Read The Docs 环境搭建</a><br><br></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/264647009\">Sphinx + Read the Docs 从懵逼到入门</a><br><br></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/388640347\">ReadTheDocs搭建第一本电子书</a></p>\n<p><a href=\"https://www.jianshu.com/p/8aae1c1453ae\">https://www.jianshu.com/p/8aae1c1453ae</a></p>\n<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><p>git push -u origin main</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/252505037\">玩转WSL(6)之Git配置</a></p>\n<h2 id=\"PowerShell\"><a href=\"#PowerShell\" class=\"headerlink\" title=\"PowerShell\"></a>PowerShell</h2><p>winget search Microsoft.PowerShell</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/The_Time_Runner/article/details/106038222\">Windows Powershell和Windows Terminal的区别</a><br></li>\n</ul>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/terminal/get-started\">安装和设置 Windows 终端</a></p>\n<h2 id=\"windows-包管理工具\"><a href=\"#windows-包管理工具\" class=\"headerlink\" title=\"windows 包管理工具\"></a>windows 包管理工具</h2><ul>\n<li><p>winget 官方推出</p>\n<figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 WinGet 安装一遍</span></span><br><span class=\"line\">winget install postman</span><br><span class=\"line\">winget search postman</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载，再用 Scoop 安装一遍</span></span><br><span class=\"line\">scoop install postman</span><br></pre></td></tr></tbody></table></figure></li>\n<li><p>choro</p>\n</li>\n<li><p>vcpkg<br><a href=\"https://vcpkg.io/en/getting-started.html\">Get started with vcpkg</a></p>\n<br></li>\n</ul>\n<p><a href=\"https://blog.csdn.net/cjmqas/article/details/79282847\">开源库集成器Vcpkg全教程</a></p>\n<p> Scoop </p>\n","site":{"data":{}},"abbrlink":"1W4XRGB","length":1259,"excerpt":"<h2 id=\"安装ubuntu20-04\"><a href=\"#安装ubuntu20-04\" class=\"headerlink\" title=\"安装ubuntu20.04\"></a>安装ubuntu20.04</h2><p>安装到非系统盘目录，下载离线安装包，复制到想要安装的目录下，解压，以管理员身份运行ubuntu2004.exe</p>\n<h2 id=\"卸载wsl\"><a href=\"#卸载wsl\" class=\"headerlink\" title=\"卸载wsl\"></a>卸载wsl</h2><figure class=\"highlight sh\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wslconfig /l</span><br><span class=\"line\"><span class=\"comment\"># 从列表中选择要卸载的发行版（例如Ubuntu）并键入命令</span></span><br><span class=\"line\">wslconfig /u Ubuntu</span><br></pre></td></tr></tbody></table></figure>\n<p>参考链接：<a href=\"https://blog.csdn.net/zhangpeterx/article/details/97616268\">WSL系列操作：安装，卸载</a></p>","more":"<h2 id=\"设置wsl\"><a href=\"#设置wsl\" class=\"headerlink\" title=\"设置wsl\"></a>设置wsl</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更改默认root用户登录</span></span><br><span class=\"line\">ubuntu1804.exe config --default-user root</span><br><span class=\"line\"><span class=\"comment\"># 更改默认登陆目录</span></span><br><span class=\"line\"><span class=\"comment\"># list 中 Ubuntu-20.04 条目中添加</span></span><br><span class=\"line\"><span class=\"string\">&quot;startingDirectory&quot;</span>: <span class=\"string\">&quot;//wsl$/Ubuntu-20.04&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ubuntu-换源\"><a href=\"#ubuntu-换源\" class=\"headerlink\" title=\"ubuntu 换源\"></a>ubuntu 换源</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 备份</span></span><br><span class=\"line\">cp /etc/apt/sources.list /etc/apt/sources.list.20211013</span><br><span class=\"line\">lsb_release -c</span><br><span class=\"line\">lsb_release -a</span><br><span class=\"line\"><span class=\"comment\"># </span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get upgrade</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>参考链接：<a href=\"https://blog.csdn.net/qq_33706673/article/details/106869016\">ubuntu20.04更改国内镜像源</a></p>\n<h2 id=\"Read-The-Docs-环境搭建\"><a href=\"#Read-The-Docs-环境搭建\" class=\"headerlink\" title=\"Read The Docs 环境搭建\"></a>Read The Docs 环境搭建</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">sudo apt-get install python3-pip</span><br><span class=\"line\"></span><br><span class=\"line\">pip install sphinx sphinx-autobuild sphinx_rtd_theme</span><br><span class=\"line\">pip install recommonmark</span><br><span class=\"line\">pip install sphinx-markdown-tables</span><br><span class=\"line\">pip install Pyinstaller -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br><span class=\"line\">（其中的Pyinstaller是你需要下载的库或包名，根据自己需求自行更改即可）</span><br><span class=\"line\"></span><br><span class=\"line\">extensions = [</span><br><span class=\"line\">    <span class=\"string\">&#x27;recommonmark&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;sphinx_markdown_tables&#x27;</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">python3 -m pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>\n\n<p>参考链接：<br><a href=\"https://zhuanlan.zhihu.com/p/112919704\">VsCode +Read The Docs 环境搭建</a><br><br></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/264647009\">Sphinx + Read the Docs 从懵逼到入门</a><br><br></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/388640347\">ReadTheDocs搭建第一本电子书</a></p>\n<p><a href=\"https://www.jianshu.com/p/8aae1c1453ae\">https://www.jianshu.com/p/8aae1c1453ae</a></p>\n<h2 id=\"git\"><a href=\"#git\" class=\"headerlink\" title=\"git\"></a>git</h2><p>git push -u origin main</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/252505037\">玩转WSL(6)之Git配置</a></p>\n<h2 id=\"PowerShell\"><a href=\"#PowerShell\" class=\"headerlink\" title=\"PowerShell\"></a>PowerShell</h2><p>winget search Microsoft.PowerShell</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/The_Time_Runner/article/details/106038222\">Windows Powershell和Windows Terminal的区别</a><br></li>\n</ul>\n<p><a href=\"https://docs.microsoft.com/zh-cn/windows/terminal/get-started\">安装和设置 Windows 终端</a></p>\n<h2 id=\"windows-包管理工具\"><a href=\"#windows-包管理工具\" class=\"headerlink\" title=\"windows 包管理工具\"></a>windows 包管理工具</h2><ul>\n<li><p>winget 官方推出</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用 WinGet 安装一遍</span></span><br><span class=\"line\">winget install postman</span><br><span class=\"line\">winget search postman</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 卸载，再用 Scoop 安装一遍</span></span><br><span class=\"line\">scoop install postman</span><br></pre></td></tr></table></figure></li>\n<li><p>choro</p>\n</li>\n<li><p>vcpkg<br><a href=\"https://vcpkg.io/en/getting-started.html\">Get started with vcpkg</a></p>\n<br></li>\n</ul>\n<p><a href=\"https://blog.csdn.net/cjmqas/article/details/79282847\">开源库集成器Vcpkg全教程</a></p>\n<p> Scoop </p>"},{"title":"Hello World","_content":"\n\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\n\n\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!--more-->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n\n","slug":"hello-world","published":1,"date":"2021-10-25T15:41:26.082Z","updated":"2021-10-26T14:34:13.311Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckwji3h3t0007akuuhtynexgh","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<span id=\"more\"></span>\n\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"abbrlink":"151FCAP","length":367,"excerpt":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>"},{"title":"书单&电影","date":"2021-10-26T16:47:53.000Z","updated":"2021-10-26T16:53:53.000Z","_content":"\n\n##\n\n- C语言编程魔法书：基于C11标准\n\n<!--more-->\n\n\n\n- 夜色人生\n禁酒令是黑帮斗争,爱尔兰人;\n- 控方证人\n犯罪悬疑,1958年的英国谋杀案电影\n\n\n\n教父三部曲\n勇敢的心\n\n```plantuml\n@startuml\n\nBob -> Alice : Hello, how are you\nAlice -> Bob : Fine, thank you, and you?\n\n@enduml\n```\n\n{% plantuml %}\n!theme spacelab\nBob -> Alice :  hello\nBob <- Alice :  $success(\"success: hello B.\")\nBob -x Alice :  $failure(\"failure\")\nBob ->> Alice : $warning(\"warning\")\n{% endplantuml %}\n\n\n{% plantuml %}\n  Alice -> Bob: Authentication Request\n  Bob --> Alice: Authentication Response\n\n  Alice -> Bob: Another atuhentication Request\n  Alice <-- Bob: Another authentication Response\n{% endplantuml %}","source":"_posts/书单.md","raw":"---\ntitle: 书单&电影\ndate: 2021-10-27 00:47:53\nupdated: 2021-10-27 00:53:53\ncategories: \n    - tool\ntags: \n    - 实用教程\n    - Another Tag\n---\n\n\n##\n\n- C语言编程魔法书：基于C11标准\n\n<!--more-->\n\n\n\n- 夜色人生\n禁酒令是黑帮斗争,爱尔兰人;\n- 控方证人\n犯罪悬疑,1958年的英国谋杀案电影\n\n\n\n教父三部曲\n勇敢的心\n\n```plantuml\n@startuml\n\nBob -> Alice : Hello, how are you\nAlice -> Bob : Fine, thank you, and you?\n\n@enduml\n```\n\n{% plantuml %}\n!theme spacelab\nBob -> Alice :  hello\nBob <- Alice :  $success(\"success: hello B.\")\nBob -x Alice :  $failure(\"failure\")\nBob ->> Alice : $warning(\"warning\")\n{% endplantuml %}\n\n\n{% plantuml %}\n  Alice -> Bob: Authentication Request\n  Bob --> Alice: Authentication Response\n\n  Alice -> Bob: Another atuhentication Request\n  Alice <-- Bob: Another authentication Response\n{% endplantuml %}","slug":"书单","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckwji3h3u0009akuu9v290dq2","content":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><ul>\n<li>C语言编程魔法书：基于C11标准</li>\n</ul>\n<span id=\"more\"></span>\n\n\n\n<ul>\n<li>夜色人生<br>禁酒令是黑帮斗争,爱尔兰人;</li>\n<li>控方证人<br>犯罪悬疑,1958年的英国谋杀案电影</li>\n</ul>\n<p>教父三部曲<br>勇敢的心</p>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\"></span><br><span class=\"line\">Bob -&gt; Alice : Hello, how are you</span><br><span class=\"line\">Alice -&gt; Bob : Fine, thank you, and you?</span><br><span class=\"line\"></span><br><span class=\"line\">@enduml</span><br></pre></td></tr></tbody></table></figure>\n\n<img src=\"http://www.plantuml.com/plantuml/svg/Kop9ICrDLIWkI4nEpKbCudBAJrBGjLDmpCbCJbMmKb38ICt9oGUBskWYH5MAIvEJKukBDPIW32k8GWKdFILDY1aLIAhJ4ZDpIejIDPIW39WQEuH5AkM9HNcPUUaQIb26aYO0\">\n\n\n<img src=\"http://www.plantuml.com/plantuml/svg/Syp9J4vLqBLJSCfFib9mB2t9ICqhoKnEBCdCprC8IYqiJIqkuGBAAUW2rJY256DHLLoGdrUSoiNbY6fONZvGNP52OaafDaCXYcrqTT5KOpSS0000\">","site":{"data":{}},"abbrlink":"1DMG0PV","length":151,"excerpt":"<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2><ul>\n<li>C语言编程魔法书：基于C11标准</li>\n</ul>","more":"<ul>\n<li>夜色人生<br>禁酒令是黑帮斗争,爱尔兰人;</li>\n<li>控方证人<br>犯罪悬疑,1958年的英国谋杀案电影</li>\n</ul>\n<p>教父三部曲<br>勇敢的心</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\"></span><br><span class=\"line\">Bob -&gt; Alice : Hello, how are you</span><br><span class=\"line\">Alice -&gt; Bob : Fine, thank you, and you?</span><br><span class=\"line\"></span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n\n<img  src=http://www.plantuml.com/plantuml/svg/Kop9ICrDLIWkI4nEpKbCudBAJrBGjLDmpCbCJbMmKb38ICt9oGUBskWYH5MAIvEJKukBDPIW32k8GWKdFILDY1aLIAhJ4ZDpIejIDPIW39WQEuH5AkM9HNcPUUaQIb26aYO0>\n\n\n<img  src=http://www.plantuml.com/plantuml/svg/Syp9J4vLqBLJSCfFib9mB2t9ICqhoKnEBCdCprC8IYqiJIqkuGBAAUW2rJY256DHLLoGdrUSoiNbY6fONZvGNP52OaafDaCXYcrqTT5KOpSS0000>"},{"title":"数据结构与算法基础","date":"2021-10-26T16:47:53.000Z","updated":"2021-10-26T16:53:53.000Z","password":"liuz0000","abstract":"这是一篇加密博文，请输入密码后查看","message":"这里需要密码才能访问。","wrong_pass_message":"抱歉, 这个密码看着不太对, 请再试试.","_content":"\n## 1 程序性能\n\n<!--more-->\n\n&ensp;程序性能是指运行程序所需要的内存大小(空间复杂度)和时间(时间复杂度),运行时间和占用空间是算法性能最关键的指标。\n&ensp;软件程序性能衡量指标:\n&emsp;响应时间、启动时间、执行时间、执行速度、计算资源分配、内存分配、磁盘吞吐量、网络吞吐量、负载承受能力\n\n\n### 1.1 空间复杂度\n&ensp;空间复杂度(Space complexity)，算法完全运行所需存储空间。表示算法的存储空间与数据规模之间的增长关系：常量空间、线性空间、二维空间。\n&ensp;算法在计算机存储器上所占用的存储空间，包括**存储程序本身占用的存储空间，算法输入输出数据所占的存储空间和算法在运行过程中临时占用的存储空间**。\n\n\n### 1.2 时间复杂度\n&ensp;时间复杂度(Time complexity)，算法完全运行所需运算时间。时间复杂度通常用大O符合表示。\n\n![20211027233029](https://i.loli.net/2021/10/27/UxWCvnRQLYz5eiG.png)\n\n#### 1.2.1 常见算法大O\n&emsp; 常量阶O(1); 对数阶O(logn); 线性阶O(n); 线性对数阶O(nlogn); k次方阶O(n^k)\n![20211028010721](https://i.loli.net/2021/10/28/GWOFcUi3qdVIlmf.png)\n\n#### 1.2.2 常见数据结构\n\n### 本章参考：\n- 复杂度速查表\nhttps://liam.page/2016/06/20/big-O-cheat-sheet/\n\n## 2 基本数据结构\n\n基本数据结构:\n&emsp;字符,字符串:char,string\n&emsp;整型:short,int,long;unsigned\n&emsp;浮点型:float,double\n&emsp;结构体:struct\n&emsp;枚举:enum\n&emsp;联合体:union\n&ensp;自定义数据结构\n&emsp;线性表\n&emsp;&ensp;数组:array\n&emsp;&ensp;链表:数据域,指针域\n&emsp;&ensp;队列\n&emsp;&ensp;栈\n&emsp;&ensp;堆 \n&emsp;\n\n### 2.1 线性表\n&ensp;线性表是n个具有相同特性的数据元素的有序序列。线性表除第一个和最后一个数据元素之外，其他数据元素都是首尾相接的。\n&ensp;数据在实际的物理存储中有两种形式：分散存储和集中存储,常见数据结构有栈、队列、字符串、链表等。\n&ensp;两种情况下数据的存储问题：\n&emsp; 数据元素在内存中集中存储，采用顺序表示结构，简称“顺序存储”；\n&emsp; 数据元素在内存中分散存储，采用链式表示结构，简称“链式存储”\n\n#### 2.1.1 数组\n&emsp;数组是一批相同数据的集合。数组的三部分：地址 大小 和 空间。数组的保存形式为线性表。\n```c\nint arr[10]; // /[]内必须是常量/常量表达式(3+8)，不能是一个变量(x...)\n// 数组初始化\nint arr1[3] = {1, 2, 3};\nchar arr6[] = \"abcdef\";\n// 指针\nint *ptr = NULL;//定义一个整型的指针变量，初始化为NULL\nchar *ptr = NULL;//定义一个字符的指针变量，初始化为NULL\n// 二维数组\nint arr[3][5] = { 0 };\n// C 传递数组给函数\n// \nvoid myFunction(int *param)\nvoid myFunction(int param[10])\nvoid myFunction(int param[])\n// C 从函数返回数组\nint * myFunction()\n{\n...\n}\n```\n<br>\n\n**二分搜索**\n&emsp;基本思想是：首先选取表中间位置的记录，将其关键字与给定关键字 key 进行比较，若相等，则査找成功；若 key 值比该关键字值大，则要找的元素一定在右子表中，则继续对右子表进行折半查找：若 key 值比该关键宇值小，则要找的元素一定在左子表中，继续对左子表进行折半査找。如此递推，直到査找成功或査找失败（或査找范围为 0）\n&emsp;二分搜索的时间复杂度为 ***对数时间O(logn)***\n```c\nint binary_search(int key, int a[], int n)\n{\n    int low = 0;\n    int high = n - 1;\n    int mid, count = 0, count1 = 0;\n\n    while(low < high) {\n        count++;\n        mid = (low + high) / 2;\n        if (key < a[mid]) {\n            high = mid - 1;\n        } else if (key > a[mid]) {\n            low = mid + 1;\n        } else if (key == a[mid]) {\n            count1++;\n            break;\n        }\n    }\n\n    if (count1 == 0) {\n        return 1;\n    }\n\n    return 0;\n}\n```\n\n#### 2.1.2 单链表\n&emsp; 单链表元素之间有一个单独的指针链接。这种结构的链表可以使得从第一个元素遍历到最后一个元素\n```c\ntypedef struct ListElmt_ {\n    void *data;  // 数据成员\n    struct ListElmt_ * next; // next指针\n} ListElmt;\n\ntypedef struct List_ {\n    int size;\n    int (*match)(const void *key1, const void *key2);\n    void (*destroy)(void *data);\n    ListElmt *head;\n    ListElmt *tail;\n} List;\n```\n&emsp;单链表操作：插入、删除、\n#### 2.1.3 双链表\n&emsp; 双向链表的元素通过两个指针链接。双向链表可以正向遍历，也可反向遍历。\n```c\ntypedef struct DListElmt_ {\n    void *data;\n    struct DListElmt_ *prev;\n    struct DListElmt_ *next;\n} DListElmt;\n\ntypedef struct DList_ {\n    int size;\n    int (*match)(const void *key1, const void *key2);\n    void (*destroy)(void *data);\n    DListElmt *head;\n    DListElmt *tail;\n} DList;\n```\n\n#### 2.1.4 跳表\n&emsp;跳表对标的是平衡树(AVL Tree), 插入/删除/搜索都是 O(logn)的数据结构。\n\n#### 2.1.5 栈\n&emsp;栈按照后进先出(LIFO)的顺序存储和检索数据的数据结构，检索元素的顺序和存储元素顺序相反。\n&emsp;可通过链表来实现栈stack,允许插入和删除的为栈顶(`top`),另一端为栈底(`bottom`),栈中每个元素为`frame`,栈只支持三个操作:`pop`,`top`,`push`.\n```c\ntypedef List Stack;\n\n#define stack_init list_init;\nint stack_push(Stack *stack, const void *data);\nint stack_pop(Stack *stack, void **data);\n#define stack_peek(stack) ((stack)->head == NULL ? NULL : (stack)->head->data);\n#define stack_size list_size;\n```\n&emsp;c语言顺序栈\n```c\n// 元素elem进栈\nint push(char *a, int top, char elem) {\n    a[++top] = elem;\n    return top;\n}\n// 数据元素出栈\nint pop(char *a, int top)\n{\n    if (top == -1) {\n        return -1;\n    }\n\n    top--;\n    return top;\n}\n```\n\n&emsp;链栈\n```c\ntypedef struct lineStack {\n    char data;\n    struct lineStack *next;\n}lineStack;\nlineStack* push(lineStack * stack,char a){\n    lineStack * line=(lineStack*)malloc(sizeof(lineStack));\n    line->data=a;\n    line->next=stack;\n    stack=line;\n    return stack;\n}\nlineStack * pop(lineStack * stack){\n    if (stack) {\n        lineStack * p=stack;\n        stack=stack->next;\n        printf(\"弹栈元素：%c \",p->data);\n        if (stack) {\n            printf(\"栈顶元素：%c\\n\",stack->data);\n        }else{\n            printf(\"栈已空\\n\");\n        }\n        free(p);\n    }else{\n        printf(\"栈内没有元素\");\n        return stack;\n    }\n    return stack;\n}\n```\n\n#### 2.1.6 队列\n&emsp;队列，在前端(`front`)进行删除操作，后端(`rear`)进行插入操作; 按照先进先出(`FIFO`)的顺序存储和检索数据的高效数据结构，按照元素的存储顺序检索元素。\n&emsp;队列也可通过数组和链表实现。\n```c\ntypedef List Queue;\n\n#define queue_init list_init;\n#define queue_destroy list_destroy;\nint queue_enqueue(Queue *queue, const void *data);\nint queue_dequeue(Queue *queue, void **data);\n#define queue_peek(queue) ((queue)->head == NULL ? NULL : (queue)->head->data);\n#define queue_size list_size;\n```\n\n&ensp;队列应用：进程通信\n&emsp;消息队列提供了从一个进程向另一个进程发送一个数据块的方法.每个数据库都认为含有一个类型,接收进程可以独立地接收含有不同类型的数据结构.\n\n&emsp;linux内核 <sys/msg.h> 头文件中定义了消息队列结构\n```c\nstruct msqid_ds {\n    struct ipc_perm msg_perm;\n    struct msg* msg_first; // 指向队列中第一个消息\n    struct msg* msg_last; // 队列中最后一个消息\n    ...\n}\n```\n&emsp;Linux消息队列函数接口\n```c\n// 创建和访问一个消息队列\nint msgget(key_t key, int msgflg);\n// 把消息添加到消息队列中\nint msgsnd(int msgid, const void *msg_ptr, size_t msg_sz, int msgflg);\n// 从一个消息对立获取消息\nmsgrcv(int msgid, void *msg_ptr, size_t msg_st, long int msgtype, int msgflg);\n// 控制消息队列\nint msgctl(int msgid, int command, struct msgid_ds *buf);\n```\n\n#### 2.1.7 leetcode题目\n- 重复N次的元素<数组>\n\n- 两数相加<链表>\n\n- 基本计算器<栈>\n\n- 设计循环队列<队列>\n\n### 2.2 哈希表\n&ensp;哈希表是一种最有效的检索方法，散列，从本质上看，一个哈希表包含一个数组，通过特殊的索引（键）来访问数组中的元素。哈希表主要思想是通过一个哈希函数，在所有可能的键和值直接建立映射表。\n&ensp;每个记录的关键字k通过一种函数H(k)计算出函数值.此函数为哈希函数或散列函数.\n\n#### 2.2.1 哈希函数设计\n- 直接地址法\n关键字是整数类型的数据,直接地址的哈希函数H直接利用关键字求得哈希地址.\nH(k) = aK*i + b\n\n- 数字分析法\n取关键字数中分布均匀的若干作为哈希地址\n\n- 平方取中法\n取关键字平方中间几位作为散列地址\n\n- 折叠法\n\n- 除留取余法\n关键字K除以一个合适的不大于哈希表长度的正整数P,所得余数作为哈希地址.\nH(K) = K MOD P\n\n#### 2.2.2 哈希冲突\n&ensp;理想情况下,哈希函数在关键字和地址之间建立一对一关系.但H(k1) = H(k2),即为冲突.\n\n&emsp;解决哈希冲突常用方法:\n- 链地址法\n将哈希值相同的元素构成一个同义词的单链表,并将单链表头指针存放在哈希表的地i个单元中,查找,插入和删除主要在同义词链表中.\n\n#### 2.2.3 uthash\n\n&ensp;uthash的插入、查找、删除的操作时间都是常量\n\n```c\n\n#include \"uthash.h\"\n\nstruct my_struct {\n    int id;            /* we'll use this field as the key */\n    char name[10];\n    UT_hash_handle hh; /* makes this structure hashable */\n};\n\nstruct my_struct *users = NULL;\n\nvoid add_user(struct my_struct *s) {\n    HASH_ADD_INT(users, id, s );\n}\n\n```\n\n- 参考链接\n官网:https://troydhanson.github.io/uthash/\nhttps://blog.csdn.net/fan_h_l/article/details/107241520\nhttps://blog.csdn.net/whatday/article/details/95926766\nhttps://www.cnblogs.com/pam-sh/p/12827658.html\n\n#### 2.2.4 leetcode题目\n- 设计哈希集合 \n\n- 设计哈希映射\n\n- 根据字符出现频率排序\n\n### 2.3 树与二叉树\n&emsp;树(tree)是一种用来模拟树状结构的抽象数据结构(ADT);\n\n&emsp;树的特点:\n- 没有父节点的节点称为根节点\n- 每个非根节点有且只有一个父节点\n- 除了根结点外,每个子节点可分为多个不相交的子树\n- 树中没有环路\n\n#### 2.3.1 概述\n- 节点的度: 一个节点含有子树的个数\n- 树的度: 树中最大的节点度\n- 叶节点: 度为零的节点\n- 父节点\n- 子节点\n- 兄弟节点\n- 节点的层次\n- 深度: 任意节点n,n的深度为从n到一片树叶的最长路径长,根的深度为0\n- 高度: 对任意节点n,n的高度为从n到一片树叶的最长路径长,所有树叶的高度为0.\n- 森林\n\n&emsp;树由称为结点的元素按照层次结构的方式组织而成。最顶端称为根。与根直接相连的结点称为根的子结点。子节点本身也可以有子结点。除根结点外，每个结点都有唯一的父结点。\n\n#### 2.3.2 树的种类\n- 无序树\n- 有序树\n   - 二叉树: 每个节点最多含有两个子树的树.\n      - 完全二叉树: 对于一颗深度为d的二叉树,除第d层外,其他各层节点数目均达最大值,且第d层所有节点从左向右连续紧密排列.\n         - 满二叉树:所有叶节点都最底层的完全二叉树.\n      - 平衡二叉树(AVL):当且仅当任何节点的两颗子树的高度差不大于1的二叉树.\n      - 排序二叉树:二叉查找树\n\n    - 霍夫曼树:带权路径最短的二叉树(又称最优二叉树).\n    - B树:一种堆读写操作进行优化的自平衡二叉查找树,能够保持数据有序,拥有多余两个子树.\n\n<br>\n\n|||\n|---|---|\n|二叉树|二叉查找树(BST) 笛卡尔树 MVP树 Top tree T树|\n|自平衡二叉查找树|AVL树 红黑树 |\n|B树|B树 B+树|\n\n&emsp;树有多种结构形式，包括二叉树、。\n\n#### 2.3.3 二叉树\n\n&ensp;二叉树两个条件:\n- 本身是有序树\n- 树中包含的各个节点的度不能超过2,即只能是0,1或者2\n\n&emsp;二叉树中结点包含三部分：一个数据成员两个左右指针。\n\n```c\ntypedef struct BiTreeNode_ {\n    void *data;\n    struct BiTreeNode_ *left;\n    struct BiTreeNode_ *right;\n}BiTreeNode;\n\ntypedef struct BiTree_ {\n    int size;\n    int (*compare)(const void *key1, const void *key2);\n    void (*destroy)(void *data);\n    BiTreeNode *root;\n}BiTree;\n\n/*树根*/\ntypedef struct tree{\n\tNode * root;\n}Tree;\n```\n&ensp;二叉树性质:\n- 二叉树中,第i层最多有 2^(i-1)个节点\n- 如果二叉树的深度为K,则二叉树最多有`2^K - 1`个节点\n\n满二叉树\n\n完全二叉树\n\n\n&emsp;树的周游算法包含先序遍历、中序遍历、后序遍历和层序遍历。\n- 先序遍历：先访问根结点，然后左子树，最后右子结点。深度优先思想。\n- 中序遍历：先访问左子结点，然后根结点，最后右子结点。\n- 后序遍历：先访问左子结点，然后右子结点，最后根结点。\n- 层序遍历：先访问树的根结点，然后依次向下层处理，按照从左向右的顺序访问每层结点。广度优先的策略。\n\n\n#### 2.3.4 二叉查找树(BST)\n\n&ensp;二叉查找树也称二叉搜索树,有序二叉树或排序二叉树,具有性质:\n- 若任意节点左子树不为空,则左子树上所有节点的值均小于它的根节点的值\n- 若任意节点的右子树不为空,则右子树所有节点的值均大于根节点的值\n- 任意节点的左,右子树也分别为二叉查找树\n- 没有键值相等的节点\n\n\n&emsp;一颗二叉搜索树要插入一个结点，要从根结点开始，一层一层往下，适当地移动左或右子结点上，当到达树的分支尽头时，执行插入操作。\n&emsp;二叉搜索树是一种用于查找操作的高效数据结构，在最坏情况下，只需查找一个分支上的数据即可。**查找,插入**操作的复杂度是 `O(lgn)`，**搜索,插入,删除**复杂度等于树高,期望`O(logn)`,最坏为`O(n)`,(树退化为线性表)n为树中结点数。\n&emsp;保持一棵树的平衡是指对于给定数量的结点，要使得树的高度尽可能短。\n\n\n&emsp;二叉查找树是由二叉树组成的专用于查找和搜索目的的一种数据结构。二叉搜索树中查找一个结点，从根结点开始一层一层向下查找，当遇到一个比目标结点值大的结点时，顺着该结点左子树继续查找，如果遇到的结点值小于目标结点，则顺着该结点的右子树查找，直到找到目标结点为止。\n\n&ensp;**查找算法**\n&emsp;&emsp;1.若b是空树,则搜索失败,否则;\n&emsp;&emsp;2.若x等于b的根节点的数据域之值,则查找成功;\n&emsp;&emsp;3.若x小于b的根节点的数据域之值,则搜索左子树\n&emsp;&emsp;4.查找右子树\n\n&ensp;**插入算法**\n&emsp;&emsp;1.若b是空树,则将s所指节点作为根节点插入;否则\n&emsp;&emsp;2.若`s->data`等于b的根节点的数据域值,则返回,否则;\n&emsp;&emsp;3.若`s->data`小于b的根节点的数据域之值,则把s所值节点插入到左子树中,否则\n&emsp;&emsp;4.把s所指节点插入到右子树中,(新插入节点总是叶子节点)\n\n&ensp;**删除算法**\n&emsp;&emsp;1.若*p节点为叶子节点,即PL(左子树)和PR(右子树)均为空树.由于删去叶子节点不破坏整棵树的结构,则只需修改其双亲节点的指针即可.\n\n#### 2.3.5 平衡树\n\n&ensp;平衡树是一类改进的二叉查找树,一般二叉查找树的查询复杂度与目标节点到树根的距离(深度)有关,因此当深度较大时,查询均摊复杂度会上升.\n&ensp;**平衡指所有叶子的深度趋于平衡**,更广义指树上所有可能查找的均摊复杂度偏低.**平衡树的操作时基于树旋转操作,通过旋转可使树趋于平衡**.\n&ensp;对一颗查找树进行查询,新增,删除等操作,所花的时间与树的高度h成比例,并不与树的容量n成比例.\n\n- **AVL树**\n\n&emsp;在**AVL树中,任一节点对于的两颗子树的最大高度差为1,因此也称为高度平衡树**.查找,插入和删除的平均和最坏时间复杂度是O(logn),增加和删除元素的操作则可能需要借由一层或多次旋转,以实现树的重新平衡.\n&emsp;**高度为h的AVL树,总节点数最多为2^h-1**; 当前节点数为N时,高度h最多为:\n> log(5*0.5 * (N + 1)) - 2\n\n<br>\n\n- **红黑树**\n\n&ensp;红黑树是一种自平衡二叉查找树,典型的用途是实现关联数组.红黑树实现复制,查找,插入和删除时间复杂度为O(logn)\n&ensp;红黑树相对于AVL树,牺牲了部分平衡性以换取插入\\删除操作时少量的旋转操作,整体性能优于AVL树.\n\n&emsp;红黑树与AVL树的相比:\n&emsp;&emsp;AVL树在插入,删除节点时要把树调整到完全平衡,红黑树只要调整到大致平衡,因此通常红黑树的插入,删除节点性能稍好.\n&emsp;&emsp;AVL的查找性能通常比红黑树好\n&emsp;&emsp;如果节点的增删操作远小于查找操作,则应选择AVL;反之,红黑树可能更好.\n\n&ensp;红黑树是每个节点都带有颜色属性的二叉树,颜色为红色或黑色.在二叉查找树强制一般要求以外,对于任何有效的红黑树我们怎讲了弱小额外要求:\n&emsp;&emsp;1.节点是红或黑色\n&emsp;&emsp;2.根是黑色\n&emsp;&emsp;3.所有叶子都是黑色(叶子是NIL节点)\n&emsp;&emsp;4.每个红色节点必须右两个黑色的子节点.(从每个叶子到根的所有路径上不能右两个连续的红色节点.)\n&emsp;&emsp;5.从任一节点到其每个叶子的所有简单路径都包含相同苏后面的黑色节点.\n&ensp;红黑树关键特性:**从根到叶子的最长的可能路径不多于最短的可能路径的两倍长**.红黑树是大致平衡的.插入,删除和查找某个值最坏情况下与树的高度成比例.\n\n- **B+树**\n&ensp;B+树通常用于数据库和操作系统的文件系统中.**B+树的特点是能够保持数据稳定有序,其插入与修改拥有较文档的对数时间复杂度**.B+树元素自底向上插入,与二叉树相反.\n&ensp;B+树是内部节点可右在预定范围内的可变量目的子节点.因此,B+树不需要像其他自平衡二叉查找树那样重新平衡.\n\n#### 2.3.6 堆树和优先队列\n\n&ensp;堆(heap)也称为优先队列,堆遵守队列操作模式,在堆底插入元素,在堆顶取出元素,但堆中元素的排列不是按照到来的先后顺序,而是按照一定的有序顺序排列的.\n&ensp;堆的本质是一个完全二叉树,可使用二叉树表示堆,也可使用数组来表示.\n&ensp;堆的特性:\n&emsp;&emsp;必须是完全二叉树\n&emsp;&emsp;用数组实现\n&emsp;&emsp;任一节点的值是其子树所有节点的最大值或最小值\n&emsp;&emsp;&emsp;最大值时,称为最大堆,也称大顶堆\n&emsp;&emsp;&emsp;最小时,称为最小堆,也称小顶堆.\n&emsp;**堆不能保证整棵树都是有序的,堆中的插入和删除操作时时间复杂度为O(log2n)**\n\n\n&emsp;堆是一颗二叉树，通常其子结点存储的值比父结点的值小，所以，根结点为树中最大的结点(大顶堆)。同样，根结点也可以是树中最小的结点(小顶堆)。能够快速确定包含最大(小)值的特点。\n&emsp;堆时左平衡的树，随着结点增加，树会逐级从左至右增长。一个较好地表示左平衡二叉树的方式是，将结点通过层序遍历方式连续存储到一个数组中。\n\n```c\ntypedef struct Heap_ {\n    int size;\n    int (*compare)(const void *key1, const void *key2);\n    void (*destroy)(void *data);\n    void **tree;\n}\n```\n\n\n\n&emsp;堆排序，要排序的数据首先存储在一个堆中。从堆中一次取出一个结点。放置到有序数据集的尾部。当取出每个结点时，它的下一个结点就会浮现到堆的顶部。\n\n\n&emsp;优先队列是从堆衍生的数据结构。在优先队列中，数据保存在一个堆中，可快速确定下一个最高优先级的结点。\n\n&emsp;优先队列将数据按照优先级顺序排列。一个优先队列由许多有序元素构成，所以优先级最高的元素可以有效而快速的确定。\n\n```c\ntypedef Heap PQueue;\n```\n\n\n#### 2.3.7 leetcode题目\n\n- 先序遍历构造二叉树\n- 从中序与后序遍历构造二叉树\n- 二叉树的层次遍历\n- 从二叉搜索树到更大和树\n- 二叉搜索树的最近公共祖先\n- 前K个高频单词<堆>\n\n### 2.4 图\n\n&ensp;图(Graph)是由顶点的有穷非空集合和顶点之间的边的集合组成,通常表示为:`G(V,E)`.其中,G表示一个图,V是入G中顶点的集合,E是图G中的集合.\n\n&emsp;图是一种灵活的数据结构，用来定义对象之间关联或联系的模型。对象由顶点表示，而对象直接的关系或关联则通过顶点之间的边来表示。\n&emsp;图的访问方式：广度优先和深度优先。\n\n#### 2.4.1 基础知识\n&emsp;图由两种类型的元素组成：顶点和边，顶点代表对象，边则建立起对象之间的关系或关联。图的边可关联值或权重信息。\n&emsp;图分为有向图和无向图。有向图，边是由两个顶点组成的有序对，具有特定的方向。边也可称为弧。无向图中，边是没有方向的。\n\n&ensp;图可分为连通图和非连通图\n\n#### 2.4.2 图表示\n&emsp;图的表示方法是G=(V, E)，V代表顶点的集合，而E和V之间是二元关系。\n&emsp;图中由两个重要关系邻接(adjacency)和关联(incidence)。邻接是两个顶点之间的关系。关联是顶点和边之间的关系。\n邻接矩阵表示\n邻接链表表示\n\n```c\ntypedef struct AdjList_ {\n    void *vertex;\n    Set adjacent;\n}AdjList;\n\ntypedef struct Graph_ {\n    int vcount;\n    int ecount;\n    int (*match)(const void *key1, const void *key2);\n    List adjlists;\n}\n```\n\n#### 2.4.3 图遍历\n&ensp;图的搜索方法：深度优先搜索和广度优先搜索。\n&emsp;深度优先遍历(DFS)\n&emsp;思路: 从图中某点v出发:\n&emsp;&emsp;&emsp;1.访问顶点v\n&emsp;&emsp;&emsp;2.从v的未被访问的邻接点中选取一个顶点w,从w出发进行深度优先遍历.\n&emsp;&emsp;&emsp;3.重复上述两步,直到图中所有和v有路径相通的顶点都被访问.\n&emsp;伪代码: \n```c\n// \nvoid DFS(Vertex v) {\n    vistied[v] = true;\n    for (v 的每个邻接点 w) {\n        if (!visited[w]) {\n            DFS(w);\n        }\n    }\n}\n```\n\n&ensp;广度优先遍历(BFS)\n&emsp;思路: \n&emsp;&emsp;&emsp;1.顶点v入队列\n&emsp;&emsp;&emsp;2.当队列非空时则继续执行,否则算法结束.\n&emsp;&emsp;&emsp;3.出队列取得队头顶点v',访问顶点v 并标记顶点v已被访问.\n&emsp;&emsp;&emsp;4.查找顶点v的第一个邻接顶点col\n&emsp;&emsp;&emsp;5.若v的邻接顶点col未被访问过的,则col继续.\n&emsp;&emsp;&emsp;6.查找顶点v的另一个新的邻接顶点col,转到步骤5入队列,直到顶点v的所有未被访问过的邻接点处理完,转到步骤2.\n\n&ensp;深度优先搜索和广度优先搜索,时间复杂度都为O(n^2)\n\n深度优先:从初始点出发,不断向前走,如果碰到死路,就往回走一步,尝试另一条路,直到发现目标位置.\n广度优先:从初始点出发,把所有可能的路径都走一遍,如果里面没有目标位置,则尝试把所有两步能够到的位置都走一遍,看有没有目标位置.\n\n#### 2.4.4 最短路径\n**迪杰斯特拉Dijkstra算法**\n&ensp;Dijkstra算法适用于权值为正的图.\n&ensp;Dijkstra算法属于单源算法,即只能求出某点到其它点最短距离,并不能得出任意两点之间的最短距离.\n&ensp;在源点可达的情况下,Dijkstra算法的时间复杂度时 `O(ElogV)`\n&ensp;算法步骤:\n&emsp;&emsp;1.将所有边初始化为无穷大\n&emsp;&emsp;2.旋转一个开始的顶点,添加到优先队列中.\n&emsp;&emsp;3.对于该点的所有邻接顶点进行判断,如果到该点的距离小于原先的值,则该值进行更新.\n&emsp;&emsp;4.将该点所有邻接顶点添加到优先队列中.\n&emsp;&emsp;5.从优先队列中挑选除一个路径值最小的顶点,将其弹出,作为新的顶点,重复步骤3,4,5\n&emsp;&emsp;6.直到所有点都被处理过一次.\n\n**弗洛伊德Floyd算法**\n&ensp;Floyd算法是一个经典的动态规划算法.首先目标是寻找从点`i`到`j`的最短路径.\n&ensp;**Floyd算法可以求出任意两点的最短距离.时间复杂度:**`O(你^3)`\n&ensp;从任意节点i到任意节点j的最短路径不外乎2种可能:\n&emsp;&emsp;1.是之间从i到j\n&emsp;&emsp;2是从i到经过若干个节点k到j\n\n```c\nfor (int k = 0; k < n; k++) {\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (A[i][j] > (A[i][k] + A[k][j])) {\n                A[i][j] = A[i][k] + A[k][j];\n                path[i][j] = k;\n            }\n        }\n    }\n}\n```\n\n\n#### 2.4.5 拓扑排序\n&ensp;拓扑排序是一个有向无环图(DAG)的所有顶点的线性序列.且该序列必须满足下面两个条件:\n- 每个顶点出现且只出现一次\n- 若存在一条顶点A到顶点B的路径,那么在序列中顶点A出现在顶点B的前面.\n\n\n#### 2.4.6 leetcode题目\n- 判断二分图\n- 克隆图\n- 找到小镇的法官\n- 钥匙和房间\n- 最短路径访问所有节点\n\n\n## 3 常见算法\n\n### 3.1 分治法\n&emsp;把复杂问题分成两个或者更多相同或相似的子问题，再把子问题分成更小的子问题...，直到可以直接求解，原问题的解为子问题解的合并。\n&emsp;分治法应用：排序算法(快速排序、归并排序);傅里叶变换()。\n#### 3.1.1 概述\n&ensp;分治法思想:将一个难以直接解决的大问题,分割成一些规模小的相同问题,分而治之.\n#### 3.1.2 策略\n&ensp;分治策略:对于一个规模为n的问题,若该问题可以容易解决则直接解决,否则将其分解为k个规模较小的子问题,子问题之间相互独立且与原问题形式相同,可递归求解.分治通常用递归实现.\n#### 3.1.3 应用场景\n&ensp;分治法特征:\n- 问题缩小到一定程度可容易解决.\n- 问题可分解为若干个规模较小的相同问题,即问题具有最优子结构性质.\n- 子问题的解可合并为该问题的解.\n- 问题分解的子问题相互独立,子问题之间不包含公告子问题.\n\n#### 3.1.4 步骤\n&ensp;分治法一层递归步骤:\n- 1) **分解**:将原问题分解为若干规模较小,相互独立,与原问题形式相同的子问题.\n- 2) **解决**:若子问题可直接求解,则直接求解,否则递归解各个子问题.\n- 3) **合并**:将各个子问题的解合并为原问题的解.\n\n&ensp;\n\n```c\n\n\n```\n<br>\n\n#### 3.1.5 应用\n> 分治思维方式：二分搜索;大整数乘法;合并排序;快速排序。\n\n&ensp;求x的n次幂\n&emsp;对数复杂度O(logn)\n```c\nint power(int x, int n)\n{\n    int result;\n    if (n == 1) {\n        return x;\n    }\n    if (n % 2 == 0) {\n        result = power(x, n/2) * power(x, n / 2);\n    } else {\n        result = power(x, (n + 1) / 2) * power(x, (n - 1) / 2);\n    }\n    return result;\n}\n```\n\n#### 3.1.6 leetcode题目\n- 搜索二维矩阵II\n- 求众数\n- 合并k个排序链表\n\n\n## 3.2 排序算法\n&emsp;各种排序算法，主要包括：插入排序、快速排序、归并排序、计数排序和技术排序。二分查找，\n\n### 3.2.1 冒泡排序\n**冒泡排序算法复杂度是O(n^2)**\n```c\nstatic void bubleSort(int[] arr)\n{\n    int size = arr.length;\n    // \n    for (int out = size - 1; out > 0; out--) {\n        // \n        for (int in = 0; in < out; in++) {\n            if (arr[in] > arr[in + 1]) {\n                swap(arr, in, in + 1);\n            }\n        }\n    }\n}\n```\n### 3.2.2 选择排序\n&emsp;选择排序算法时间复杂度为O(n^2)\n\n```c\nstatic void selectSort(int[] arr)\n{\n    int size = arr.lenght;\n    //\n    for (int out = 0; out < size; out++) {\n        int mixIndex = out;\n        //\n        for (int in = out - 1; in < size; in++) {\n            if (arr[mixIndex] > arr[in]) {\n                mixIndex = in;\n            }\n        }\n\n        if (mixIndex != out) {\n            swap(arr, mixIndex, out);\n        }\n    }\n}\n```\n\n### 3.2.3 插入排序\n&emsp;插入排序每次从无序数据集合中取出一个元素，插入到已经排好序的数据集中适当位置，使数据集仍然有序。插入排序不需要额外空间。时间复杂度O(n2)\n\n```c\nstatic void insertSort(int[] arr)\n{\n    int size = arr.lenght;\n    // \n    for (int out = 1; out < size; out++) {\n        //\n        int temp = arr[out];\n        int in = out;\n        //\n        // \n        while (in - 1 >= 0 && arr[in - 1] > temp) {\n            arr[in] = arr[in - 1];\n            in--;\n        }\n        if (in != out) {\n            arr[in] = temp;\n        }\n    }\n}\n```\n\n```c\nint issort(void *data, int size, int esize, int (*compare)(const void *key1, const void *key2))\n{\n    char *a = data;\n    void *key;\n    int i, j;\n\n    if ((key = (char *)malloc(esize)) == NULL) {\n        return -1;\n    }\n\n    for (j = 1; j < size; j++) {\n        i = j - 1;\n\n        while (i >= 0 && compare(&a[i * esize], key) > 0) {\n            mamcpy(&a[(i + 1) * esize], &a[i * esize], esize);\n            i--;\n        }\n        memcpy(&a[(i + 1) * esize], key, esize);\n    }\n\n    free(key);\n\n    return 0;\n}\n\n```\n### 3.2.4 希尔排序\n&ensp;希尔排序时间复杂度O(n*(logn)^2)\n```c\nstatic void shellSort(int[] arr)\n{\n    int size = arr.lenght;\n    int h = 1;\n    while (h <= size / 3) {\n        //\n        h = h * 3 + 1;\n    }\n    while (h > 0) {\n        for (int out = h; out < size; out++) {\n            int temp = arr[out];\n            int in = out;\n            //\n            while (in - h >= 0 && arr[in - h] > temp) {\n                arr[in] = arr[in - h];\n                in = in - h;\n            }\n            if (in != out) {\n                arr[in] = temp;\n            }\n        }\n        h = (h - 1) / 3;\n    }\n}\n```\n### 3.2.5 归并排序\n&emsp;归并排序是一种分支排序算法。归并排序需要额外存储空间来完成排序。\n```c\nint min(int x, int y)\n{\n    return  x < y ? x : y;\n}\nvoid merge_sort(int arr[], int len)\n{\n    int *a = arr;\n    int *b = (int *)malloc(len * sizeof(int));\n    int seg, start;\n    for (seg = 1; seg < len; seg += seg) {\n        for (start )\n    }\n}\n\n```\n### 3.2.6 快速排序\n&emsp;快速排序是一种分治排序算法。不需要额外存储空间，时间复杂度O(nlgn)\n\n&emsp;快速排序三个步骤：\n- 分：设定一个分割值并将数据分为两部分。\n- 治：分别在两部分使用递归方式继续使用快速排序方法。\n- 和：对分割部分排序直至完成。\n\n```c\ntypedef struct _Range {\n    int start;\n    int end;\n} Range;\nRange now_Range(int s, int e)\n{\n    Range r;\n    r.start = s;\n    r.end = e;\n    return r;\n}\n\nvoid swap(int *x, int *y)\n{\n    int t = *x;\n    *x = *y;\n    *y = t;\n}\n\nvoid quick_sort(int arr[], const int len)\n{\n    if (len <= 0) {\n        return;\n    }\n    Range r[len];\n    int p = 0;\n    r[p++] = new_Range(0, len - 1);\n    while (p) {\n        Range range = r[--p];\n        if (range.start >= range.end) {\n            continue;\n        }\n        int mid = arr[(range.start + range.end) / 2];\n        int left = range.start;\n        int right = range.end;\n        do {\n            while (arr[left] < mid) {\n                ++left;\n            }\n            while (arr[right] > mid) {\n                --right;\n            }\n            if (left <= right) {\n                swap(&arr[left], &arr[right]);\n                left++;\n                right--;\n            }\n        } while (left <= right);\n        if (range.start < right) {\n            r[p++] = new_Range(range.start, right);\n        }\n        if (range.end > left) {\n            r[p++] = new_Range(left, range.end);\n        }\n    }\n}\n\n```\n\n\n```c\nvoid QuickSort(int *arr, int low, int high)\n{\n    if (low < high) {\n        int i = low;\n        int j = high;\n        int k = arr[low];\n        while (i < j) {\n            // 从右向左找第一个小于k的数\n            while (i < j && arr[j] >= k) {\n                j--;\n            }\n\n            if (i < j) {\n                arr[i++] = arr[j];\n            }\n            // 从左向右找第一个大于等于k的数\n            while (i < j && arr[i] < k) {\n                i++;\n            }\n\n            if (i < j) {\n                arr[j--] = arr[i];\n            }\n        }\n        arr[i] = k;\n\n        // 递归调用\n        QuickSort(arr, low, i - 1); // 排序k左边\n        QuickSort(arr, i + 1, high); // 排序k右边\n    }\n}\n\nvoid quick_sort( int *a, int n)\n{\n    int i, j, p, tmp;\n    if (n < 2)  return;\n\n    p = a[n / 2];   // Get the middle element as pivot ..\n\n    for ( i = 0, j = n -1;; i++, j--) {\n        while (a[i] < p)\n            i++;\n        while (p < a[j])\n            j--;\n        if ( i >= j)\n            break;\n        tmp = a[i]; a[i] = a[j]; a[j] = tmp;    //swap both ..\n    }   \n\n    quick_sort( a, i); \n    quick_sort( a + i, n - i); \n}\n\n```\n**qsort/sort函数**\n&ensp;在c语言库函数中已经实现了qsort函数,\n&emsp;qsort函数用法:\n```c\nvoid qsort(void *base, int nelem, int width, int (*fcmp)(const void *, const void *));\n// 参数:1 带排序数组首地址, nelem 数组中待排元素数量  width 各元素所在空间大小  *fcmp 指向函数的指针\n```\n\n```c\n// int 数组\nint cmp(const void *a, const void *b)\n{\n    return (*(int *)a - *(int *)b);\n}\nqsort(arr, n, sizeof(arr[0]), cmp);\n\n// char 数组\nint com(const void *a, const void *b)\n{\n    return *(char *)a - *(char *)b;\n}\nchar word[100];\nqsort(word, 100, sizeof(word[0]), cmp);\n\n// double 类型\nint cmp(const void *a, const void *b)\n{\n    return *(double *)a > *(double*)b ? 1 : -1;\n}\ndouble in[100];\nqsort(in, 100, sizeof(in[00]), cmp);\n\n// struct 结构体\nstruct Sample {\n    double data;\n    int num;\n}st[100];\n\nint cmp(const void *a, const void *b)\n{\n    return (*(Sample *)a).data > (*(Sampel *)b).data ? 1 : -1;\n}\nqsort(s, 100, sizeof(s[0]), cmp);\n// \nint cmp(const void *a, const void *b)\n{\n    struct Sample *c = (Sample *)a;\n    struct Sample *d = (Sample *)b;\n    if(c->x != d->x) {\n        return c->x - d->x;\n    } else {\n        return d->y - c->y;\n    }\n}\n\nqsort(s,100,sizeof(s[0]),cmp);\n\ntruct Sample\n{\n    int data;\n    char str[100];\n}s[100];\n\n//按照结构体中字符串str的字典顺序排序\n\nint cmp (const void *a, const void *b)\n{\n    return strcmp((*(Sample *)a)->str , (*(Sample *)b)->str);\n}\n\nqsort(s,100,sizeof(s[0]),cmp);\n```\n### 3.2.7 堆排序\n&emsp;桶排序算法基本原理：把数组中的所有元素分为若干个数据块，也就是若干个桶，然后对每个桶里的数据进行排序，最后将所有桶里的数据依次排列。\n&emsp;存在两个问题：\n&emsp;(1)怎样划分数据块，也就是分几个桶，每个桶放哪几个数据。\n&emsp;(2)对每个数据块里的数据怎样排序。\n```c\n#include<sdtio.h>\n#include<stdlib.h>\n\ntypedef struct node {\n    int key;\n    struct node *next;\n} KeyNode;\n\nvoid bucket_sort(int keys[], int size, int bucket_size) {\n    int i, j;\n    KeyNode **bucket_table = (KeyNode **)mallov(bucket_size * sizeof(KeyNode*));\n    for(i = 0;i < bucket_size;i++) {\n        bucket_table[i] = (KeyNode*)malloc(sizeof(KeyNode));\n        bucket_table[i]->key = 0;\n        bucket_table[i]->next = NULL;\n\t}\n\tfor(j = 0;j < size;j++) {\n\t\tKeyNode *node = (KeyNode *)malloc(sizeof(KeyNode));\n\t\tnode->key = keys[j];\n\t\tnode->next = NULL;\n\t\tint index = keys[j]/10;\n\t\tKeyNode *p = bucket_table[index];\n\t\tif(p->key == 0) {\n\t\t\tbucket_table[index]->next = node;\n\t\t\t(bucket_table[index]->key)++;\n\t\t}else {\n\t\t\twhile(p->next != NULL && p->next->key <= node->key)\n\t\t\t\tp = p->next;\n\t\t\tnode->next = p->next;\n\t\t\tp->next = node;\n\t\t\t(bucket_table[index]->key)++;\n\t\t}\n\t}\n\t//print result\n\tKeyNode * k = NULL;\n\tfor(i = 0;i < bucket_size;i++)\n\t\tfor(k = bucket_table[i]->next;k!=NULL;k=k->next)\n\t\t\tprintf(\"%d \",k->key);\n\tprintf(\"\\n\");\n}\n\nint main()\n{\n\tint raw[] = {49,38,65,97,76,13,27,49};\n\tint size = sizeof(raw)/sizeof(int);\n\tbucket_sort(raw,size,10);\n}\n```\n\n```c\nvoid Heapify(int A[], int i, int size)\n{\n    int lef_child = 2 * i + 1;\n    int right_child = 2 * i + 2;\n    int max = i;\n    if (lef_child < size && A[lef_child] > A[max]) {\n        max = lef_child;\n    }\n    if (right_child < size && A[right_child] > A[max]) {\n        max = right_child;\n    }\n    if (max != i) {\n        Swap(A, i max);\n        Heapify(A, max, size);\n    }\n}\n\nint BuildHeap(int A[], int n)\n{\n    int heap_size = n;\n    for (int i = heap_size / w - 1; i >= 0; i--) {\n        Heapify(A, i, heap_size);\n        return heap_size;\n    }\n}\n\nvoid HeapSort(int A[], int n)\n{\n    int heap_size = BuildHeap(A, n);\n    while (heap_size > 1) {\n        Swap(A, 0, heap_size);\n        Heap(A, 0, heap_size);\n    }\n}\n```\n\n### 3.2.8 leetcode排序\n\n\n\n## 3.3 贪心算法\n\n### 3.3.1 基本概念\n&ensp;贪心算法:在对问题求解时,总是做出在当前是最好的选择,即不考虑整体最优,仅考虑局部最优解.\n&ensp;贪心算法没有固定算法框架,算法关键是贪心策略的选择.他想算法不是所有问题都得到最优解,选择贪心策略必须具备无后效性,即某个状态以后的过程不会影响一起的状态,只与当前状态有关.\n### 3.3.2 描述\n&ensp;贪心算法实现步骤:\n&emsp;1.建立数学模型描述问题\n&emsp;2.把求解的问题分成若干个子问题\n&emsp;3.对每个子问题求解,得到子问题的局部最优解\n&emsp;4.把子问题的解局部最优解合成原来问题的一个解.\n&ensp;实现算法过程:\n```c\nwhile (能朝给定总目标前进一步)\n{\n    利用可行的决策,求出可行解的一个解元素;\n}\n由所有解元素组合成问题的一个可行解\n```\n### 3.3.3. 应用\n\n**最小生成树算法**\n&ensp;贪心算法经典实践:最小生成树算法\n&emsp;设`G=(V, E)`是无向连通带权图,即一个网络,E中的每一条边`(v,w)` 的全为 `c[v][w]`.如果G的字体 G' 是一颗包含 G 的所有顶点的数,则称 G' 为 G 的生成树.生成树上各边权的总和称为生成树的耗费.在 G 的所有生成树中,耗费最小的生成树称为 G 的最小生成树.\n&ensp;最小伸出手的性质:\n&emsp;&emsp;设`G=(V, E)`是连通带权图, U是V的真子集.如果(u,v)属于E,且u属于E,v属于V-U,且在所有这样的边中,(u,v)的权c[u][v]最小,那么一定存在G的一颗最小生成树,它亦是(u,v)为其中一条边,这个性质有时也称为MST性质.\n\n\n**Prim算法**\n&emsp;&emsp;设`G=(V, E)`是连通带权图, V={1,2,...,n}.构造G的最小生成树Prim算法的基本思想是:**首先置S={1},然后,只有S是V的真子集,就进行如下的贪心选择:选取满足添加i属于S,j属于V-S,且c[i][j]最小的边,将顶点j添加到S中.这个过程一直进行到S=V时为止.在这个过程中选取到的所有边恰好构成G的一颗最小生成树.\n\n### 3.3.4 leetcode题目\n- 柠檬水找零\n- 分发饼干\n\n## 3.4 动态规划\n&ensp;动态规划(`DP`):是一种通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法.常用于重叠子问题和最优子结构性质的问题,动态规划时间通常远小于朴素解法.\n### 3.4.1 基本概念\n&ensp;动态规划:要解一个给定问题,需要解其不同部分(即子问题),再根据子问题的解以得出原问题的解.通常子问题非常相似,子问题解算出后,将其记录.\n&ensp;动态规划过程是:每次决策依赖于当前状态,又随即引起状态转移.一个决策序列就是在变化的状态中产生除留的,这种多阶段最优化决策解决过程称为动态规划.\n&ensp;动态规划与分治法的区别是子问题通常不是独立的.\n\n### 3.4.2 描述算法\n&ensp;可采用动态规划的问题3个性质:\n&emsp;1) **最优化原理**:如果问题的最优解所包含的子问题的解也是最优的,则称该问题具有最优子结构,即满足最优化原理.\n&emsp;2) **无后效性**:即某阶段状态确定后,就不受之后的决策影响,即某状态以后过程不影响以前的状态,只与当前状态有关.\n&emsp;3) **有重叠子问题**:\n\n<br>\n&ensp;动态规划所处理的问题是一个多阶段决策问题,由初始状态开始,通过中间阶段决策的选择,达到结束状态.形成一个决策序列.\n\n&ensp;动态规划求解三要素:\n> (1) 问题的节点\n> (2) 每个阶段的状态\n> (3) 从前一个阶段转化到后一个阶段之间的递推关系\n\n&ensp;**最优决策表**\n> f(n, m) = max{f(n-1, m), f(n-1, m-w[n]) + P(n, m)}\n\n### 3.4.3 背包问题\n\n&ensp;问题描述:\n&emsp;有N件物品和一个体积为V的背包.(每种物品只有一件)第i件物品的体积是volume[i],价值是value[i],求解哪些物品装入背包可使这些物品的体积综合不超过背包体积,且价值总和最大.\n&ensp;解题思路:\n&emsp;p[i][j]代表前i件物品组合在容量为j的背包的最优解.将前i件物品放入容量为v的背包中这个子问题,若只考虑第i件物品的策略(放或不放),那么可以转化为一个只牵扯前i-1物品的问题.如果不放第i件物品,那么问题就转化为\"前i-1件物品放入容量为v的背包中,价值为p[i-1][v];如果放第i件物品,那么问题就转化为\"前i-1物品放入剩下的容量为v-volume[i]的背包中\",此时能获得的最大价值就是p[i-1][j-volume]再加上通过放入第i件物品获得的价值value[i].\n\n\n&ensp;**状态转移方程:**\n> p[i][j] = max{p[i-1][j-vol] + value[i], p[i-1][j]}\n&ensp;伪代码描述:\n```c\nfor i = 1...N\n    for j = V...0\n        p[j] = max{p[j-volume[i]] + value[i], p[j]};\n```\n\n\n### 3.4.4 最长公共子序列\n&ensp;问题描述:\n&emsp;一个散列S,如果分别是两个或多个已知数列的子序列,且是所有匹配此条件序列中最长的,则S称为已知序列的最长公共子序列(LCS)\n&ensp;给定两个序列X,Y,求两个序列的最长公共子序列.\n&ensp;截图思路:\n&emsp;\n\n\n&ensp;伪代码:\n```c\nfunction LCSLength(X[1..m], Y[1..n])\n    C = array(0..m, 0..n)\n    for i := 0..m\n        C[i, 0] = 0;\n    for j := 0..n\n        C[0, j] = 0\n    for i := 1..m\n        for j := 1..n\n            if X[i] = Y[j]\n                C[i, j] := C[i-1, j-1] + 1\n            else\n                C[i, j] := max(C[i, j-1], C[i-1,j])\n    \n    return C[m, n]\n```\n\n### 3.4.5 leetcode题目\n\n- 最大子序和\n- 编辑距离\n- 大礼包\n- 最长上升子序列\n\n\n## 3.5 回溯法\n\n\n### 3.5.1 基本概念\n\n### 3.5.2 八皇后问题\n\n\n\n### 3.5.3 leetcode题目\n\n\n## 4 参考链接\n\n- 复杂度速查表\nhttps://liam.page/2016/06/20/big-O-cheat-sheet/\n- 线性表\nhttps://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E8%A1%A8\n    - 单链表\nhttps://www.jianshu.com/p/73f0d8f807aa\n\n","source":"_posts/数据结构与算法基础.md","raw":"---\ntitle: 数据结构与算法基础\ndate: 2021-10-27 00:47:53\nupdated: 2021-10-27 00:53:53\npassword: liuz0000\nabstract: 这是一篇加密博文，请输入密码后查看\nmessage: 这里需要密码才能访问。\nwrong_pass_message: 抱歉, 这个密码看着不太对, 请再试试.\ncategories: \n    - tool\ntags: \n    - 实用教程\n    - Another Tag\n---\n\n## 1 程序性能\n\n<!--more-->\n\n&ensp;程序性能是指运行程序所需要的内存大小(空间复杂度)和时间(时间复杂度),运行时间和占用空间是算法性能最关键的指标。\n&ensp;软件程序性能衡量指标:\n&emsp;响应时间、启动时间、执行时间、执行速度、计算资源分配、内存分配、磁盘吞吐量、网络吞吐量、负载承受能力\n\n\n### 1.1 空间复杂度\n&ensp;空间复杂度(Space complexity)，算法完全运行所需存储空间。表示算法的存储空间与数据规模之间的增长关系：常量空间、线性空间、二维空间。\n&ensp;算法在计算机存储器上所占用的存储空间，包括**存储程序本身占用的存储空间，算法输入输出数据所占的存储空间和算法在运行过程中临时占用的存储空间**。\n\n\n### 1.2 时间复杂度\n&ensp;时间复杂度(Time complexity)，算法完全运行所需运算时间。时间复杂度通常用大O符合表示。\n\n![20211027233029](https://i.loli.net/2021/10/27/UxWCvnRQLYz5eiG.png)\n\n#### 1.2.1 常见算法大O\n&emsp; 常量阶O(1); 对数阶O(logn); 线性阶O(n); 线性对数阶O(nlogn); k次方阶O(n^k)\n![20211028010721](https://i.loli.net/2021/10/28/GWOFcUi3qdVIlmf.png)\n\n#### 1.2.2 常见数据结构\n\n### 本章参考：\n- 复杂度速查表\nhttps://liam.page/2016/06/20/big-O-cheat-sheet/\n\n## 2 基本数据结构\n\n基本数据结构:\n&emsp;字符,字符串:char,string\n&emsp;整型:short,int,long;unsigned\n&emsp;浮点型:float,double\n&emsp;结构体:struct\n&emsp;枚举:enum\n&emsp;联合体:union\n&ensp;自定义数据结构\n&emsp;线性表\n&emsp;&ensp;数组:array\n&emsp;&ensp;链表:数据域,指针域\n&emsp;&ensp;队列\n&emsp;&ensp;栈\n&emsp;&ensp;堆 \n&emsp;\n\n### 2.1 线性表\n&ensp;线性表是n个具有相同特性的数据元素的有序序列。线性表除第一个和最后一个数据元素之外，其他数据元素都是首尾相接的。\n&ensp;数据在实际的物理存储中有两种形式：分散存储和集中存储,常见数据结构有栈、队列、字符串、链表等。\n&ensp;两种情况下数据的存储问题：\n&emsp; 数据元素在内存中集中存储，采用顺序表示结构，简称“顺序存储”；\n&emsp; 数据元素在内存中分散存储，采用链式表示结构，简称“链式存储”\n\n#### 2.1.1 数组\n&emsp;数组是一批相同数据的集合。数组的三部分：地址 大小 和 空间。数组的保存形式为线性表。\n```c\nint arr[10]; // /[]内必须是常量/常量表达式(3+8)，不能是一个变量(x...)\n// 数组初始化\nint arr1[3] = {1, 2, 3};\nchar arr6[] = \"abcdef\";\n// 指针\nint *ptr = NULL;//定义一个整型的指针变量，初始化为NULL\nchar *ptr = NULL;//定义一个字符的指针变量，初始化为NULL\n// 二维数组\nint arr[3][5] = { 0 };\n// C 传递数组给函数\n// \nvoid myFunction(int *param)\nvoid myFunction(int param[10])\nvoid myFunction(int param[])\n// C 从函数返回数组\nint * myFunction()\n{\n...\n}\n```\n<br>\n\n**二分搜索**\n&emsp;基本思想是：首先选取表中间位置的记录，将其关键字与给定关键字 key 进行比较，若相等，则査找成功；若 key 值比该关键字值大，则要找的元素一定在右子表中，则继续对右子表进行折半查找：若 key 值比该关键宇值小，则要找的元素一定在左子表中，继续对左子表进行折半査找。如此递推，直到査找成功或査找失败（或査找范围为 0）\n&emsp;二分搜索的时间复杂度为 ***对数时间O(logn)***\n```c\nint binary_search(int key, int a[], int n)\n{\n    int low = 0;\n    int high = n - 1;\n    int mid, count = 0, count1 = 0;\n\n    while(low < high) {\n        count++;\n        mid = (low + high) / 2;\n        if (key < a[mid]) {\n            high = mid - 1;\n        } else if (key > a[mid]) {\n            low = mid + 1;\n        } else if (key == a[mid]) {\n            count1++;\n            break;\n        }\n    }\n\n    if (count1 == 0) {\n        return 1;\n    }\n\n    return 0;\n}\n```\n\n#### 2.1.2 单链表\n&emsp; 单链表元素之间有一个单独的指针链接。这种结构的链表可以使得从第一个元素遍历到最后一个元素\n```c\ntypedef struct ListElmt_ {\n    void *data;  // 数据成员\n    struct ListElmt_ * next; // next指针\n} ListElmt;\n\ntypedef struct List_ {\n    int size;\n    int (*match)(const void *key1, const void *key2);\n    void (*destroy)(void *data);\n    ListElmt *head;\n    ListElmt *tail;\n} List;\n```\n&emsp;单链表操作：插入、删除、\n#### 2.1.3 双链表\n&emsp; 双向链表的元素通过两个指针链接。双向链表可以正向遍历，也可反向遍历。\n```c\ntypedef struct DListElmt_ {\n    void *data;\n    struct DListElmt_ *prev;\n    struct DListElmt_ *next;\n} DListElmt;\n\ntypedef struct DList_ {\n    int size;\n    int (*match)(const void *key1, const void *key2);\n    void (*destroy)(void *data);\n    DListElmt *head;\n    DListElmt *tail;\n} DList;\n```\n\n#### 2.1.4 跳表\n&emsp;跳表对标的是平衡树(AVL Tree), 插入/删除/搜索都是 O(logn)的数据结构。\n\n#### 2.1.5 栈\n&emsp;栈按照后进先出(LIFO)的顺序存储和检索数据的数据结构，检索元素的顺序和存储元素顺序相反。\n&emsp;可通过链表来实现栈stack,允许插入和删除的为栈顶(`top`),另一端为栈底(`bottom`),栈中每个元素为`frame`,栈只支持三个操作:`pop`,`top`,`push`.\n```c\ntypedef List Stack;\n\n#define stack_init list_init;\nint stack_push(Stack *stack, const void *data);\nint stack_pop(Stack *stack, void **data);\n#define stack_peek(stack) ((stack)->head == NULL ? NULL : (stack)->head->data);\n#define stack_size list_size;\n```\n&emsp;c语言顺序栈\n```c\n// 元素elem进栈\nint push(char *a, int top, char elem) {\n    a[++top] = elem;\n    return top;\n}\n// 数据元素出栈\nint pop(char *a, int top)\n{\n    if (top == -1) {\n        return -1;\n    }\n\n    top--;\n    return top;\n}\n```\n\n&emsp;链栈\n```c\ntypedef struct lineStack {\n    char data;\n    struct lineStack *next;\n}lineStack;\nlineStack* push(lineStack * stack,char a){\n    lineStack * line=(lineStack*)malloc(sizeof(lineStack));\n    line->data=a;\n    line->next=stack;\n    stack=line;\n    return stack;\n}\nlineStack * pop(lineStack * stack){\n    if (stack) {\n        lineStack * p=stack;\n        stack=stack->next;\n        printf(\"弹栈元素：%c \",p->data);\n        if (stack) {\n            printf(\"栈顶元素：%c\\n\",stack->data);\n        }else{\n            printf(\"栈已空\\n\");\n        }\n        free(p);\n    }else{\n        printf(\"栈内没有元素\");\n        return stack;\n    }\n    return stack;\n}\n```\n\n#### 2.1.6 队列\n&emsp;队列，在前端(`front`)进行删除操作，后端(`rear`)进行插入操作; 按照先进先出(`FIFO`)的顺序存储和检索数据的高效数据结构，按照元素的存储顺序检索元素。\n&emsp;队列也可通过数组和链表实现。\n```c\ntypedef List Queue;\n\n#define queue_init list_init;\n#define queue_destroy list_destroy;\nint queue_enqueue(Queue *queue, const void *data);\nint queue_dequeue(Queue *queue, void **data);\n#define queue_peek(queue) ((queue)->head == NULL ? NULL : (queue)->head->data);\n#define queue_size list_size;\n```\n\n&ensp;队列应用：进程通信\n&emsp;消息队列提供了从一个进程向另一个进程发送一个数据块的方法.每个数据库都认为含有一个类型,接收进程可以独立地接收含有不同类型的数据结构.\n\n&emsp;linux内核 <sys/msg.h> 头文件中定义了消息队列结构\n```c\nstruct msqid_ds {\n    struct ipc_perm msg_perm;\n    struct msg* msg_first; // 指向队列中第一个消息\n    struct msg* msg_last; // 队列中最后一个消息\n    ...\n}\n```\n&emsp;Linux消息队列函数接口\n```c\n// 创建和访问一个消息队列\nint msgget(key_t key, int msgflg);\n// 把消息添加到消息队列中\nint msgsnd(int msgid, const void *msg_ptr, size_t msg_sz, int msgflg);\n// 从一个消息对立获取消息\nmsgrcv(int msgid, void *msg_ptr, size_t msg_st, long int msgtype, int msgflg);\n// 控制消息队列\nint msgctl(int msgid, int command, struct msgid_ds *buf);\n```\n\n#### 2.1.7 leetcode题目\n- 重复N次的元素<数组>\n\n- 两数相加<链表>\n\n- 基本计算器<栈>\n\n- 设计循环队列<队列>\n\n### 2.2 哈希表\n&ensp;哈希表是一种最有效的检索方法，散列，从本质上看，一个哈希表包含一个数组，通过特殊的索引（键）来访问数组中的元素。哈希表主要思想是通过一个哈希函数，在所有可能的键和值直接建立映射表。\n&ensp;每个记录的关键字k通过一种函数H(k)计算出函数值.此函数为哈希函数或散列函数.\n\n#### 2.2.1 哈希函数设计\n- 直接地址法\n关键字是整数类型的数据,直接地址的哈希函数H直接利用关键字求得哈希地址.\nH(k) = aK*i + b\n\n- 数字分析法\n取关键字数中分布均匀的若干作为哈希地址\n\n- 平方取中法\n取关键字平方中间几位作为散列地址\n\n- 折叠法\n\n- 除留取余法\n关键字K除以一个合适的不大于哈希表长度的正整数P,所得余数作为哈希地址.\nH(K) = K MOD P\n\n#### 2.2.2 哈希冲突\n&ensp;理想情况下,哈希函数在关键字和地址之间建立一对一关系.但H(k1) = H(k2),即为冲突.\n\n&emsp;解决哈希冲突常用方法:\n- 链地址法\n将哈希值相同的元素构成一个同义词的单链表,并将单链表头指针存放在哈希表的地i个单元中,查找,插入和删除主要在同义词链表中.\n\n#### 2.2.3 uthash\n\n&ensp;uthash的插入、查找、删除的操作时间都是常量\n\n```c\n\n#include \"uthash.h\"\n\nstruct my_struct {\n    int id;            /* we'll use this field as the key */\n    char name[10];\n    UT_hash_handle hh; /* makes this structure hashable */\n};\n\nstruct my_struct *users = NULL;\n\nvoid add_user(struct my_struct *s) {\n    HASH_ADD_INT(users, id, s );\n}\n\n```\n\n- 参考链接\n官网:https://troydhanson.github.io/uthash/\nhttps://blog.csdn.net/fan_h_l/article/details/107241520\nhttps://blog.csdn.net/whatday/article/details/95926766\nhttps://www.cnblogs.com/pam-sh/p/12827658.html\n\n#### 2.2.4 leetcode题目\n- 设计哈希集合 \n\n- 设计哈希映射\n\n- 根据字符出现频率排序\n\n### 2.3 树与二叉树\n&emsp;树(tree)是一种用来模拟树状结构的抽象数据结构(ADT);\n\n&emsp;树的特点:\n- 没有父节点的节点称为根节点\n- 每个非根节点有且只有一个父节点\n- 除了根结点外,每个子节点可分为多个不相交的子树\n- 树中没有环路\n\n#### 2.3.1 概述\n- 节点的度: 一个节点含有子树的个数\n- 树的度: 树中最大的节点度\n- 叶节点: 度为零的节点\n- 父节点\n- 子节点\n- 兄弟节点\n- 节点的层次\n- 深度: 任意节点n,n的深度为从n到一片树叶的最长路径长,根的深度为0\n- 高度: 对任意节点n,n的高度为从n到一片树叶的最长路径长,所有树叶的高度为0.\n- 森林\n\n&emsp;树由称为结点的元素按照层次结构的方式组织而成。最顶端称为根。与根直接相连的结点称为根的子结点。子节点本身也可以有子结点。除根结点外，每个结点都有唯一的父结点。\n\n#### 2.3.2 树的种类\n- 无序树\n- 有序树\n   - 二叉树: 每个节点最多含有两个子树的树.\n      - 完全二叉树: 对于一颗深度为d的二叉树,除第d层外,其他各层节点数目均达最大值,且第d层所有节点从左向右连续紧密排列.\n         - 满二叉树:所有叶节点都最底层的完全二叉树.\n      - 平衡二叉树(AVL):当且仅当任何节点的两颗子树的高度差不大于1的二叉树.\n      - 排序二叉树:二叉查找树\n\n    - 霍夫曼树:带权路径最短的二叉树(又称最优二叉树).\n    - B树:一种堆读写操作进行优化的自平衡二叉查找树,能够保持数据有序,拥有多余两个子树.\n\n<br>\n\n|||\n|---|---|\n|二叉树|二叉查找树(BST) 笛卡尔树 MVP树 Top tree T树|\n|自平衡二叉查找树|AVL树 红黑树 |\n|B树|B树 B+树|\n\n&emsp;树有多种结构形式，包括二叉树、。\n\n#### 2.3.3 二叉树\n\n&ensp;二叉树两个条件:\n- 本身是有序树\n- 树中包含的各个节点的度不能超过2,即只能是0,1或者2\n\n&emsp;二叉树中结点包含三部分：一个数据成员两个左右指针。\n\n```c\ntypedef struct BiTreeNode_ {\n    void *data;\n    struct BiTreeNode_ *left;\n    struct BiTreeNode_ *right;\n}BiTreeNode;\n\ntypedef struct BiTree_ {\n    int size;\n    int (*compare)(const void *key1, const void *key2);\n    void (*destroy)(void *data);\n    BiTreeNode *root;\n}BiTree;\n\n/*树根*/\ntypedef struct tree{\n\tNode * root;\n}Tree;\n```\n&ensp;二叉树性质:\n- 二叉树中,第i层最多有 2^(i-1)个节点\n- 如果二叉树的深度为K,则二叉树最多有`2^K - 1`个节点\n\n满二叉树\n\n完全二叉树\n\n\n&emsp;树的周游算法包含先序遍历、中序遍历、后序遍历和层序遍历。\n- 先序遍历：先访问根结点，然后左子树，最后右子结点。深度优先思想。\n- 中序遍历：先访问左子结点，然后根结点，最后右子结点。\n- 后序遍历：先访问左子结点，然后右子结点，最后根结点。\n- 层序遍历：先访问树的根结点，然后依次向下层处理，按照从左向右的顺序访问每层结点。广度优先的策略。\n\n\n#### 2.3.4 二叉查找树(BST)\n\n&ensp;二叉查找树也称二叉搜索树,有序二叉树或排序二叉树,具有性质:\n- 若任意节点左子树不为空,则左子树上所有节点的值均小于它的根节点的值\n- 若任意节点的右子树不为空,则右子树所有节点的值均大于根节点的值\n- 任意节点的左,右子树也分别为二叉查找树\n- 没有键值相等的节点\n\n\n&emsp;一颗二叉搜索树要插入一个结点，要从根结点开始，一层一层往下，适当地移动左或右子结点上，当到达树的分支尽头时，执行插入操作。\n&emsp;二叉搜索树是一种用于查找操作的高效数据结构，在最坏情况下，只需查找一个分支上的数据即可。**查找,插入**操作的复杂度是 `O(lgn)`，**搜索,插入,删除**复杂度等于树高,期望`O(logn)`,最坏为`O(n)`,(树退化为线性表)n为树中结点数。\n&emsp;保持一棵树的平衡是指对于给定数量的结点，要使得树的高度尽可能短。\n\n\n&emsp;二叉查找树是由二叉树组成的专用于查找和搜索目的的一种数据结构。二叉搜索树中查找一个结点，从根结点开始一层一层向下查找，当遇到一个比目标结点值大的结点时，顺着该结点左子树继续查找，如果遇到的结点值小于目标结点，则顺着该结点的右子树查找，直到找到目标结点为止。\n\n&ensp;**查找算法**\n&emsp;&emsp;1.若b是空树,则搜索失败,否则;\n&emsp;&emsp;2.若x等于b的根节点的数据域之值,则查找成功;\n&emsp;&emsp;3.若x小于b的根节点的数据域之值,则搜索左子树\n&emsp;&emsp;4.查找右子树\n\n&ensp;**插入算法**\n&emsp;&emsp;1.若b是空树,则将s所指节点作为根节点插入;否则\n&emsp;&emsp;2.若`s->data`等于b的根节点的数据域值,则返回,否则;\n&emsp;&emsp;3.若`s->data`小于b的根节点的数据域之值,则把s所值节点插入到左子树中,否则\n&emsp;&emsp;4.把s所指节点插入到右子树中,(新插入节点总是叶子节点)\n\n&ensp;**删除算法**\n&emsp;&emsp;1.若*p节点为叶子节点,即PL(左子树)和PR(右子树)均为空树.由于删去叶子节点不破坏整棵树的结构,则只需修改其双亲节点的指针即可.\n\n#### 2.3.5 平衡树\n\n&ensp;平衡树是一类改进的二叉查找树,一般二叉查找树的查询复杂度与目标节点到树根的距离(深度)有关,因此当深度较大时,查询均摊复杂度会上升.\n&ensp;**平衡指所有叶子的深度趋于平衡**,更广义指树上所有可能查找的均摊复杂度偏低.**平衡树的操作时基于树旋转操作,通过旋转可使树趋于平衡**.\n&ensp;对一颗查找树进行查询,新增,删除等操作,所花的时间与树的高度h成比例,并不与树的容量n成比例.\n\n- **AVL树**\n\n&emsp;在**AVL树中,任一节点对于的两颗子树的最大高度差为1,因此也称为高度平衡树**.查找,插入和删除的平均和最坏时间复杂度是O(logn),增加和删除元素的操作则可能需要借由一层或多次旋转,以实现树的重新平衡.\n&emsp;**高度为h的AVL树,总节点数最多为2^h-1**; 当前节点数为N时,高度h最多为:\n> log(5*0.5 * (N + 1)) - 2\n\n<br>\n\n- **红黑树**\n\n&ensp;红黑树是一种自平衡二叉查找树,典型的用途是实现关联数组.红黑树实现复制,查找,插入和删除时间复杂度为O(logn)\n&ensp;红黑树相对于AVL树,牺牲了部分平衡性以换取插入\\删除操作时少量的旋转操作,整体性能优于AVL树.\n\n&emsp;红黑树与AVL树的相比:\n&emsp;&emsp;AVL树在插入,删除节点时要把树调整到完全平衡,红黑树只要调整到大致平衡,因此通常红黑树的插入,删除节点性能稍好.\n&emsp;&emsp;AVL的查找性能通常比红黑树好\n&emsp;&emsp;如果节点的增删操作远小于查找操作,则应选择AVL;反之,红黑树可能更好.\n\n&ensp;红黑树是每个节点都带有颜色属性的二叉树,颜色为红色或黑色.在二叉查找树强制一般要求以外,对于任何有效的红黑树我们怎讲了弱小额外要求:\n&emsp;&emsp;1.节点是红或黑色\n&emsp;&emsp;2.根是黑色\n&emsp;&emsp;3.所有叶子都是黑色(叶子是NIL节点)\n&emsp;&emsp;4.每个红色节点必须右两个黑色的子节点.(从每个叶子到根的所有路径上不能右两个连续的红色节点.)\n&emsp;&emsp;5.从任一节点到其每个叶子的所有简单路径都包含相同苏后面的黑色节点.\n&ensp;红黑树关键特性:**从根到叶子的最长的可能路径不多于最短的可能路径的两倍长**.红黑树是大致平衡的.插入,删除和查找某个值最坏情况下与树的高度成比例.\n\n- **B+树**\n&ensp;B+树通常用于数据库和操作系统的文件系统中.**B+树的特点是能够保持数据稳定有序,其插入与修改拥有较文档的对数时间复杂度**.B+树元素自底向上插入,与二叉树相反.\n&ensp;B+树是内部节点可右在预定范围内的可变量目的子节点.因此,B+树不需要像其他自平衡二叉查找树那样重新平衡.\n\n#### 2.3.6 堆树和优先队列\n\n&ensp;堆(heap)也称为优先队列,堆遵守队列操作模式,在堆底插入元素,在堆顶取出元素,但堆中元素的排列不是按照到来的先后顺序,而是按照一定的有序顺序排列的.\n&ensp;堆的本质是一个完全二叉树,可使用二叉树表示堆,也可使用数组来表示.\n&ensp;堆的特性:\n&emsp;&emsp;必须是完全二叉树\n&emsp;&emsp;用数组实现\n&emsp;&emsp;任一节点的值是其子树所有节点的最大值或最小值\n&emsp;&emsp;&emsp;最大值时,称为最大堆,也称大顶堆\n&emsp;&emsp;&emsp;最小时,称为最小堆,也称小顶堆.\n&emsp;**堆不能保证整棵树都是有序的,堆中的插入和删除操作时时间复杂度为O(log2n)**\n\n\n&emsp;堆是一颗二叉树，通常其子结点存储的值比父结点的值小，所以，根结点为树中最大的结点(大顶堆)。同样，根结点也可以是树中最小的结点(小顶堆)。能够快速确定包含最大(小)值的特点。\n&emsp;堆时左平衡的树，随着结点增加，树会逐级从左至右增长。一个较好地表示左平衡二叉树的方式是，将结点通过层序遍历方式连续存储到一个数组中。\n\n```c\ntypedef struct Heap_ {\n    int size;\n    int (*compare)(const void *key1, const void *key2);\n    void (*destroy)(void *data);\n    void **tree;\n}\n```\n\n\n\n&emsp;堆排序，要排序的数据首先存储在一个堆中。从堆中一次取出一个结点。放置到有序数据集的尾部。当取出每个结点时，它的下一个结点就会浮现到堆的顶部。\n\n\n&emsp;优先队列是从堆衍生的数据结构。在优先队列中，数据保存在一个堆中，可快速确定下一个最高优先级的结点。\n\n&emsp;优先队列将数据按照优先级顺序排列。一个优先队列由许多有序元素构成，所以优先级最高的元素可以有效而快速的确定。\n\n```c\ntypedef Heap PQueue;\n```\n\n\n#### 2.3.7 leetcode题目\n\n- 先序遍历构造二叉树\n- 从中序与后序遍历构造二叉树\n- 二叉树的层次遍历\n- 从二叉搜索树到更大和树\n- 二叉搜索树的最近公共祖先\n- 前K个高频单词<堆>\n\n### 2.4 图\n\n&ensp;图(Graph)是由顶点的有穷非空集合和顶点之间的边的集合组成,通常表示为:`G(V,E)`.其中,G表示一个图,V是入G中顶点的集合,E是图G中的集合.\n\n&emsp;图是一种灵活的数据结构，用来定义对象之间关联或联系的模型。对象由顶点表示，而对象直接的关系或关联则通过顶点之间的边来表示。\n&emsp;图的访问方式：广度优先和深度优先。\n\n#### 2.4.1 基础知识\n&emsp;图由两种类型的元素组成：顶点和边，顶点代表对象，边则建立起对象之间的关系或关联。图的边可关联值或权重信息。\n&emsp;图分为有向图和无向图。有向图，边是由两个顶点组成的有序对，具有特定的方向。边也可称为弧。无向图中，边是没有方向的。\n\n&ensp;图可分为连通图和非连通图\n\n#### 2.4.2 图表示\n&emsp;图的表示方法是G=(V, E)，V代表顶点的集合，而E和V之间是二元关系。\n&emsp;图中由两个重要关系邻接(adjacency)和关联(incidence)。邻接是两个顶点之间的关系。关联是顶点和边之间的关系。\n邻接矩阵表示\n邻接链表表示\n\n```c\ntypedef struct AdjList_ {\n    void *vertex;\n    Set adjacent;\n}AdjList;\n\ntypedef struct Graph_ {\n    int vcount;\n    int ecount;\n    int (*match)(const void *key1, const void *key2);\n    List adjlists;\n}\n```\n\n#### 2.4.3 图遍历\n&ensp;图的搜索方法：深度优先搜索和广度优先搜索。\n&emsp;深度优先遍历(DFS)\n&emsp;思路: 从图中某点v出发:\n&emsp;&emsp;&emsp;1.访问顶点v\n&emsp;&emsp;&emsp;2.从v的未被访问的邻接点中选取一个顶点w,从w出发进行深度优先遍历.\n&emsp;&emsp;&emsp;3.重复上述两步,直到图中所有和v有路径相通的顶点都被访问.\n&emsp;伪代码: \n```c\n// \nvoid DFS(Vertex v) {\n    vistied[v] = true;\n    for (v 的每个邻接点 w) {\n        if (!visited[w]) {\n            DFS(w);\n        }\n    }\n}\n```\n\n&ensp;广度优先遍历(BFS)\n&emsp;思路: \n&emsp;&emsp;&emsp;1.顶点v入队列\n&emsp;&emsp;&emsp;2.当队列非空时则继续执行,否则算法结束.\n&emsp;&emsp;&emsp;3.出队列取得队头顶点v',访问顶点v 并标记顶点v已被访问.\n&emsp;&emsp;&emsp;4.查找顶点v的第一个邻接顶点col\n&emsp;&emsp;&emsp;5.若v的邻接顶点col未被访问过的,则col继续.\n&emsp;&emsp;&emsp;6.查找顶点v的另一个新的邻接顶点col,转到步骤5入队列,直到顶点v的所有未被访问过的邻接点处理完,转到步骤2.\n\n&ensp;深度优先搜索和广度优先搜索,时间复杂度都为O(n^2)\n\n深度优先:从初始点出发,不断向前走,如果碰到死路,就往回走一步,尝试另一条路,直到发现目标位置.\n广度优先:从初始点出发,把所有可能的路径都走一遍,如果里面没有目标位置,则尝试把所有两步能够到的位置都走一遍,看有没有目标位置.\n\n#### 2.4.4 最短路径\n**迪杰斯特拉Dijkstra算法**\n&ensp;Dijkstra算法适用于权值为正的图.\n&ensp;Dijkstra算法属于单源算法,即只能求出某点到其它点最短距离,并不能得出任意两点之间的最短距离.\n&ensp;在源点可达的情况下,Dijkstra算法的时间复杂度时 `O(ElogV)`\n&ensp;算法步骤:\n&emsp;&emsp;1.将所有边初始化为无穷大\n&emsp;&emsp;2.旋转一个开始的顶点,添加到优先队列中.\n&emsp;&emsp;3.对于该点的所有邻接顶点进行判断,如果到该点的距离小于原先的值,则该值进行更新.\n&emsp;&emsp;4.将该点所有邻接顶点添加到优先队列中.\n&emsp;&emsp;5.从优先队列中挑选除一个路径值最小的顶点,将其弹出,作为新的顶点,重复步骤3,4,5\n&emsp;&emsp;6.直到所有点都被处理过一次.\n\n**弗洛伊德Floyd算法**\n&ensp;Floyd算法是一个经典的动态规划算法.首先目标是寻找从点`i`到`j`的最短路径.\n&ensp;**Floyd算法可以求出任意两点的最短距离.时间复杂度:**`O(你^3)`\n&ensp;从任意节点i到任意节点j的最短路径不外乎2种可能:\n&emsp;&emsp;1.是之间从i到j\n&emsp;&emsp;2是从i到经过若干个节点k到j\n\n```c\nfor (int k = 0; k < n; k++) {\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (A[i][j] > (A[i][k] + A[k][j])) {\n                A[i][j] = A[i][k] + A[k][j];\n                path[i][j] = k;\n            }\n        }\n    }\n}\n```\n\n\n#### 2.4.5 拓扑排序\n&ensp;拓扑排序是一个有向无环图(DAG)的所有顶点的线性序列.且该序列必须满足下面两个条件:\n- 每个顶点出现且只出现一次\n- 若存在一条顶点A到顶点B的路径,那么在序列中顶点A出现在顶点B的前面.\n\n\n#### 2.4.6 leetcode题目\n- 判断二分图\n- 克隆图\n- 找到小镇的法官\n- 钥匙和房间\n- 最短路径访问所有节点\n\n\n## 3 常见算法\n\n### 3.1 分治法\n&emsp;把复杂问题分成两个或者更多相同或相似的子问题，再把子问题分成更小的子问题...，直到可以直接求解，原问题的解为子问题解的合并。\n&emsp;分治法应用：排序算法(快速排序、归并排序);傅里叶变换()。\n#### 3.1.1 概述\n&ensp;分治法思想:将一个难以直接解决的大问题,分割成一些规模小的相同问题,分而治之.\n#### 3.1.2 策略\n&ensp;分治策略:对于一个规模为n的问题,若该问题可以容易解决则直接解决,否则将其分解为k个规模较小的子问题,子问题之间相互独立且与原问题形式相同,可递归求解.分治通常用递归实现.\n#### 3.1.3 应用场景\n&ensp;分治法特征:\n- 问题缩小到一定程度可容易解决.\n- 问题可分解为若干个规模较小的相同问题,即问题具有最优子结构性质.\n- 子问题的解可合并为该问题的解.\n- 问题分解的子问题相互独立,子问题之间不包含公告子问题.\n\n#### 3.1.4 步骤\n&ensp;分治法一层递归步骤:\n- 1) **分解**:将原问题分解为若干规模较小,相互独立,与原问题形式相同的子问题.\n- 2) **解决**:若子问题可直接求解,则直接求解,否则递归解各个子问题.\n- 3) **合并**:将各个子问题的解合并为原问题的解.\n\n&ensp;\n\n```c\n\n\n```\n<br>\n\n#### 3.1.5 应用\n> 分治思维方式：二分搜索;大整数乘法;合并排序;快速排序。\n\n&ensp;求x的n次幂\n&emsp;对数复杂度O(logn)\n```c\nint power(int x, int n)\n{\n    int result;\n    if (n == 1) {\n        return x;\n    }\n    if (n % 2 == 0) {\n        result = power(x, n/2) * power(x, n / 2);\n    } else {\n        result = power(x, (n + 1) / 2) * power(x, (n - 1) / 2);\n    }\n    return result;\n}\n```\n\n#### 3.1.6 leetcode题目\n- 搜索二维矩阵II\n- 求众数\n- 合并k个排序链表\n\n\n## 3.2 排序算法\n&emsp;各种排序算法，主要包括：插入排序、快速排序、归并排序、计数排序和技术排序。二分查找，\n\n### 3.2.1 冒泡排序\n**冒泡排序算法复杂度是O(n^2)**\n```c\nstatic void bubleSort(int[] arr)\n{\n    int size = arr.length;\n    // \n    for (int out = size - 1; out > 0; out--) {\n        // \n        for (int in = 0; in < out; in++) {\n            if (arr[in] > arr[in + 1]) {\n                swap(arr, in, in + 1);\n            }\n        }\n    }\n}\n```\n### 3.2.2 选择排序\n&emsp;选择排序算法时间复杂度为O(n^2)\n\n```c\nstatic void selectSort(int[] arr)\n{\n    int size = arr.lenght;\n    //\n    for (int out = 0; out < size; out++) {\n        int mixIndex = out;\n        //\n        for (int in = out - 1; in < size; in++) {\n            if (arr[mixIndex] > arr[in]) {\n                mixIndex = in;\n            }\n        }\n\n        if (mixIndex != out) {\n            swap(arr, mixIndex, out);\n        }\n    }\n}\n```\n\n### 3.2.3 插入排序\n&emsp;插入排序每次从无序数据集合中取出一个元素，插入到已经排好序的数据集中适当位置，使数据集仍然有序。插入排序不需要额外空间。时间复杂度O(n2)\n\n```c\nstatic void insertSort(int[] arr)\n{\n    int size = arr.lenght;\n    // \n    for (int out = 1; out < size; out++) {\n        //\n        int temp = arr[out];\n        int in = out;\n        //\n        // \n        while (in - 1 >= 0 && arr[in - 1] > temp) {\n            arr[in] = arr[in - 1];\n            in--;\n        }\n        if (in != out) {\n            arr[in] = temp;\n        }\n    }\n}\n```\n\n```c\nint issort(void *data, int size, int esize, int (*compare)(const void *key1, const void *key2))\n{\n    char *a = data;\n    void *key;\n    int i, j;\n\n    if ((key = (char *)malloc(esize)) == NULL) {\n        return -1;\n    }\n\n    for (j = 1; j < size; j++) {\n        i = j - 1;\n\n        while (i >= 0 && compare(&a[i * esize], key) > 0) {\n            mamcpy(&a[(i + 1) * esize], &a[i * esize], esize);\n            i--;\n        }\n        memcpy(&a[(i + 1) * esize], key, esize);\n    }\n\n    free(key);\n\n    return 0;\n}\n\n```\n### 3.2.4 希尔排序\n&ensp;希尔排序时间复杂度O(n*(logn)^2)\n```c\nstatic void shellSort(int[] arr)\n{\n    int size = arr.lenght;\n    int h = 1;\n    while (h <= size / 3) {\n        //\n        h = h * 3 + 1;\n    }\n    while (h > 0) {\n        for (int out = h; out < size; out++) {\n            int temp = arr[out];\n            int in = out;\n            //\n            while (in - h >= 0 && arr[in - h] > temp) {\n                arr[in] = arr[in - h];\n                in = in - h;\n            }\n            if (in != out) {\n                arr[in] = temp;\n            }\n        }\n        h = (h - 1) / 3;\n    }\n}\n```\n### 3.2.5 归并排序\n&emsp;归并排序是一种分支排序算法。归并排序需要额外存储空间来完成排序。\n```c\nint min(int x, int y)\n{\n    return  x < y ? x : y;\n}\nvoid merge_sort(int arr[], int len)\n{\n    int *a = arr;\n    int *b = (int *)malloc(len * sizeof(int));\n    int seg, start;\n    for (seg = 1; seg < len; seg += seg) {\n        for (start )\n    }\n}\n\n```\n### 3.2.6 快速排序\n&emsp;快速排序是一种分治排序算法。不需要额外存储空间，时间复杂度O(nlgn)\n\n&emsp;快速排序三个步骤：\n- 分：设定一个分割值并将数据分为两部分。\n- 治：分别在两部分使用递归方式继续使用快速排序方法。\n- 和：对分割部分排序直至完成。\n\n```c\ntypedef struct _Range {\n    int start;\n    int end;\n} Range;\nRange now_Range(int s, int e)\n{\n    Range r;\n    r.start = s;\n    r.end = e;\n    return r;\n}\n\nvoid swap(int *x, int *y)\n{\n    int t = *x;\n    *x = *y;\n    *y = t;\n}\n\nvoid quick_sort(int arr[], const int len)\n{\n    if (len <= 0) {\n        return;\n    }\n    Range r[len];\n    int p = 0;\n    r[p++] = new_Range(0, len - 1);\n    while (p) {\n        Range range = r[--p];\n        if (range.start >= range.end) {\n            continue;\n        }\n        int mid = arr[(range.start + range.end) / 2];\n        int left = range.start;\n        int right = range.end;\n        do {\n            while (arr[left] < mid) {\n                ++left;\n            }\n            while (arr[right] > mid) {\n                --right;\n            }\n            if (left <= right) {\n                swap(&arr[left], &arr[right]);\n                left++;\n                right--;\n            }\n        } while (left <= right);\n        if (range.start < right) {\n            r[p++] = new_Range(range.start, right);\n        }\n        if (range.end > left) {\n            r[p++] = new_Range(left, range.end);\n        }\n    }\n}\n\n```\n\n\n```c\nvoid QuickSort(int *arr, int low, int high)\n{\n    if (low < high) {\n        int i = low;\n        int j = high;\n        int k = arr[low];\n        while (i < j) {\n            // 从右向左找第一个小于k的数\n            while (i < j && arr[j] >= k) {\n                j--;\n            }\n\n            if (i < j) {\n                arr[i++] = arr[j];\n            }\n            // 从左向右找第一个大于等于k的数\n            while (i < j && arr[i] < k) {\n                i++;\n            }\n\n            if (i < j) {\n                arr[j--] = arr[i];\n            }\n        }\n        arr[i] = k;\n\n        // 递归调用\n        QuickSort(arr, low, i - 1); // 排序k左边\n        QuickSort(arr, i + 1, high); // 排序k右边\n    }\n}\n\nvoid quick_sort( int *a, int n)\n{\n    int i, j, p, tmp;\n    if (n < 2)  return;\n\n    p = a[n / 2];   // Get the middle element as pivot ..\n\n    for ( i = 0, j = n -1;; i++, j--) {\n        while (a[i] < p)\n            i++;\n        while (p < a[j])\n            j--;\n        if ( i >= j)\n            break;\n        tmp = a[i]; a[i] = a[j]; a[j] = tmp;    //swap both ..\n    }   \n\n    quick_sort( a, i); \n    quick_sort( a + i, n - i); \n}\n\n```\n**qsort/sort函数**\n&ensp;在c语言库函数中已经实现了qsort函数,\n&emsp;qsort函数用法:\n```c\nvoid qsort(void *base, int nelem, int width, int (*fcmp)(const void *, const void *));\n// 参数:1 带排序数组首地址, nelem 数组中待排元素数量  width 各元素所在空间大小  *fcmp 指向函数的指针\n```\n\n```c\n// int 数组\nint cmp(const void *a, const void *b)\n{\n    return (*(int *)a - *(int *)b);\n}\nqsort(arr, n, sizeof(arr[0]), cmp);\n\n// char 数组\nint com(const void *a, const void *b)\n{\n    return *(char *)a - *(char *)b;\n}\nchar word[100];\nqsort(word, 100, sizeof(word[0]), cmp);\n\n// double 类型\nint cmp(const void *a, const void *b)\n{\n    return *(double *)a > *(double*)b ? 1 : -1;\n}\ndouble in[100];\nqsort(in, 100, sizeof(in[00]), cmp);\n\n// struct 结构体\nstruct Sample {\n    double data;\n    int num;\n}st[100];\n\nint cmp(const void *a, const void *b)\n{\n    return (*(Sample *)a).data > (*(Sampel *)b).data ? 1 : -1;\n}\nqsort(s, 100, sizeof(s[0]), cmp);\n// \nint cmp(const void *a, const void *b)\n{\n    struct Sample *c = (Sample *)a;\n    struct Sample *d = (Sample *)b;\n    if(c->x != d->x) {\n        return c->x - d->x;\n    } else {\n        return d->y - c->y;\n    }\n}\n\nqsort(s,100,sizeof(s[0]),cmp);\n\ntruct Sample\n{\n    int data;\n    char str[100];\n}s[100];\n\n//按照结构体中字符串str的字典顺序排序\n\nint cmp (const void *a, const void *b)\n{\n    return strcmp((*(Sample *)a)->str , (*(Sample *)b)->str);\n}\n\nqsort(s,100,sizeof(s[0]),cmp);\n```\n### 3.2.7 堆排序\n&emsp;桶排序算法基本原理：把数组中的所有元素分为若干个数据块，也就是若干个桶，然后对每个桶里的数据进行排序，最后将所有桶里的数据依次排列。\n&emsp;存在两个问题：\n&emsp;(1)怎样划分数据块，也就是分几个桶，每个桶放哪几个数据。\n&emsp;(2)对每个数据块里的数据怎样排序。\n```c\n#include<sdtio.h>\n#include<stdlib.h>\n\ntypedef struct node {\n    int key;\n    struct node *next;\n} KeyNode;\n\nvoid bucket_sort(int keys[], int size, int bucket_size) {\n    int i, j;\n    KeyNode **bucket_table = (KeyNode **)mallov(bucket_size * sizeof(KeyNode*));\n    for(i = 0;i < bucket_size;i++) {\n        bucket_table[i] = (KeyNode*)malloc(sizeof(KeyNode));\n        bucket_table[i]->key = 0;\n        bucket_table[i]->next = NULL;\n\t}\n\tfor(j = 0;j < size;j++) {\n\t\tKeyNode *node = (KeyNode *)malloc(sizeof(KeyNode));\n\t\tnode->key = keys[j];\n\t\tnode->next = NULL;\n\t\tint index = keys[j]/10;\n\t\tKeyNode *p = bucket_table[index];\n\t\tif(p->key == 0) {\n\t\t\tbucket_table[index]->next = node;\n\t\t\t(bucket_table[index]->key)++;\n\t\t}else {\n\t\t\twhile(p->next != NULL && p->next->key <= node->key)\n\t\t\t\tp = p->next;\n\t\t\tnode->next = p->next;\n\t\t\tp->next = node;\n\t\t\t(bucket_table[index]->key)++;\n\t\t}\n\t}\n\t//print result\n\tKeyNode * k = NULL;\n\tfor(i = 0;i < bucket_size;i++)\n\t\tfor(k = bucket_table[i]->next;k!=NULL;k=k->next)\n\t\t\tprintf(\"%d \",k->key);\n\tprintf(\"\\n\");\n}\n\nint main()\n{\n\tint raw[] = {49,38,65,97,76,13,27,49};\n\tint size = sizeof(raw)/sizeof(int);\n\tbucket_sort(raw,size,10);\n}\n```\n\n```c\nvoid Heapify(int A[], int i, int size)\n{\n    int lef_child = 2 * i + 1;\n    int right_child = 2 * i + 2;\n    int max = i;\n    if (lef_child < size && A[lef_child] > A[max]) {\n        max = lef_child;\n    }\n    if (right_child < size && A[right_child] > A[max]) {\n        max = right_child;\n    }\n    if (max != i) {\n        Swap(A, i max);\n        Heapify(A, max, size);\n    }\n}\n\nint BuildHeap(int A[], int n)\n{\n    int heap_size = n;\n    for (int i = heap_size / w - 1; i >= 0; i--) {\n        Heapify(A, i, heap_size);\n        return heap_size;\n    }\n}\n\nvoid HeapSort(int A[], int n)\n{\n    int heap_size = BuildHeap(A, n);\n    while (heap_size > 1) {\n        Swap(A, 0, heap_size);\n        Heap(A, 0, heap_size);\n    }\n}\n```\n\n### 3.2.8 leetcode排序\n\n\n\n## 3.3 贪心算法\n\n### 3.3.1 基本概念\n&ensp;贪心算法:在对问题求解时,总是做出在当前是最好的选择,即不考虑整体最优,仅考虑局部最优解.\n&ensp;贪心算法没有固定算法框架,算法关键是贪心策略的选择.他想算法不是所有问题都得到最优解,选择贪心策略必须具备无后效性,即某个状态以后的过程不会影响一起的状态,只与当前状态有关.\n### 3.3.2 描述\n&ensp;贪心算法实现步骤:\n&emsp;1.建立数学模型描述问题\n&emsp;2.把求解的问题分成若干个子问题\n&emsp;3.对每个子问题求解,得到子问题的局部最优解\n&emsp;4.把子问题的解局部最优解合成原来问题的一个解.\n&ensp;实现算法过程:\n```c\nwhile (能朝给定总目标前进一步)\n{\n    利用可行的决策,求出可行解的一个解元素;\n}\n由所有解元素组合成问题的一个可行解\n```\n### 3.3.3. 应用\n\n**最小生成树算法**\n&ensp;贪心算法经典实践:最小生成树算法\n&emsp;设`G=(V, E)`是无向连通带权图,即一个网络,E中的每一条边`(v,w)` 的全为 `c[v][w]`.如果G的字体 G' 是一颗包含 G 的所有顶点的数,则称 G' 为 G 的生成树.生成树上各边权的总和称为生成树的耗费.在 G 的所有生成树中,耗费最小的生成树称为 G 的最小生成树.\n&ensp;最小伸出手的性质:\n&emsp;&emsp;设`G=(V, E)`是连通带权图, U是V的真子集.如果(u,v)属于E,且u属于E,v属于V-U,且在所有这样的边中,(u,v)的权c[u][v]最小,那么一定存在G的一颗最小生成树,它亦是(u,v)为其中一条边,这个性质有时也称为MST性质.\n\n\n**Prim算法**\n&emsp;&emsp;设`G=(V, E)`是连通带权图, V={1,2,...,n}.构造G的最小生成树Prim算法的基本思想是:**首先置S={1},然后,只有S是V的真子集,就进行如下的贪心选择:选取满足添加i属于S,j属于V-S,且c[i][j]最小的边,将顶点j添加到S中.这个过程一直进行到S=V时为止.在这个过程中选取到的所有边恰好构成G的一颗最小生成树.\n\n### 3.3.4 leetcode题目\n- 柠檬水找零\n- 分发饼干\n\n## 3.4 动态规划\n&ensp;动态规划(`DP`):是一种通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法.常用于重叠子问题和最优子结构性质的问题,动态规划时间通常远小于朴素解法.\n### 3.4.1 基本概念\n&ensp;动态规划:要解一个给定问题,需要解其不同部分(即子问题),再根据子问题的解以得出原问题的解.通常子问题非常相似,子问题解算出后,将其记录.\n&ensp;动态规划过程是:每次决策依赖于当前状态,又随即引起状态转移.一个决策序列就是在变化的状态中产生除留的,这种多阶段最优化决策解决过程称为动态规划.\n&ensp;动态规划与分治法的区别是子问题通常不是独立的.\n\n### 3.4.2 描述算法\n&ensp;可采用动态规划的问题3个性质:\n&emsp;1) **最优化原理**:如果问题的最优解所包含的子问题的解也是最优的,则称该问题具有最优子结构,即满足最优化原理.\n&emsp;2) **无后效性**:即某阶段状态确定后,就不受之后的决策影响,即某状态以后过程不影响以前的状态,只与当前状态有关.\n&emsp;3) **有重叠子问题**:\n\n<br>\n&ensp;动态规划所处理的问题是一个多阶段决策问题,由初始状态开始,通过中间阶段决策的选择,达到结束状态.形成一个决策序列.\n\n&ensp;动态规划求解三要素:\n> (1) 问题的节点\n> (2) 每个阶段的状态\n> (3) 从前一个阶段转化到后一个阶段之间的递推关系\n\n&ensp;**最优决策表**\n> f(n, m) = max{f(n-1, m), f(n-1, m-w[n]) + P(n, m)}\n\n### 3.4.3 背包问题\n\n&ensp;问题描述:\n&emsp;有N件物品和一个体积为V的背包.(每种物品只有一件)第i件物品的体积是volume[i],价值是value[i],求解哪些物品装入背包可使这些物品的体积综合不超过背包体积,且价值总和最大.\n&ensp;解题思路:\n&emsp;p[i][j]代表前i件物品组合在容量为j的背包的最优解.将前i件物品放入容量为v的背包中这个子问题,若只考虑第i件物品的策略(放或不放),那么可以转化为一个只牵扯前i-1物品的问题.如果不放第i件物品,那么问题就转化为\"前i-1件物品放入容量为v的背包中,价值为p[i-1][v];如果放第i件物品,那么问题就转化为\"前i-1物品放入剩下的容量为v-volume[i]的背包中\",此时能获得的最大价值就是p[i-1][j-volume]再加上通过放入第i件物品获得的价值value[i].\n\n\n&ensp;**状态转移方程:**\n> p[i][j] = max{p[i-1][j-vol] + value[i], p[i-1][j]}\n&ensp;伪代码描述:\n```c\nfor i = 1...N\n    for j = V...0\n        p[j] = max{p[j-volume[i]] + value[i], p[j]};\n```\n\n\n### 3.4.4 最长公共子序列\n&ensp;问题描述:\n&emsp;一个散列S,如果分别是两个或多个已知数列的子序列,且是所有匹配此条件序列中最长的,则S称为已知序列的最长公共子序列(LCS)\n&ensp;给定两个序列X,Y,求两个序列的最长公共子序列.\n&ensp;截图思路:\n&emsp;\n\n\n&ensp;伪代码:\n```c\nfunction LCSLength(X[1..m], Y[1..n])\n    C = array(0..m, 0..n)\n    for i := 0..m\n        C[i, 0] = 0;\n    for j := 0..n\n        C[0, j] = 0\n    for i := 1..m\n        for j := 1..n\n            if X[i] = Y[j]\n                C[i, j] := C[i-1, j-1] + 1\n            else\n                C[i, j] := max(C[i, j-1], C[i-1,j])\n    \n    return C[m, n]\n```\n\n### 3.4.5 leetcode题目\n\n- 最大子序和\n- 编辑距离\n- 大礼包\n- 最长上升子序列\n\n\n## 3.5 回溯法\n\n\n### 3.5.1 基本概念\n\n### 3.5.2 八皇后问题\n\n\n\n### 3.5.3 leetcode题目\n\n\n## 4 参考链接\n\n- 复杂度速查表\nhttps://liam.page/2016/06/20/big-O-cheat-sheet/\n- 线性表\nhttps://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E8%A1%A8\n    - 单链表\nhttps://www.jianshu.com/p/73f0d8f807aa\n\n","slug":"数据结构与算法基础","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckwji3h3w000bakuubukv1ulc","content":"<h2 id=\"1-程序性能\"><a href=\"#1-程序性能\" class=\"headerlink\" title=\"1 程序性能\"></a>1 程序性能</h2><span id=\"more\"></span>\n\n<p> 程序性能是指运行程序所需要的内存大小(空间复杂度)和时间(时间复杂度),运行时间和占用空间是算法性能最关键的指标。<br> 软件程序性能衡量指标:<br> 响应时间、启动时间、执行时间、执行速度、计算资源分配、内存分配、磁盘吞吐量、网络吞吐量、负载承受能力</p>\n<h3 id=\"1-1-空间复杂度\"><a href=\"#1-1-空间复杂度\" class=\"headerlink\" title=\"1.1 空间复杂度\"></a>1.1 空间复杂度</h3><p> 空间复杂度(Space complexity)，算法完全运行所需存储空间。表示算法的存储空间与数据规模之间的增长关系：常量空间、线性空间、二维空间。<br> 算法在计算机存储器上所占用的存储空间，包括<strong>存储程序本身占用的存储空间，算法输入输出数据所占的存储空间和算法在运行过程中临时占用的存储空间</strong>。</p>\n<h3 id=\"1-2-时间复杂度\"><a href=\"#1-2-时间复杂度\" class=\"headerlink\" title=\"1.2 时间复杂度\"></a>1.2 时间复杂度</h3><p> 时间复杂度(Time complexity)，算法完全运行所需运算时间。时间复杂度通常用大O符合表示。</p>\n<p><img src=\"https://i.loli.net/2021/10/27/UxWCvnRQLYz5eiG.png\" alt=\"20211027233029\"></p>\n<h4 id=\"1-2-1-常见算法大O\"><a href=\"#1-2-1-常见算法大O\" class=\"headerlink\" title=\"1.2.1 常见算法大O\"></a>1.2.1 常见算法大O</h4><p>  常量阶O(1); 对数阶O(logn); 线性阶O(n); 线性对数阶O(nlogn); k次方阶O(n^k)<br><img src=\"https://i.loli.net/2021/10/28/GWOFcUi3qdVIlmf.png\" alt=\"20211028010721\"></p>\n<h4 id=\"1-2-2-常见数据结构\"><a href=\"#1-2-2-常见数据结构\" class=\"headerlink\" title=\"1.2.2 常见数据结构\"></a>1.2.2 常见数据结构</h4><h3 id=\"本章参考：\"><a href=\"#本章参考：\" class=\"headerlink\" title=\"本章参考：\"></a>本章参考：</h3><ul>\n<li>复杂度速查表<br><a href=\"https://liam.page/2016/06/20/big-O-cheat-sheet/\">https://liam.page/2016/06/20/big-O-cheat-sheet/</a></li>\n</ul>\n<h2 id=\"2-基本数据结构\"><a href=\"#2-基本数据结构\" class=\"headerlink\" title=\"2 基本数据结构\"></a>2 基本数据结构</h2><p>基本数据结构:<br> 字符,字符串:char,string<br> 整型:short,int,long;unsigned<br> 浮点型:float,double<br> 结构体:struct<br> 枚举:enum<br> 联合体:union<br> 自定义数据结构<br> 线性表<br>  数组:array<br>  链表:数据域,指针域<br>  队列<br>  栈<br>  堆<br> </p>\n<h3 id=\"2-1-线性表\"><a href=\"#2-1-线性表\" class=\"headerlink\" title=\"2.1 线性表\"></a>2.1 线性表</h3><p> 线性表是n个具有相同特性的数据元素的有序序列。线性表除第一个和最后一个数据元素之外，其他数据元素都是首尾相接的。<br> 数据在实际的物理存储中有两种形式：分散存储和集中存储,常见数据结构有栈、队列、字符串、链表等。<br> 两种情况下数据的存储问题：<br>  数据元素在内存中集中存储，采用顺序表示结构，简称“顺序存储”；<br>  数据元素在内存中分散存储，采用链式表示结构，简称“链式存储”</p>\n<h4 id=\"2-1-1-数组\"><a href=\"#2-1-1-数组\" class=\"headerlink\" title=\"2.1.1 数组\"></a>2.1.1 数组</h4><p> 数组是一批相同数据的集合。数组的三部分：地址 大小 和 空间。数组的保存形式为线性表。</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">10</span>]; <span class=\"comment\">// /[]内必须是常量/常量表达式(3+8)，不能是一个变量(x...)</span></span><br><span class=\"line\"><span class=\"comment\">// 数组初始化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> arr1[<span class=\"number\">3</span>] = {<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>};</span><br><span class=\"line\"><span class=\"keyword\">char</span> arr6[] = <span class=\"string\">\"abcdef\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *ptr = <span class=\"literal\">NULL</span>;<span class=\"comment\">//定义一个整型的指针变量，初始化为NULL</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *ptr = <span class=\"literal\">NULL</span>;<span class=\"comment\">//定义一个字符的指针变量，初始化为NULL</span></span><br><span class=\"line\"><span class=\"comment\">// 二维数组</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>][<span class=\"number\">5</span>] = { <span class=\"number\">0</span> };</span><br><span class=\"line\"><span class=\"comment\">// C 传递数组给函数</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myFunction</span><span class=\"params\">(<span class=\"keyword\">int</span> *param)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myFunction</span><span class=\"params\">(<span class=\"keyword\">int</span> param[<span class=\"number\">10</span>])</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myFunction</span><span class=\"params\">(<span class=\"keyword\">int</span> param[])</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// C 从函数返回数组</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> * <span class=\"title\">myFunction</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">...</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<br>\n\n<p><strong>二分搜索</strong><br> 基本思想是：首先选取表中间位置的记录，将其关键字与给定关键字 key 进行比较，若相等，则査找成功；若 key 值比该关键字值大，则要找的元素一定在右子表中，则继续对右子表进行折半查找：若 key 值比该关键宇值小，则要找的元素一定在左子表中，继续对左子表进行折半査找。如此递推，直到査找成功或査找失败（或査找范围为 0）<br> 二分搜索的时间复杂度为 <em><strong>对数时间O(logn)</strong></em></p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">binary_search</span><span class=\"params\">(<span class=\"keyword\">int</span> key, <span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> high = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid, count = <span class=\"number\">0</span>, count1 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt; high) {</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key &lt; a[mid]) {</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; a[mid]) {</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key == a[mid]) {</span><br><span class=\"line\">            count1++;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count1 == <span class=\"number\">0</span>) {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"2-1-2-单链表\"><a href=\"#2-1-2-单链表\" class=\"headerlink\" title=\"2.1.2 单链表\"></a>2.1.2 单链表</h4><p>  单链表元素之间有一个单独的指针链接。这种结构的链表可以使得从第一个元素遍历到最后一个元素</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListElmt_</span> {</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *data;  <span class=\"comment\">// 数据成员</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListElmt_</span> * <span class=\"title\">next</span>;</span> <span class=\"comment\">// next指针</span></span><br><span class=\"line\">} ListElmt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">List_</span> {</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key1, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key2);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*destroy)(<span class=\"keyword\">void</span> *data);</span><br><span class=\"line\">    ListElmt *head;</span><br><span class=\"line\">    ListElmt *tail;</span><br><span class=\"line\">} List;</span><br></pre></td></tr></tbody></table></figure>\n<p> 单链表操作：插入、删除、</p>\n<h4 id=\"2-1-3-双链表\"><a href=\"#2-1-3-双链表\" class=\"headerlink\" title=\"2.1.3 双链表\"></a>2.1.3 双链表</h4><p>  双向链表的元素通过两个指针链接。双向链表可以正向遍历，也可反向遍历。</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DListElmt_</span> {</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DListElmt_</span> *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DListElmt_</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">} DListElmt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DList_</span> {</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key1, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key2);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*destroy)(<span class=\"keyword\">void</span> *data);</span><br><span class=\"line\">    DListElmt *head;</span><br><span class=\"line\">    DListElmt *tail;</span><br><span class=\"line\">} DList;</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"2-1-4-跳表\"><a href=\"#2-1-4-跳表\" class=\"headerlink\" title=\"2.1.4 跳表\"></a>2.1.4 跳表</h4><p> 跳表对标的是平衡树(AVL Tree), 插入/删除/搜索都是 O(logn)的数据结构。</p>\n<h4 id=\"2-1-5-栈\"><a href=\"#2-1-5-栈\" class=\"headerlink\" title=\"2.1.5 栈\"></a>2.1.5 栈</h4><p> 栈按照后进先出(LIFO)的顺序存储和检索数据的数据结构，检索元素的顺序和存储元素顺序相反。<br> 可通过链表来实现栈stack,允许插入和删除的为栈顶(<code>top</code>),另一端为栈底(<code>bottom</code>),栈中每个元素为<code>frame</code>,栈只支持三个操作:<code>pop</code>,<code>top</code>,<code>push</code>.</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> List Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> stack_init list_init;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">stack_push</span><span class=\"params\">(Stack *<span class=\"built_in\">stack</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *data)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">stack_pop</span><span class=\"params\">(Stack *<span class=\"built_in\">stack</span>, <span class=\"keyword\">void</span> **data)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> stack_peek(stack) ((stack)-&gt;head == NULL ? NULL : (stack)-&gt;head-&gt;data);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> stack_size list_size;</span></span><br></pre></td></tr></tbody></table></figure>\n<p> c语言顺序栈</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 元素elem进栈</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">char</span> *a, <span class=\"keyword\">int</span> top, <span class=\"keyword\">char</span> elem)</span> </span>{</span><br><span class=\"line\">    a[++top] = elem;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> top;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 数据元素出栈</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">(<span class=\"keyword\">char</span> *a, <span class=\"keyword\">int</span> top)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top == <span class=\"number\">-1</span>) {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    top--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> top;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p> 链栈</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">lineStack</span> {</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">lineStack</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">}lineStack;</span><br><span class=\"line\"><span class=\"function\">lineStack* <span class=\"title\">push</span><span class=\"params\">(lineStack * <span class=\"built_in\">stack</span>,<span class=\"keyword\">char</span> a)</span></span>{</span><br><span class=\"line\">    lineStack * line=(lineStack*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(lineStack));</span><br><span class=\"line\">    line-&gt;data=a;</span><br><span class=\"line\">    line-&gt;next=<span class=\"built_in\">stack</span>;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>=line;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">stack</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\">lineStack * <span class=\"title\">pop</span><span class=\"params\">(lineStack * <span class=\"built_in\">stack</span>)</span></span>{</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">stack</span>) {</span><br><span class=\"line\">        lineStack * p=<span class=\"built_in\">stack</span>;</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>=<span class=\"built_in\">stack</span>-&gt;next;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"弹栈元素：%c \"</span>,p-&gt;data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">stack</span>) {</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"栈顶元素：%c\\n\"</span>,<span class=\"built_in\">stack</span>-&gt;data);</span><br><span class=\"line\">        }<span class=\"keyword\">else</span>{</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"栈已空\\n\"</span>);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    }<span class=\"keyword\">else</span>{</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"栈内没有元素\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">stack</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">stack</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"2-1-6-队列\"><a href=\"#2-1-6-队列\" class=\"headerlink\" title=\"2.1.6 队列\"></a>2.1.6 队列</h4><p> 队列，在前端(<code>front</code>)进行删除操作，后端(<code>rear</code>)进行插入操作; 按照先进先出(<code>FIFO</code>)的顺序存储和检索数据的高效数据结构，按照元素的存储顺序检索元素。<br> 队列也可通过数组和链表实现。</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> List Queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> queue_init list_init;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> queue_destroy list_destroy;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">queue_enqueue</span><span class=\"params\">(Queue *<span class=\"built_in\">queue</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *data)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">queue_dequeue</span><span class=\"params\">(Queue *<span class=\"built_in\">queue</span>, <span class=\"keyword\">void</span> **data)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> queue_peek(queue) ((queue)-&gt;head == NULL ? NULL : (queue)-&gt;head-&gt;data);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> queue_size list_size;</span></span><br></pre></td></tr></tbody></table></figure>\n\n<p> 队列应用：进程通信<br> 消息队列提供了从一个进程向另一个进程发送一个数据块的方法.每个数据库都认为含有一个类型,接收进程可以独立地接收含有不同类型的数据结构.</p>\n<p> linux内核 &lt;sys/msg.h&gt; 头文件中定义了消息队列结构</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msqid_ds</span> {</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipc_perm</span> <span class=\"title\">msg_perm</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msg</span>* <span class=\"title\">msg_first</span>;</span> <span class=\"comment\">// 指向队列中第一个消息</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msg</span>* <span class=\"title\">msg_last</span>;</span> <span class=\"comment\">// 队列中最后一个消息</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p> Linux消息队列函数接口</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建和访问一个消息队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">msgget</span><span class=\"params\">(<span class=\"keyword\">key_t</span> key, <span class=\"keyword\">int</span> msgflg)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 把消息添加到消息队列中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">msgsnd</span><span class=\"params\">(<span class=\"keyword\">int</span> msgid, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *msg_ptr, <span class=\"keyword\">size_t</span> msg_sz, <span class=\"keyword\">int</span> msgflg)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 从一个消息对立获取消息</span></span><br><span class=\"line\">msgrcv(<span class=\"keyword\">int</span> msgid, <span class=\"keyword\">void</span> *msg_ptr, <span class=\"keyword\">size_t</span> msg_st, <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> msgtype, <span class=\"keyword\">int</span> msgflg);</span><br><span class=\"line\"><span class=\"comment\">// 控制消息队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">msgctl</span><span class=\"params\">(<span class=\"keyword\">int</span> msgid, <span class=\"keyword\">int</span> command, struct msgid_ds *buf)</span></span>;</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"2-1-7-leetcode题目\"><a href=\"#2-1-7-leetcode题目\" class=\"headerlink\" title=\"2.1.7 leetcode题目\"></a>2.1.7 leetcode题目</h4><ul>\n<li><p>重复N次的元素&lt;数组&gt;</p>\n</li>\n<li><p>两数相加&lt;链表&gt;</p>\n</li>\n<li><p>基本计算器&lt;栈&gt;</p>\n</li>\n<li><p>设计循环队列&lt;队列&gt;</p>\n</li>\n</ul>\n<h3 id=\"2-2-哈希表\"><a href=\"#2-2-哈希表\" class=\"headerlink\" title=\"2.2 哈希表\"></a>2.2 哈希表</h3><p> 哈希表是一种最有效的检索方法，散列，从本质上看，一个哈希表包含一个数组，通过特殊的索引（键）来访问数组中的元素。哈希表主要思想是通过一个哈希函数，在所有可能的键和值直接建立映射表。<br> 每个记录的关键字k通过一种函数H(k)计算出函数值.此函数为哈希函数或散列函数.</p>\n<h4 id=\"2-2-1-哈希函数设计\"><a href=\"#2-2-1-哈希函数设计\" class=\"headerlink\" title=\"2.2.1 哈希函数设计\"></a>2.2.1 哈希函数设计</h4><ul>\n<li><p>直接地址法<br>关键字是整数类型的数据,直接地址的哈希函数H直接利用关键字求得哈希地址.<br>H(k) = aK*i + b</p>\n</li>\n<li><p>数字分析法<br>取关键字数中分布均匀的若干作为哈希地址</p>\n</li>\n<li><p>平方取中法<br>取关键字平方中间几位作为散列地址</p>\n</li>\n<li><p>折叠法</p>\n</li>\n<li><p>除留取余法<br>关键字K除以一个合适的不大于哈希表长度的正整数P,所得余数作为哈希地址.<br>H(K) = K MOD P</p>\n</li>\n</ul>\n<h4 id=\"2-2-2-哈希冲突\"><a href=\"#2-2-2-哈希冲突\" class=\"headerlink\" title=\"2.2.2 哈希冲突\"></a>2.2.2 哈希冲突</h4><p> 理想情况下,哈希函数在关键字和地址之间建立一对一关系.但H(k1) = H(k2),即为冲突.</p>\n<p> 解决哈希冲突常用方法:</p>\n<ul>\n<li>链地址法<br>将哈希值相同的元素构成一个同义词的单链表,并将单链表头指针存放在哈希表的地i个单元中,查找,插入和删除主要在同义词链表中.</li>\n</ul>\n<h4 id=\"2-2-3-uthash\"><a href=\"#2-2-3-uthash\" class=\"headerlink\" title=\"2.2.3 uthash\"></a>2.2.3 uthash</h4><p> uthash的插入、查找、删除的操作时间都是常量</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">\"uthash.h\"</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_struct</span> {</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;            <span class=\"comment\">/* we'll use this field as the key */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">    UT_hash_handle hh; <span class=\"comment\">/* makes this structure hashable */</span></span><br><span class=\"line\">};</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_struct</span> *<span class=\"title\">users</span> =</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_user</span><span class=\"params\">(struct my_struct *s)</span> </span>{</span><br><span class=\"line\">    HASH_ADD_INT(users, id, s );</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n<ul>\n<li>参考链接<br>官网:<a href=\"https://troydhanson.github.io/uthash/\">https://troydhanson.github.io/uthash/</a><br><a href=\"https://blog.csdn.net/fan_h_l/article/details/107241520\">https://blog.csdn.net/fan_h_l/article/details/107241520</a><br><a href=\"https://blog.csdn.net/whatday/article/details/95926766\">https://blog.csdn.net/whatday/article/details/95926766</a><br><a href=\"https://www.cnblogs.com/pam-sh/p/12827658.html\">https://www.cnblogs.com/pam-sh/p/12827658.html</a></li>\n</ul>\n<h4 id=\"2-2-4-leetcode题目\"><a href=\"#2-2-4-leetcode题目\" class=\"headerlink\" title=\"2.2.4 leetcode题目\"></a>2.2.4 leetcode题目</h4><ul>\n<li><p>设计哈希集合 </p>\n</li>\n<li><p>设计哈希映射</p>\n</li>\n<li><p>根据字符出现频率排序</p>\n</li>\n</ul>\n<h3 id=\"2-3-树与二叉树\"><a href=\"#2-3-树与二叉树\" class=\"headerlink\" title=\"2.3 树与二叉树\"></a>2.3 树与二叉树</h3><p> 树(tree)是一种用来模拟树状结构的抽象数据结构(ADT);</p>\n<p> 树的特点:</p>\n<ul>\n<li>没有父节点的节点称为根节点</li>\n<li>每个非根节点有且只有一个父节点</li>\n<li>除了根结点外,每个子节点可分为多个不相交的子树</li>\n<li>树中没有环路</li>\n</ul>\n<h4 id=\"2-3-1-概述\"><a href=\"#2-3-1-概述\" class=\"headerlink\" title=\"2.3.1 概述\"></a>2.3.1 概述</h4><ul>\n<li>节点的度: 一个节点含有子树的个数</li>\n<li>树的度: 树中最大的节点度</li>\n<li>叶节点: 度为零的节点</li>\n<li>父节点</li>\n<li>子节点</li>\n<li>兄弟节点</li>\n<li>节点的层次</li>\n<li>深度: 任意节点n,n的深度为从n到一片树叶的最长路径长,根的深度为0</li>\n<li>高度: 对任意节点n,n的高度为从n到一片树叶的最长路径长,所有树叶的高度为0.</li>\n<li>森林</li>\n</ul>\n<p> 树由称为结点的元素按照层次结构的方式组织而成。最顶端称为根。与根直接相连的结点称为根的子结点。子节点本身也可以有子结点。除根结点外，每个结点都有唯一的父结点。</p>\n<h4 id=\"2-3-2-树的种类\"><a href=\"#2-3-2-树的种类\" class=\"headerlink\" title=\"2.3.2 树的种类\"></a>2.3.2 树的种类</h4><ul>\n<li><p>无序树</p>\n</li>\n<li><p>有序树</p>\n<ul>\n<li><p>二叉树: 每个节点最多含有两个子树的树.</p>\n<ul>\n<li>完全二叉树: 对于一颗深度为d的二叉树,除第d层外,其他各层节点数目均达最大值,且第d层所有节点从左向右连续紧密排列.<ul>\n<li>满二叉树:所有叶节点都最底层的完全二叉树.</li>\n</ul>\n</li>\n<li>平衡二叉树(AVL):当且仅当任何节点的两颗子树的高度差不大于1的二叉树.</li>\n<li>排序二叉树:二叉查找树</li>\n</ul>\n</li>\n<li><p>霍夫曼树:带权路径最短的二叉树(又称最优二叉树).</p>\n</li>\n<li><p>B树:一种堆读写操作进行优化的自平衡二叉查找树,能够保持数据有序,拥有多余两个子树.</p>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>二叉树</td>\n<td>二叉查找树(BST) 笛卡尔树 MVP树 Top tree T树</td>\n</tr>\n<tr>\n<td>自平衡二叉查找树</td>\n<td>AVL树 红黑树</td>\n</tr>\n<tr>\n<td>B树</td>\n<td>B树 B+树</td>\n</tr>\n</tbody></table>\n<p> 树有多种结构形式，包括二叉树、。</p>\n<h4 id=\"2-3-3-二叉树\"><a href=\"#2-3-3-二叉树\" class=\"headerlink\" title=\"2.3.3 二叉树\"></a>2.3.3 二叉树</h4><p> 二叉树两个条件:</p>\n<ul>\n<li>本身是有序树</li>\n<li>树中包含的各个节点的度不能超过2,即只能是0,1或者2</li>\n</ul>\n<p> 二叉树中结点包含三部分：一个数据成员两个左右指针。</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTreeNode_</span> {</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTreeNode_</span> *<span class=\"title\">left</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTreeNode_</span> *<span class=\"title\">right</span>;</span></span><br><span class=\"line\">}BiTreeNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTree_</span> {</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*compare)(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key1, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key2);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*destroy)(<span class=\"keyword\">void</span> *data);</span><br><span class=\"line\">    BiTreeNode *root;</span><br><span class=\"line\">}BiTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*树根*/</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tree</span>{</span></span><br><span class=\"line\">\tNode * root;</span><br><span class=\"line\">}Tree;</span><br></pre></td></tr></tbody></table></figure>\n<p> 二叉树性质:</p>\n<ul>\n<li>二叉树中,第i层最多有 2^(i-1)个节点</li>\n<li>如果二叉树的深度为K,则二叉树最多有<code>2^K - 1</code>个节点</li>\n</ul>\n<p>满二叉树</p>\n<p>完全二叉树</p>\n<p> 树的周游算法包含先序遍历、中序遍历、后序遍历和层序遍历。</p>\n<ul>\n<li>先序遍历：先访问根结点，然后左子树，最后右子结点。深度优先思想。</li>\n<li>中序遍历：先访问左子结点，然后根结点，最后右子结点。</li>\n<li>后序遍历：先访问左子结点，然后右子结点，最后根结点。</li>\n<li>层序遍历：先访问树的根结点，然后依次向下层处理，按照从左向右的顺序访问每层结点。广度优先的策略。</li>\n</ul>\n<h4 id=\"2-3-4-二叉查找树-BST\"><a href=\"#2-3-4-二叉查找树-BST\" class=\"headerlink\" title=\"2.3.4 二叉查找树(BST)\"></a>2.3.4 二叉查找树(BST)</h4><p> 二叉查找树也称二叉搜索树,有序二叉树或排序二叉树,具有性质:</p>\n<ul>\n<li>若任意节点左子树不为空,则左子树上所有节点的值均小于它的根节点的值</li>\n<li>若任意节点的右子树不为空,则右子树所有节点的值均大于根节点的值</li>\n<li>任意节点的左,右子树也分别为二叉查找树</li>\n<li>没有键值相等的节点</li>\n</ul>\n<p> 一颗二叉搜索树要插入一个结点，要从根结点开始，一层一层往下，适当地移动左或右子结点上，当到达树的分支尽头时，执行插入操作。<br> 二叉搜索树是一种用于查找操作的高效数据结构，在最坏情况下，只需查找一个分支上的数据即可。<strong>查找,插入</strong>操作的复杂度是 <code>O(lgn)</code>，<strong>搜索,插入,删除</strong>复杂度等于树高,期望<code>O(logn)</code>,最坏为<code>O(n)</code>,(树退化为线性表)n为树中结点数。<br> 保持一棵树的平衡是指对于给定数量的结点，要使得树的高度尽可能短。</p>\n<p> 二叉查找树是由二叉树组成的专用于查找和搜索目的的一种数据结构。二叉搜索树中查找一个结点，从根结点开始一层一层向下查找，当遇到一个比目标结点值大的结点时，顺着该结点左子树继续查找，如果遇到的结点值小于目标结点，则顺着该结点的右子树查找，直到找到目标结点为止。</p>\n<p> <strong>查找算法</strong><br>  1.若b是空树,则搜索失败,否则;<br>  2.若x等于b的根节点的数据域之值,则查找成功;<br>  3.若x小于b的根节点的数据域之值,则搜索左子树<br>  4.查找右子树</p>\n<p> <strong>插入算法</strong><br>  1.若b是空树,则将s所指节点作为根节点插入;否则<br>  2.若<code>s-&gt;data</code>等于b的根节点的数据域值,则返回,否则;<br>  3.若<code>s-&gt;data</code>小于b的根节点的数据域之值,则把s所值节点插入到左子树中,否则<br>  4.把s所指节点插入到右子树中,(新插入节点总是叶子节点)</p>\n<p> <strong>删除算法</strong><br>  1.若*p节点为叶子节点,即PL(左子树)和PR(右子树)均为空树.由于删去叶子节点不破坏整棵树的结构,则只需修改其双亲节点的指针即可.</p>\n<h4 id=\"2-3-5-平衡树\"><a href=\"#2-3-5-平衡树\" class=\"headerlink\" title=\"2.3.5 平衡树\"></a>2.3.5 平衡树</h4><p> 平衡树是一类改进的二叉查找树,一般二叉查找树的查询复杂度与目标节点到树根的距离(深度)有关,因此当深度较大时,查询均摊复杂度会上升.<br> <strong>平衡指所有叶子的深度趋于平衡</strong>,更广义指树上所有可能查找的均摊复杂度偏低.<strong>平衡树的操作时基于树旋转操作,通过旋转可使树趋于平衡</strong>.<br> 对一颗查找树进行查询,新增,删除等操作,所花的时间与树的高度h成比例,并不与树的容量n成比例.</p>\n<ul>\n<li><strong>AVL树</strong></li>\n</ul>\n<p> 在<strong>AVL树中,任一节点对于的两颗子树的最大高度差为1,因此也称为高度平衡树</strong>.查找,插入和删除的平均和最坏时间复杂度是O(logn),增加和删除元素的操作则可能需要借由一层或多次旋转,以实现树的重新平衡.<br> <strong>高度为h的AVL树,总节点数最多为2^h-1</strong>; 当前节点数为N时,高度h最多为:</p>\n<blockquote>\n<p>log(5*0.5 * (N + 1)) - 2</p>\n</blockquote>\n<br>\n\n<ul>\n<li><strong>红黑树</strong></li>\n</ul>\n<p> 红黑树是一种自平衡二叉查找树,典型的用途是实现关联数组.红黑树实现复制,查找,插入和删除时间复杂度为O(logn)<br> 红黑树相对于AVL树,牺牲了部分平衡性以换取插入\\删除操作时少量的旋转操作,整体性能优于AVL树.</p>\n<p> 红黑树与AVL树的相比:<br>  AVL树在插入,删除节点时要把树调整到完全平衡,红黑树只要调整到大致平衡,因此通常红黑树的插入,删除节点性能稍好.<br>  AVL的查找性能通常比红黑树好<br>  如果节点的增删操作远小于查找操作,则应选择AVL;反之,红黑树可能更好.</p>\n<p> 红黑树是每个节点都带有颜色属性的二叉树,颜色为红色或黑色.在二叉查找树强制一般要求以外,对于任何有效的红黑树我们怎讲了弱小额外要求:<br>  1.节点是红或黑色<br>  2.根是黑色<br>  3.所有叶子都是黑色(叶子是NIL节点)<br>  4.每个红色节点必须右两个黑色的子节点.(从每个叶子到根的所有路径上不能右两个连续的红色节点.)<br>  5.从任一节点到其每个叶子的所有简单路径都包含相同苏后面的黑色节点.<br> 红黑树关键特性:<strong>从根到叶子的最长的可能路径不多于最短的可能路径的两倍长</strong>.红黑树是大致平衡的.插入,删除和查找某个值最坏情况下与树的高度成比例.</p>\n<ul>\n<li><strong>B+树</strong><br> B+树通常用于数据库和操作系统的文件系统中.<strong>B+树的特点是能够保持数据稳定有序,其插入与修改拥有较文档的对数时间复杂度</strong>.B+树元素自底向上插入,与二叉树相反.<br> B+树是内部节点可右在预定范围内的可变量目的子节点.因此,B+树不需要像其他自平衡二叉查找树那样重新平衡.</li>\n</ul>\n<h4 id=\"2-3-6-堆树和优先队列\"><a href=\"#2-3-6-堆树和优先队列\" class=\"headerlink\" title=\"2.3.6 堆树和优先队列\"></a>2.3.6 堆树和优先队列</h4><p> 堆(heap)也称为优先队列,堆遵守队列操作模式,在堆底插入元素,在堆顶取出元素,但堆中元素的排列不是按照到来的先后顺序,而是按照一定的有序顺序排列的.<br> 堆的本质是一个完全二叉树,可使用二叉树表示堆,也可使用数组来表示.<br> 堆的特性:<br>  必须是完全二叉树<br>  用数组实现<br>  任一节点的值是其子树所有节点的最大值或最小值<br>   最大值时,称为最大堆,也称大顶堆<br>   最小时,称为最小堆,也称小顶堆.<br> <strong>堆不能保证整棵树都是有序的,堆中的插入和删除操作时时间复杂度为O(log2n)</strong></p>\n<p> 堆是一颗二叉树，通常其子结点存储的值比父结点的值小，所以，根结点为树中最大的结点(大顶堆)。同样，根结点也可以是树中最小的结点(小顶堆)。能够快速确定包含最大(小)值的特点。<br> 堆时左平衡的树，随着结点增加，树会逐级从左至右增长。一个较好地表示左平衡二叉树的方式是，将结点通过层序遍历方式连续存储到一个数组中。</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Heap_</span> {</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*compare)(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key1, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key2);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*destroy)(<span class=\"keyword\">void</span> *data);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> **tree;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n\n\n<p> 堆排序，要排序的数据首先存储在一个堆中。从堆中一次取出一个结点。放置到有序数据集的尾部。当取出每个结点时，它的下一个结点就会浮现到堆的顶部。</p>\n<p> 优先队列是从堆衍生的数据结构。在优先队列中，数据保存在一个堆中，可快速确定下一个最高优先级的结点。</p>\n<p> 优先队列将数据按照优先级顺序排列。一个优先队列由许多有序元素构成，所以优先级最高的元素可以有效而快速的确定。</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> Heap PQueue;</span><br></pre></td></tr></tbody></table></figure>\n\n\n<h4 id=\"2-3-7-leetcode题目\"><a href=\"#2-3-7-leetcode题目\" class=\"headerlink\" title=\"2.3.7 leetcode题目\"></a>2.3.7 leetcode题目</h4><ul>\n<li>先序遍历构造二叉树</li>\n<li>从中序与后序遍历构造二叉树</li>\n<li>二叉树的层次遍历</li>\n<li>从二叉搜索树到更大和树</li>\n<li>二叉搜索树的最近公共祖先</li>\n<li>前K个高频单词&lt;堆&gt;</li>\n</ul>\n<h3 id=\"2-4-图\"><a href=\"#2-4-图\" class=\"headerlink\" title=\"2.4 图\"></a>2.4 图</h3><p> 图(Graph)是由顶点的有穷非空集合和顶点之间的边的集合组成,通常表示为:<code>G(V,E)</code>.其中,G表示一个图,V是入G中顶点的集合,E是图G中的集合.</p>\n<p> 图是一种灵活的数据结构，用来定义对象之间关联或联系的模型。对象由顶点表示，而对象直接的关系或关联则通过顶点之间的边来表示。<br> 图的访问方式：广度优先和深度优先。</p>\n<h4 id=\"2-4-1-基础知识\"><a href=\"#2-4-1-基础知识\" class=\"headerlink\" title=\"2.4.1 基础知识\"></a>2.4.1 基础知识</h4><p> 图由两种类型的元素组成：顶点和边，顶点代表对象，边则建立起对象之间的关系或关联。图的边可关联值或权重信息。<br> 图分为有向图和无向图。有向图，边是由两个顶点组成的有序对，具有特定的方向。边也可称为弧。无向图中，边是没有方向的。</p>\n<p> 图可分为连通图和非连通图</p>\n<h4 id=\"2-4-2-图表示\"><a href=\"#2-4-2-图表示\" class=\"headerlink\" title=\"2.4.2 图表示\"></a>2.4.2 图表示</h4><p> 图的表示方法是G=(V, E)，V代表顶点的集合，而E和V之间是二元关系。<br> 图中由两个重要关系邻接(adjacency)和关联(incidence)。邻接是两个顶点之间的关系。关联是顶点和边之间的关系。<br>邻接矩阵表示<br>邻接链表表示</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AdjList_</span> {</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *vertex;</span><br><span class=\"line\">    Set adjacent;</span><br><span class=\"line\">}AdjList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Graph_</span> {</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vcount;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ecount;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key1, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key2);</span><br><span class=\"line\">    List adjlists;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"2-4-3-图遍历\"><a href=\"#2-4-3-图遍历\" class=\"headerlink\" title=\"2.4.3 图遍历\"></a>2.4.3 图遍历</h4><p> 图的搜索方法：深度优先搜索和广度优先搜索。<br> 深度优先遍历(DFS)<br> 思路: 从图中某点v出发:<br>   1.访问顶点v<br>   2.从v的未被访问的邻接点中选取一个顶点w,从w出发进行深度优先遍历.<br>   3.重复上述两步,直到图中所有和v有路径相通的顶点都被访问.<br> 伪代码: </p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFS</span><span class=\"params\">(Vertex v)</span> </span>{</span><br><span class=\"line\">    vistied[v] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (v 的每个邻接点 w) {</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!visited[w]) {</span><br><span class=\"line\">            DFS(w);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<p> 广度优先遍历(BFS)<br> 思路:<br>   1.顶点v入队列<br>   2.当队列非空时则继续执行,否则算法结束.<br>   3.出队列取得队头顶点v’,访问顶点v 并标记顶点v已被访问.<br>   4.查找顶点v的第一个邻接顶点col<br>   5.若v的邻接顶点col未被访问过的,则col继续.<br>   6.查找顶点v的另一个新的邻接顶点col,转到步骤5入队列,直到顶点v的所有未被访问过的邻接点处理完,转到步骤2.</p>\n<p> 深度优先搜索和广度优先搜索,时间复杂度都为O(n^2)</p>\n<p>深度优先:从初始点出发,不断向前走,如果碰到死路,就往回走一步,尝试另一条路,直到发现目标位置.<br>广度优先:从初始点出发,把所有可能的路径都走一遍,如果里面没有目标位置,则尝试把所有两步能够到的位置都走一遍,看有没有目标位置.</p>\n<h4 id=\"2-4-4-最短路径\"><a href=\"#2-4-4-最短路径\" class=\"headerlink\" title=\"2.4.4 最短路径\"></a>2.4.4 最短路径</h4><p><strong>迪杰斯特拉Dijkstra算法</strong><br> Dijkstra算法适用于权值为正的图.<br> Dijkstra算法属于单源算法,即只能求出某点到其它点最短距离,并不能得出任意两点之间的最短距离.<br> 在源点可达的情况下,Dijkstra算法的时间复杂度时 <code>O(ElogV)</code><br> 算法步骤:<br>  1.将所有边初始化为无穷大<br>  2.旋转一个开始的顶点,添加到优先队列中.<br>  3.对于该点的所有邻接顶点进行判断,如果到该点的距离小于原先的值,则该值进行更新.<br>  4.将该点所有邻接顶点添加到优先队列中.<br>  5.从优先队列中挑选除一个路径值最小的顶点,将其弹出,作为新的顶点,重复步骤3,4,5<br>  6.直到所有点都被处理过一次.</p>\n<p><strong>弗洛伊德Floyd算法</strong><br> Floyd算法是一个经典的动态规划算法.首先目标是寻找从点<code>i</code>到<code>j</code>的最短路径.<br> <strong>Floyd算法可以求出任意两点的最短距离.时间复杂度:</strong><code>O(你^3)</code><br> 从任意节点i到任意节点j的最短路径不外乎2种可能:<br>  1.是之间从i到j<br>  2是从i到经过若干个节点k到j</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n; k++) {</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) {</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) {</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (A[i][j] &gt; (A[i][k] + A[k][j])) {</span><br><span class=\"line\">                A[i][j] = A[i][k] + A[k][j];</span><br><span class=\"line\">                path[i][j] = k;</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n\n<h4 id=\"2-4-5-拓扑排序\"><a href=\"#2-4-5-拓扑排序\" class=\"headerlink\" title=\"2.4.5 拓扑排序\"></a>2.4.5 拓扑排序</h4><p> 拓扑排序是一个有向无环图(DAG)的所有顶点的线性序列.且该序列必须满足下面两个条件:</p>\n<ul>\n<li>每个顶点出现且只出现一次</li>\n<li>若存在一条顶点A到顶点B的路径,那么在序列中顶点A出现在顶点B的前面.</li>\n</ul>\n<h4 id=\"2-4-6-leetcode题目\"><a href=\"#2-4-6-leetcode题目\" class=\"headerlink\" title=\"2.4.6 leetcode题目\"></a>2.4.6 leetcode题目</h4><ul>\n<li>判断二分图</li>\n<li>克隆图</li>\n<li>找到小镇的法官</li>\n<li>钥匙和房间</li>\n<li>最短路径访问所有节点</li>\n</ul>\n<h2 id=\"3-常见算法\"><a href=\"#3-常见算法\" class=\"headerlink\" title=\"3 常见算法\"></a>3 常见算法</h2><h3 id=\"3-1-分治法\"><a href=\"#3-1-分治法\" class=\"headerlink\" title=\"3.1 分治法\"></a>3.1 分治法</h3><p> 把复杂问题分成两个或者更多相同或相似的子问题，再把子问题分成更小的子问题…，直到可以直接求解，原问题的解为子问题解的合并。<br> 分治法应用：排序算法(快速排序、归并排序);傅里叶变换()。</p>\n<h4 id=\"3-1-1-概述\"><a href=\"#3-1-1-概述\" class=\"headerlink\" title=\"3.1.1 概述\"></a>3.1.1 概述</h4><p> 分治法思想:将一个难以直接解决的大问题,分割成一些规模小的相同问题,分而治之.</p>\n<h4 id=\"3-1-2-策略\"><a href=\"#3-1-2-策略\" class=\"headerlink\" title=\"3.1.2 策略\"></a>3.1.2 策略</h4><p> 分治策略:对于一个规模为n的问题,若该问题可以容易解决则直接解决,否则将其分解为k个规模较小的子问题,子问题之间相互独立且与原问题形式相同,可递归求解.分治通常用递归实现.</p>\n<h4 id=\"3-1-3-应用场景\"><a href=\"#3-1-3-应用场景\" class=\"headerlink\" title=\"3.1.3 应用场景\"></a>3.1.3 应用场景</h4><p> 分治法特征:</p>\n<ul>\n<li>问题缩小到一定程度可容易解决.</li>\n<li>问题可分解为若干个规模较小的相同问题,即问题具有最优子结构性质.</li>\n<li>子问题的解可合并为该问题的解.</li>\n<li>问题分解的子问题相互独立,子问题之间不包含公告子问题.</li>\n</ul>\n<h4 id=\"3-1-4-步骤\"><a href=\"#3-1-4-步骤\" class=\"headerlink\" title=\"3.1.4 步骤\"></a>3.1.4 步骤</h4><p> 分治法一层递归步骤:</p>\n<ul>\n<li><ol>\n<li><strong>分解</strong>:将原问题分解为若干规模较小,相互独立,与原问题形式相同的子问题.</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li><strong>解决</strong>:若子问题可直接求解,则直接求解,否则递归解各个子问题.</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li><strong>合并</strong>:将各个子问题的解合并为原问题的解.</li>\n</ol>\n</li>\n</ul>\n<p> </p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<br>\n\n<h4 id=\"3-1-5-应用\"><a href=\"#3-1-5-应用\" class=\"headerlink\" title=\"3.1.5 应用\"></a>3.1.5 应用</h4><blockquote>\n<p>分治思维方式：二分搜索;大整数乘法;合并排序;快速排序。</p>\n</blockquote>\n<p> 求x的n次幂<br> 对数复杂度O(logn)</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) {</span><br><span class=\"line\">        result = power(x, n/<span class=\"number\">2</span>) * power(x, n / <span class=\"number\">2</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        result = power(x, (n + <span class=\"number\">1</span>) / <span class=\"number\">2</span>) * power(x, (n - <span class=\"number\">1</span>) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h4 id=\"3-1-6-leetcode题目\"><a href=\"#3-1-6-leetcode题目\" class=\"headerlink\" title=\"3.1.6 leetcode题目\"></a>3.1.6 leetcode题目</h4><ul>\n<li>搜索二维矩阵II</li>\n<li>求众数</li>\n<li>合并k个排序链表</li>\n</ul>\n<h2 id=\"3-2-排序算法\"><a href=\"#3-2-排序算法\" class=\"headerlink\" title=\"3.2 排序算法\"></a>3.2 排序算法</h2><p> 各种排序算法，主要包括：插入排序、快速排序、归并排序、计数排序和技术排序。二分查找，</p>\n<h3 id=\"3-2-1-冒泡排序\"><a href=\"#3-2-1-冒泡排序\" class=\"headerlink\" title=\"3.2.1 冒泡排序\"></a>3.2.1 冒泡排序</h3><p><strong>冒泡排序算法复杂度是O(n^2)</strong></p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = arr.length;</span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> out = size - <span class=\"number\">1</span>; out &gt; <span class=\"number\">0</span>; out--) {</span><br><span class=\"line\">        <span class=\"comment\">// </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> in = <span class=\"number\">0</span>; in &lt; out; in++) {</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[in] &gt; arr[in + <span class=\"number\">1</span>]) {</span><br><span class=\"line\">                swap(arr, in, in + <span class=\"number\">1</span>);</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"3-2-2-选择排序\"><a href=\"#3-2-2-选择排序\" class=\"headerlink\" title=\"3.2.2 选择排序\"></a>3.2.2 选择排序</h3><p> 选择排序算法时间复杂度为O(n^2)</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = arr.lenght;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> out = <span class=\"number\">0</span>; out &lt; size; out++) {</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mixIndex = out;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> in = out - <span class=\"number\">1</span>; in &lt; size; in++) {</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[mixIndex] &gt; arr[in]) {</span><br><span class=\"line\">                mixIndex = in;</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mixIndex != out) {</span><br><span class=\"line\">            swap(arr, mixIndex, out);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"3-2-3-插入排序\"><a href=\"#3-2-3-插入排序\" class=\"headerlink\" title=\"3.2.3 插入排序\"></a>3.2.3 插入排序</h3><p> 插入排序每次从无序数据集合中取出一个元素，插入到已经排好序的数据集中适当位置，使数据集仍然有序。插入排序不需要额外空间。时间复杂度O(n2)</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = arr.lenght;</span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> out = <span class=\"number\">1</span>; out &lt; size; out++) {</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = arr[out];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> in = out;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// </span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (in - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; arr[in - <span class=\"number\">1</span>] &gt; temp) {</span><br><span class=\"line\">            arr[in] = arr[in - <span class=\"number\">1</span>];</span><br><span class=\"line\">            in--;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in != out) {</span><br><span class=\"line\">            arr[in] = temp;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">issort</span><span class=\"params\">(<span class=\"keyword\">void</span> *data, <span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> esize, <span class=\"keyword\">int</span> (*compare)(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key1, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key2))</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *a = data;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *key;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((key = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(esize)) == <span class=\"literal\">NULL</span>) {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt; size; j++) {</span><br><span class=\"line\">        i = j - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; compare(&amp;a[i * esize], key) &gt; <span class=\"number\">0</span>) {</span><br><span class=\"line\">            mamcpy(&amp;a[(i + <span class=\"number\">1</span>) * esize], &amp;a[i * esize], esize);</span><br><span class=\"line\">            i--;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(&amp;a[(i + <span class=\"number\">1</span>) * esize], key, esize);</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(key);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"3-2-4-希尔排序\"><a href=\"#3-2-4-希尔排序\" class=\"headerlink\" title=\"3.2.4 希尔排序\"></a>3.2.4 希尔排序</h3><p> 希尔排序时间复杂度O(n*(logn)^2)</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = arr.lenght;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (h &lt;= size / <span class=\"number\">3</span>) {</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        h = h * <span class=\"number\">3</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (h &gt; <span class=\"number\">0</span>) {</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> out = h; out &lt; size; out++) {</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = arr[out];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> in = out;</span><br><span class=\"line\">            <span class=\"comment\">//</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (in - h &gt;= <span class=\"number\">0</span> &amp;&amp; arr[in - h] &gt; temp) {</span><br><span class=\"line\">                arr[in] = arr[in - h];</span><br><span class=\"line\">                in = in - h;</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (in != out) {</span><br><span class=\"line\">                arr[in] = temp;</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        h = (h - <span class=\"number\">1</span>) / <span class=\"number\">3</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"3-2-5-归并排序\"><a href=\"#3-2-5-归并排序\" class=\"headerlink\" title=\"3.2.5 归并排序\"></a>3.2.5 归并排序</h3><p> 归并排序是一种分支排序算法。归并排序需要额外存储空间来完成排序。</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  x &lt; y ? x : y;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *a = arr;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *b = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(len * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> seg, start;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (seg = <span class=\"number\">1</span>; seg &lt; len; seg += seg) {</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (start )</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"3-2-6-快速排序\"><a href=\"#3-2-6-快速排序\" class=\"headerlink\" title=\"3.2.6 快速排序\"></a>3.2.6 快速排序</h3><p> 快速排序是一种分治排序算法。不需要额外存储空间，时间复杂度O(nlgn)</p>\n<p> 快速排序三个步骤：</p>\n<ul>\n<li>分：设定一个分割值并将数据分为两部分。</li>\n<li>治：分别在两部分使用递归方式继续使用快速排序方法。</li>\n<li>和：对分割部分排序直至完成。</li>\n</ul>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">Range</span> {</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> start;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end;</span><br><span class=\"line\">} Range;</span><br><span class=\"line\"><span class=\"function\">Range <span class=\"title\">now_Range</span><span class=\"params\">(<span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    Range r;</span><br><span class=\"line\">    r.start = s;</span><br><span class=\"line\">    r.end = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *x, <span class=\"keyword\">int</span> *y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t = *x;</span><br><span class=\"line\">    *x = *y;</span><br><span class=\"line\">    *y = t;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>) {</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    Range r[len];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    r[p++] = new_Range(<span class=\"number\">0</span>, len - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p) {</span><br><span class=\"line\">        Range range = r[--p];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (range.start &gt;= range.end) {</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = arr[(range.start + range.end) / <span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = range.start;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = range.end;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> {</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (arr[left] &lt; mid) {</span><br><span class=\"line\">                ++left;</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (arr[right] &gt; mid) {</span><br><span class=\"line\">                --right;</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left &lt;= right) {</span><br><span class=\"line\">                swap(&amp;arr[left], &amp;arr[right]);</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">            }</span><br><span class=\"line\">        } <span class=\"keyword\">while</span> (left &lt;= right);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (range.start &lt; right) {</span><br><span class=\"line\">            r[p++] = new_Range(range.start, right);</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (range.end &gt; left) {</span><br><span class=\"line\">            r[p++] = new_Range(left, range.end);</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n\n\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *arr, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &lt; high) {</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = low;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = high;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = arr[low];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; j) {</span><br><span class=\"line\">            <span class=\"comment\">// 从右向左找第一个小于k的数</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= k) {</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            }</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &lt; j) {</span><br><span class=\"line\">                arr[i++] = arr[j];</span><br><span class=\"line\">            }</span><br><span class=\"line\">            <span class=\"comment\">// 从左向右找第一个大于等于k的数</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; arr[i] &lt; k) {</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            }</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &lt; j) {</span><br><span class=\"line\">                arr[j--] = arr[i];</span><br><span class=\"line\">            }</span><br><span class=\"line\">        }</span><br><span class=\"line\">        arr[i] = k;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 递归调用</span></span><br><span class=\"line\">        QuickSort(arr, low, i - <span class=\"number\">1</span>); <span class=\"comment\">// 排序k左边</span></span><br><span class=\"line\">        QuickSort(arr, i + <span class=\"number\">1</span>, high); <span class=\"comment\">// 排序k右边</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">( <span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j, p, tmp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>)  <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    p = a[n / <span class=\"number\">2</span>];   <span class=\"comment\">// Get the middle element as pivot ..</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>, j = n <span class=\"number\">-1</span>;; i++, j--) {</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (a[i] &lt; p)</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p &lt; a[j])</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( i &gt;= j)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        tmp = a[i]; a[i] = a[j]; a[j] = tmp;    <span class=\"comment\">//swap both ..</span></span><br><span class=\"line\">    }   </span><br><span class=\"line\"></span><br><span class=\"line\">    quick_sort( a, i); </span><br><span class=\"line\">    quick_sort( a + i, n - i); </span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure>\n<p><strong>qsort/sort函数</strong><br> 在c语言库函数中已经实现了qsort函数,<br> qsort函数用法:</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">qsort</span><span class=\"params\">(<span class=\"keyword\">void</span> *base, <span class=\"keyword\">int</span> nelem, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> (*fcmp)(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *))</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 参数:1 带排序数组首地址, nelem 数组中待排元素数量  width 各元素所在空间大小  *fcmp 指向函数的指针</span></span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// int 数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *a, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (*(<span class=\"keyword\">int</span> *)a - *(<span class=\"keyword\">int</span> *)b);</span><br><span class=\"line\">}</span><br><span class=\"line\">qsort(arr, n, <span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>]), cmp);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// char 数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">com</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *a, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *(<span class=\"keyword\">char</span> *)a - *(<span class=\"keyword\">char</span> *)b;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">char</span> word[<span class=\"number\">100</span>];</span><br><span class=\"line\">qsort(word, <span class=\"number\">100</span>, <span class=\"keyword\">sizeof</span>(word[<span class=\"number\">0</span>]), cmp);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// double 类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *a, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *(<span class=\"keyword\">double</span> *)a &gt; *(<span class=\"keyword\">double</span>*)b ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"keyword\">double</span> in[<span class=\"number\">100</span>];</span><br><span class=\"line\">qsort(in, <span class=\"number\">100</span>, <span class=\"keyword\">sizeof</span>(in[<span class=\"number\">00</span>]), cmp);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// struct 结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Sample</span> {</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">}st[<span class=\"number\">100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *a, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (*(Sample *)a).data &gt; (*(Sampel *)b).data ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\">qsort(s, <span class=\"number\">100</span>, <span class=\"keyword\">sizeof</span>(s[<span class=\"number\">0</span>]), cmp);</span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *a, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Sample</span> *<span class=\"title\">c</span> =</span> (Sample *)a;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Sample</span> *<span class=\"title\">d</span> =</span> (Sample *)b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c-&gt;x != d-&gt;x) {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c-&gt;x - d-&gt;x;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d-&gt;y - c-&gt;y;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">qsort(s,<span class=\"number\">100</span>,<span class=\"keyword\">sizeof</span>(s[<span class=\"number\">0</span>]),cmp);</span><br><span class=\"line\"></span><br><span class=\"line\">truct Sample</span><br><span class=\"line\">{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> str[<span class=\"number\">100</span>];</span><br><span class=\"line\">}s[<span class=\"number\">100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按照结构体中字符串str的字典顺序排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *a, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">strcmp</span>((*(Sample *)a)-&gt;str , (*(Sample *)b)-&gt;str);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">qsort(s,<span class=\"number\">100</span>,<span class=\"keyword\">sizeof</span>(s[<span class=\"number\">0</span>]),cmp);</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"3-2-7-堆排序\"><a href=\"#3-2-7-堆排序\" class=\"headerlink\" title=\"3.2.7 堆排序\"></a>3.2.7 堆排序</h3><p> 桶排序算法基本原理：把数组中的所有元素分为若干个数据块，也就是若干个桶，然后对每个桶里的数据进行排序，最后将所有桶里的数据依次排列。<br> 存在两个问题：<br> (1)怎样划分数据块，也就是分几个桶，每个桶放哪几个数据。<br> (2)对每个数据块里的数据怎样排序。</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sdtio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> {</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> key;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">} KeyNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bucket_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> keys[], <span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> bucket_size)</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">    KeyNode **bucket_table = (KeyNode **)mallov(bucket_size * <span class=\"keyword\">sizeof</span>(KeyNode*));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; bucket_size;i++) {</span><br><span class=\"line\">        bucket_table[i] = (KeyNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(KeyNode));</span><br><span class=\"line\">        bucket_table[i]-&gt;key = <span class=\"number\">0</span>;</span><br><span class=\"line\">        bucket_table[i]-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; size;j++) {</span><br><span class=\"line\">\t\tKeyNode *node = (KeyNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(KeyNode));</span><br><span class=\"line\">\t\tnode-&gt;key = keys[j];</span><br><span class=\"line\">\t\tnode-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = keys[j]/<span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tKeyNode *p = bucket_table[index];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p-&gt;key == <span class=\"number\">0</span>) {</span><br><span class=\"line\">\t\t\tbucket_table[index]-&gt;next = node;</span><br><span class=\"line\">\t\t\t(bucket_table[index]-&gt;key)++;</span><br><span class=\"line\">\t\t}<span class=\"keyword\">else</span> {</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(p-&gt;next != <span class=\"literal\">NULL</span> &amp;&amp; p-&gt;next-&gt;key &lt;= node-&gt;key)</span><br><span class=\"line\">\t\t\t\tp = p-&gt;next;</span><br><span class=\"line\">\t\t\tnode-&gt;next = p-&gt;next;</span><br><span class=\"line\">\t\t\tp-&gt;next = node;</span><br><span class=\"line\">\t\t\t(bucket_table[index]-&gt;key)++;</span><br><span class=\"line\">\t\t}</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\t<span class=\"comment\">//print result</span></span><br><span class=\"line\">\tKeyNode * k = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; bucket_size;i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(k = bucket_table[i]-&gt;next;k!=<span class=\"literal\">NULL</span>;k=k-&gt;next)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,k-&gt;key);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> raw[] = {<span class=\"number\">49</span>,<span class=\"number\">38</span>,<span class=\"number\">65</span>,<span class=\"number\">97</span>,<span class=\"number\">76</span>,<span class=\"number\">13</span>,<span class=\"number\">27</span>,<span class=\"number\">49</span>};</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> size = <span class=\"keyword\">sizeof</span>(raw)/<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>);</span><br><span class=\"line\">\tbucket_sort(raw,size,<span class=\"number\">10</span>);</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Heapify</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lef_child = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right_child = <span class=\"number\">2</span> * i + <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lef_child &lt; size &amp;&amp; A[lef_child] &gt; A[max]) {</span><br><span class=\"line\">        max = lef_child;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right_child &lt; size &amp;&amp; A[right_child] &gt; A[max]) {</span><br><span class=\"line\">        max = right_child;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (max != i) {</span><br><span class=\"line\">        Swap(A, i max);</span><br><span class=\"line\">        Heapify(A, max, size);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">BuildHeap</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> heap_size = n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heap_size / w - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) {</span><br><span class=\"line\">        Heapify(A, i, heap_size);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> heap_size;</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">HeapSort</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> heap_size = BuildHeap(A, n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (heap_size &gt; <span class=\"number\">1</span>) {</span><br><span class=\"line\">        Swap(A, <span class=\"number\">0</span>, heap_size);</span><br><span class=\"line\">        Heap(A, <span class=\"number\">0</span>, heap_size);</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"3-2-8-leetcode排序\"><a href=\"#3-2-8-leetcode排序\" class=\"headerlink\" title=\"3.2.8 leetcode排序\"></a>3.2.8 leetcode排序</h3><h2 id=\"3-3-贪心算法\"><a href=\"#3-3-贪心算法\" class=\"headerlink\" title=\"3.3 贪心算法\"></a>3.3 贪心算法</h2><h3 id=\"3-3-1-基本概念\"><a href=\"#3-3-1-基本概念\" class=\"headerlink\" title=\"3.3.1 基本概念\"></a>3.3.1 基本概念</h3><p> 贪心算法:在对问题求解时,总是做出在当前是最好的选择,即不考虑整体最优,仅考虑局部最优解.<br> 贪心算法没有固定算法框架,算法关键是贪心策略的选择.他想算法不是所有问题都得到最优解,选择贪心策略必须具备无后效性,即某个状态以后的过程不会影响一起的状态,只与当前状态有关.</p>\n<h3 id=\"3-3-2-描述\"><a href=\"#3-3-2-描述\" class=\"headerlink\" title=\"3.3.2 描述\"></a>3.3.2 描述</h3><p> 贪心算法实现步骤:<br> 1.建立数学模型描述问题<br> 2.把求解的问题分成若干个子问题<br> 3.对每个子问题求解,得到子问题的局部最优解<br> 4.把子问题的解局部最优解合成原来问题的一个解.<br> 实现算法过程:</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (能朝给定总目标前进一步)</span><br><span class=\"line\">{</span><br><span class=\"line\">    利用可行的决策,求出可行解的一个解元素;</span><br><span class=\"line\">}</span><br><span class=\"line\">由所有解元素组合成问题的一个可行解</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"3-3-3-应用\"><a href=\"#3-3-3-应用\" class=\"headerlink\" title=\"3.3.3. 应用\"></a>3.3.3. 应用</h3><p><strong>最小生成树算法</strong><br> 贪心算法经典实践:最小生成树算法<br> 设<code>G=(V, E)</code>是无向连通带权图,即一个网络,E中的每一条边<code>(v,w)</code> 的全为 <code>c[v][w]</code>.如果G的字体 G’ 是一颗包含 G 的所有顶点的数,则称 G’ 为 G 的生成树.生成树上各边权的总和称为生成树的耗费.在 G 的所有生成树中,耗费最小的生成树称为 G 的最小生成树.<br> 最小伸出手的性质:<br>  设<code>G=(V, E)</code>是连通带权图, U是V的真子集.如果(u,v)属于E,且u属于E,v属于V-U,且在所有这样的边中,(u,v)的权c[u][v]最小,那么一定存在G的一颗最小生成树,它亦是(u,v)为其中一条边,这个性质有时也称为MST性质.</p>\n<p><strong>Prim算法</strong><br>  设<code>G=(V, E)</code>是连通带权图, V={1,2,…,n}.构造G的最小生成树Prim算法的基本思想是:**首先置S={1},然后,只有S是V的真子集,就进行如下的贪心选择:选取满足添加i属于S,j属于V-S,且c[i][j]最小的边,将顶点j添加到S中.这个过程一直进行到S=V时为止.在这个过程中选取到的所有边恰好构成G的一颗最小生成树.</p>\n<h3 id=\"3-3-4-leetcode题目\"><a href=\"#3-3-4-leetcode题目\" class=\"headerlink\" title=\"3.3.4 leetcode题目\"></a>3.3.4 leetcode题目</h3><ul>\n<li>柠檬水找零</li>\n<li>分发饼干</li>\n</ul>\n<h2 id=\"3-4-动态规划\"><a href=\"#3-4-动态规划\" class=\"headerlink\" title=\"3.4 动态规划\"></a>3.4 动态规划</h2><p> 动态规划(<code>DP</code>):是一种通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法.常用于重叠子问题和最优子结构性质的问题,动态规划时间通常远小于朴素解法.</p>\n<h3 id=\"3-4-1-基本概念\"><a href=\"#3-4-1-基本概念\" class=\"headerlink\" title=\"3.4.1 基本概念\"></a>3.4.1 基本概念</h3><p> 动态规划:要解一个给定问题,需要解其不同部分(即子问题),再根据子问题的解以得出原问题的解.通常子问题非常相似,子问题解算出后,将其记录.<br> 动态规划过程是:每次决策依赖于当前状态,又随即引起状态转移.一个决策序列就是在变化的状态中产生除留的,这种多阶段最优化决策解决过程称为动态规划.<br> 动态规划与分治法的区别是子问题通常不是独立的.</p>\n<h3 id=\"3-4-2-描述算法\"><a href=\"#3-4-2-描述算法\" class=\"headerlink\" title=\"3.4.2 描述算法\"></a>3.4.2 描述算法</h3><p> 可采用动态规划的问题3个性质:<br> 1) <strong>最优化原理</strong>:如果问题的最优解所包含的子问题的解也是最优的,则称该问题具有最优子结构,即满足最优化原理.<br> 2) <strong>无后效性</strong>:即某阶段状态确定后,就不受之后的决策影响,即某状态以后过程不影响以前的状态,只与当前状态有关.<br> 3) <strong>有重叠子问题</strong>:</p>\n<br>\n 动态规划所处理的问题是一个多阶段决策问题,由初始状态开始,通过中间阶段决策的选择,达到结束状态.形成一个决策序列.\n\n<p> 动态规划求解三要素:</p>\n<blockquote>\n<p>(1) 问题的节点<br>(2) 每个阶段的状态<br>(3) 从前一个阶段转化到后一个阶段之间的递推关系</p>\n</blockquote>\n<p> <strong>最优决策表</strong></p>\n<blockquote>\n<p>f(n, m) = max{f(n-1, m), f(n-1, m-w[n]) + P(n, m)}</p>\n</blockquote>\n<h3 id=\"3-4-3-背包问题\"><a href=\"#3-4-3-背包问题\" class=\"headerlink\" title=\"3.4.3 背包问题\"></a>3.4.3 背包问题</h3><p> 问题描述:<br> 有N件物品和一个体积为V的背包.(每种物品只有一件)第i件物品的体积是volume[i],价值是value[i],求解哪些物品装入背包可使这些物品的体积综合不超过背包体积,且价值总和最大.<br> 解题思路:<br> p[i][j]代表前i件物品组合在容量为j的背包的最优解.将前i件物品放入容量为v的背包中这个子问题,若只考虑第i件物品的策略(放或不放),那么可以转化为一个只牵扯前i-1物品的问题.如果不放第i件物品,那么问题就转化为”前i-1件物品放入容量为v的背包中,价值为p[i-1][v];如果放第i件物品,那么问题就转化为”前i-1物品放入剩下的容量为v-volume[i]的背包中”,此时能获得的最大价值就是p[i-1][j-volume]再加上通过放入第i件物品获得的价值value[i].</p>\n<p> <strong>状态转移方程:</strong></p>\n<blockquote>\n<p>p[i][j] = max{p[i-1][j-vol] + value[i], p[i-1][j]}<br> 伪代码描述:</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1.</span>..N</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j = V..<span class=\"number\">.0</span></span><br><span class=\"line\">        p[j] = max{p[j-volume[i]] + value[i], p[j]};</span><br></pre></td></tr></tbody></table></figure>\n\n\n<h3 id=\"3-4-4-最长公共子序列\"><a href=\"#3-4-4-最长公共子序列\" class=\"headerlink\" title=\"3.4.4 最长公共子序列\"></a>3.4.4 最长公共子序列</h3><p> 问题描述:<br> 一个散列S,如果分别是两个或多个已知数列的子序列,且是所有匹配此条件序列中最长的,则S称为已知序列的最长公共子序列(LCS)<br> 给定两个序列X,Y,求两个序列的最长公共子序列.<br> 截图思路:<br> </p>\n<p> 伪代码:</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">LCSLength</span><span class=\"params\">(X[<span class=\"number\">1.</span>.m], Y[<span class=\"number\">1.</span>.n])</span></span></span><br><span class=\"line\"><span class=\"function\">    C </span>= <span class=\"built_in\">array</span>(<span class=\"number\">0.</span>.m, <span class=\"number\">0.</span>.n)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0.</span>.m</span><br><span class=\"line\">        C[i, <span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0.</span>.n</span><br><span class=\"line\">        C[<span class=\"number\">0</span>, j] = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">1.</span>.m</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j := <span class=\"number\">1.</span>.n</span><br><span class=\"line\">            <span class=\"keyword\">if</span> X[i] = Y[j]</span><br><span class=\"line\">                C[i, j] := C[i<span class=\"number\">-1</span>, j<span class=\"number\">-1</span>] + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                C[i, j] := max(C[i, j<span class=\"number\">-1</span>], C[i<span class=\"number\">-1</span>,j])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> C[m, n]</span><br></pre></td></tr></tbody></table></figure>\n\n<h3 id=\"3-4-5-leetcode题目\"><a href=\"#3-4-5-leetcode题目\" class=\"headerlink\" title=\"3.4.5 leetcode题目\"></a>3.4.5 leetcode题目</h3><ul>\n<li>最大子序和</li>\n<li>编辑距离</li>\n<li>大礼包</li>\n<li>最长上升子序列</li>\n</ul>\n<h2 id=\"3-5-回溯法\"><a href=\"#3-5-回溯法\" class=\"headerlink\" title=\"3.5 回溯法\"></a>3.5 回溯法</h2><h3 id=\"3-5-1-基本概念\"><a href=\"#3-5-1-基本概念\" class=\"headerlink\" title=\"3.5.1 基本概念\"></a>3.5.1 基本概念</h3><h3 id=\"3-5-2-八皇后问题\"><a href=\"#3-5-2-八皇后问题\" class=\"headerlink\" title=\"3.5.2 八皇后问题\"></a>3.5.2 八皇后问题</h3><h3 id=\"3-5-3-leetcode题目\"><a href=\"#3-5-3-leetcode题目\" class=\"headerlink\" title=\"3.5.3 leetcode题目\"></a>3.5.3 leetcode题目</h3><h2 id=\"4-参考链接\"><a href=\"#4-参考链接\" class=\"headerlink\" title=\"4 参考链接\"></a>4 参考链接</h2><ul>\n<li>复杂度速查表<br><a href=\"https://liam.page/2016/06/20/big-O-cheat-sheet/\">https://liam.page/2016/06/20/big-O-cheat-sheet/</a></li>\n<li>线性表<br><a href=\"https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E8%A1%A8\">https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E8%A1%A8</a><ul>\n<li>单链表<br><a href=\"https://www.jianshu.com/p/73f0d8f807aa\">https://www.jianshu.com/p/73f0d8f807aa</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"abbrlink":"XMWJ68","length":23007,"excerpt":"<h2 id=\"1-程序性能\"><a href=\"#1-程序性能\" class=\"headerlink\" title=\"1 程序性能\"></a>1 程序性能</h2>","more":"<p>&ensp;程序性能是指运行程序所需要的内存大小(空间复杂度)和时间(时间复杂度),运行时间和占用空间是算法性能最关键的指标。<br>&ensp;软件程序性能衡量指标:<br>&emsp;响应时间、启动时间、执行时间、执行速度、计算资源分配、内存分配、磁盘吞吐量、网络吞吐量、负载承受能力</p>\n<h3 id=\"1-1-空间复杂度\"><a href=\"#1-1-空间复杂度\" class=\"headerlink\" title=\"1.1 空间复杂度\"></a>1.1 空间复杂度</h3><p>&ensp;空间复杂度(Space complexity)，算法完全运行所需存储空间。表示算法的存储空间与数据规模之间的增长关系：常量空间、线性空间、二维空间。<br>&ensp;算法在计算机存储器上所占用的存储空间，包括<strong>存储程序本身占用的存储空间，算法输入输出数据所占的存储空间和算法在运行过程中临时占用的存储空间</strong>。</p>\n<h3 id=\"1-2-时间复杂度\"><a href=\"#1-2-时间复杂度\" class=\"headerlink\" title=\"1.2 时间复杂度\"></a>1.2 时间复杂度</h3><p>&ensp;时间复杂度(Time complexity)，算法完全运行所需运算时间。时间复杂度通常用大O符合表示。</p>\n<p><img src=\"https://i.loli.net/2021/10/27/UxWCvnRQLYz5eiG.png\" alt=\"20211027233029\"></p>\n<h4 id=\"1-2-1-常见算法大O\"><a href=\"#1-2-1-常见算法大O\" class=\"headerlink\" title=\"1.2.1 常见算法大O\"></a>1.2.1 常见算法大O</h4><p>&emsp; 常量阶O(1); 对数阶O(logn); 线性阶O(n); 线性对数阶O(nlogn); k次方阶O(n^k)<br><img src=\"https://i.loli.net/2021/10/28/GWOFcUi3qdVIlmf.png\" alt=\"20211028010721\"></p>\n<h4 id=\"1-2-2-常见数据结构\"><a href=\"#1-2-2-常见数据结构\" class=\"headerlink\" title=\"1.2.2 常见数据结构\"></a>1.2.2 常见数据结构</h4><h3 id=\"本章参考：\"><a href=\"#本章参考：\" class=\"headerlink\" title=\"本章参考：\"></a>本章参考：</h3><ul>\n<li>复杂度速查表<br><a href=\"https://liam.page/2016/06/20/big-O-cheat-sheet/\">https://liam.page/2016/06/20/big-O-cheat-sheet/</a></li>\n</ul>\n<h2 id=\"2-基本数据结构\"><a href=\"#2-基本数据结构\" class=\"headerlink\" title=\"2 基本数据结构\"></a>2 基本数据结构</h2><p>基本数据结构:<br>&emsp;字符,字符串:char,string<br>&emsp;整型:short,int,long;unsigned<br>&emsp;浮点型:float,double<br>&emsp;结构体:struct<br>&emsp;枚举:enum<br>&emsp;联合体:union<br>&ensp;自定义数据结构<br>&emsp;线性表<br>&emsp;&ensp;数组:array<br>&emsp;&ensp;链表:数据域,指针域<br>&emsp;&ensp;队列<br>&emsp;&ensp;栈<br>&emsp;&ensp;堆<br>&emsp;</p>\n<h3 id=\"2-1-线性表\"><a href=\"#2-1-线性表\" class=\"headerlink\" title=\"2.1 线性表\"></a>2.1 线性表</h3><p>&ensp;线性表是n个具有相同特性的数据元素的有序序列。线性表除第一个和最后一个数据元素之外，其他数据元素都是首尾相接的。<br>&ensp;数据在实际的物理存储中有两种形式：分散存储和集中存储,常见数据结构有栈、队列、字符串、链表等。<br>&ensp;两种情况下数据的存储问题：<br>&emsp; 数据元素在内存中集中存储，采用顺序表示结构，简称“顺序存储”；<br>&emsp; 数据元素在内存中分散存储，采用链式表示结构，简称“链式存储”</p>\n<h4 id=\"2-1-1-数组\"><a href=\"#2-1-1-数组\" class=\"headerlink\" title=\"2.1.1 数组\"></a>2.1.1 数组</h4><p>&emsp;数组是一批相同数据的集合。数组的三部分：地址 大小 和 空间。数组的保存形式为线性表。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">10</span>]; <span class=\"comment\">// /[]内必须是常量/常量表达式(3+8)，不能是一个变量(x...)</span></span><br><span class=\"line\"><span class=\"comment\">// 数组初始化</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> arr1[<span class=\"number\">3</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">char</span> arr6[] = <span class=\"string\">&quot;abcdef&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 指针</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> *ptr = <span class=\"literal\">NULL</span>;<span class=\"comment\">//定义一个整型的指针变量，初始化为NULL</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> *ptr = <span class=\"literal\">NULL</span>;<span class=\"comment\">//定义一个字符的指针变量，初始化为NULL</span></span><br><span class=\"line\"><span class=\"comment\">// 二维数组</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> arr[<span class=\"number\">3</span>][<span class=\"number\">5</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// C 传递数组给函数</span></span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myFunction</span><span class=\"params\">(<span class=\"keyword\">int</span> *param)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myFunction</span><span class=\"params\">(<span class=\"keyword\">int</span> param[<span class=\"number\">10</span>])</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">myFunction</span><span class=\"params\">(<span class=\"keyword\">int</span> param[])</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"comment\">// C 从函数返回数组</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> * <span class=\"title\">myFunction</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<br>\n\n<p><strong>二分搜索</strong><br>&emsp;基本思想是：首先选取表中间位置的记录，将其关键字与给定关键字 key 进行比较，若相等，则査找成功；若 key 值比该关键字值大，则要找的元素一定在右子表中，则继续对右子表进行折半查找：若 key 值比该关键宇值小，则要找的元素一定在左子表中，继续对左子表进行折半査找。如此递推，直到査找成功或査找失败（或査找范围为 0）<br>&emsp;二分搜索的时间复杂度为 <em><strong>对数时间O(logn)</strong></em></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">binary_search</span><span class=\"params\">(<span class=\"keyword\">int</span> key, <span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> high = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid, count = <span class=\"number\">0</span>, count1 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(low &lt; high) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (key &lt; a[mid]) &#123;</span><br><span class=\"line\">            high = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; a[mid]) &#123;</span><br><span class=\"line\">            low = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key == a[mid]) &#123;</span><br><span class=\"line\">            count1++;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (count1 == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-2-单链表\"><a href=\"#2-1-2-单链表\" class=\"headerlink\" title=\"2.1.2 单链表\"></a>2.1.2 单链表</h4><p>&emsp; 单链表元素之间有一个单独的指针链接。这种结构的链表可以使得从第一个元素遍历到最后一个元素</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListElmt_</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *data;  <span class=\"comment\">// 数据成员</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ListElmt_</span> * <span class=\"title\">next</span>;</span> <span class=\"comment\">// next指针</span></span><br><span class=\"line\">&#125; ListElmt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">List_</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key1, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key2);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*destroy)(<span class=\"keyword\">void</span> *data);</span><br><span class=\"line\">    ListElmt *head;</span><br><span class=\"line\">    ListElmt *tail;</span><br><span class=\"line\">&#125; List;</span><br></pre></td></tr></table></figure>\n<p>&emsp;单链表操作：插入、删除、</p>\n<h4 id=\"2-1-3-双链表\"><a href=\"#2-1-3-双链表\" class=\"headerlink\" title=\"2.1.3 双链表\"></a>2.1.3 双链表</h4><p>&emsp; 双向链表的元素通过两个指针链接。双向链表可以正向遍历，也可反向遍历。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DListElmt_</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DListElmt_</span> *<span class=\"title\">prev</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DListElmt_</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; DListElmt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">DList_</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key1, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key2);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*destroy)(<span class=\"keyword\">void</span> *data);</span><br><span class=\"line\">    DListElmt *head;</span><br><span class=\"line\">    DListElmt *tail;</span><br><span class=\"line\">&#125; DList;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-4-跳表\"><a href=\"#2-1-4-跳表\" class=\"headerlink\" title=\"2.1.4 跳表\"></a>2.1.4 跳表</h4><p>&emsp;跳表对标的是平衡树(AVL Tree), 插入/删除/搜索都是 O(logn)的数据结构。</p>\n<h4 id=\"2-1-5-栈\"><a href=\"#2-1-5-栈\" class=\"headerlink\" title=\"2.1.5 栈\"></a>2.1.5 栈</h4><p>&emsp;栈按照后进先出(LIFO)的顺序存储和检索数据的数据结构，检索元素的顺序和存储元素顺序相反。<br>&emsp;可通过链表来实现栈stack,允许插入和删除的为栈顶(<code>top</code>),另一端为栈底(<code>bottom</code>),栈中每个元素为<code>frame</code>,栈只支持三个操作:<code>pop</code>,<code>top</code>,<code>push</code>.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> List Stack;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> stack_init list_init;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">stack_push</span><span class=\"params\">(Stack *<span class=\"built_in\">stack</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *data)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">stack_pop</span><span class=\"params\">(Stack *<span class=\"built_in\">stack</span>, <span class=\"keyword\">void</span> **data)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> stack_peek(stack) ((stack)-&gt;head == NULL ? NULL : (stack)-&gt;head-&gt;data);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> stack_size list_size;</span></span><br></pre></td></tr></table></figure>\n<p>&emsp;c语言顺序栈</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 元素elem进栈</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">push</span><span class=\"params\">(<span class=\"keyword\">char</span> *a, <span class=\"keyword\">int</span> top, <span class=\"keyword\">char</span> elem)</span> </span>&#123;</span><br><span class=\"line\">    a[++top] = elem;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> top;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 数据元素出栈</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">pop</span><span class=\"params\">(<span class=\"keyword\">char</span> *a, <span class=\"keyword\">int</span> top)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (top == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    top--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>&emsp;链栈</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">lineStack</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">lineStack</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;lineStack;</span><br><span class=\"line\"><span class=\"function\">lineStack* <span class=\"title\">push</span><span class=\"params\">(lineStack * <span class=\"built_in\">stack</span>,<span class=\"keyword\">char</span> a)</span></span>&#123;</span><br><span class=\"line\">    lineStack * line=(lineStack*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(lineStack));</span><br><span class=\"line\">    line-&gt;data=a;</span><br><span class=\"line\">    line-&gt;next=<span class=\"built_in\">stack</span>;</span><br><span class=\"line\">    <span class=\"built_in\">stack</span>=line;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">stack</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">lineStack * <span class=\"title\">pop</span><span class=\"params\">(lineStack * <span class=\"built_in\">stack</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">stack</span>) &#123;</span><br><span class=\"line\">        lineStack * p=<span class=\"built_in\">stack</span>;</span><br><span class=\"line\">        <span class=\"built_in\">stack</span>=<span class=\"built_in\">stack</span>-&gt;next;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;弹栈元素：%c &quot;</span>,p-&gt;data);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">stack</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈顶元素：%c\\n&quot;</span>,<span class=\"built_in\">stack</span>-&gt;data);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈已空\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(p);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;栈内没有元素&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">stack</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">stack</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-6-队列\"><a href=\"#2-1-6-队列\" class=\"headerlink\" title=\"2.1.6 队列\"></a>2.1.6 队列</h4><p>&emsp;队列，在前端(<code>front</code>)进行删除操作，后端(<code>rear</code>)进行插入操作; 按照先进先出(<code>FIFO</code>)的顺序存储和检索数据的高效数据结构，按照元素的存储顺序检索元素。<br>&emsp;队列也可通过数组和链表实现。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> List Queue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> queue_init list_init;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> queue_destroy list_destroy;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">queue_enqueue</span><span class=\"params\">(Queue *<span class=\"built_in\">queue</span>, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *data)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">queue_dequeue</span><span class=\"params\">(Queue *<span class=\"built_in\">queue</span>, <span class=\"keyword\">void</span> **data)</span></span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> queue_peek(queue) ((queue)-&gt;head == NULL ? NULL : (queue)-&gt;head-&gt;data);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> queue_size list_size;</span></span><br></pre></td></tr></table></figure>\n\n<p>&ensp;队列应用：进程通信<br>&emsp;消息队列提供了从一个进程向另一个进程发送一个数据块的方法.每个数据库都认为含有一个类型,接收进程可以独立地接收含有不同类型的数据结构.</p>\n<p>&emsp;linux内核 &lt;sys/msg.h&gt; 头文件中定义了消息队列结构</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msqid_ds</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ipc_perm</span> <span class=\"title\">msg_perm</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msg</span>* <span class=\"title\">msg_first</span>;</span> <span class=\"comment\">// 指向队列中第一个消息</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">msg</span>* <span class=\"title\">msg_last</span>;</span> <span class=\"comment\">// 队列中最后一个消息</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>&emsp;Linux消息队列函数接口</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建和访问一个消息队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">msgget</span><span class=\"params\">(<span class=\"keyword\">key_t</span> key, <span class=\"keyword\">int</span> msgflg)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 把消息添加到消息队列中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">msgsnd</span><span class=\"params\">(<span class=\"keyword\">int</span> msgid, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *msg_ptr, <span class=\"keyword\">size_t</span> msg_sz, <span class=\"keyword\">int</span> msgflg)</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 从一个消息对立获取消息</span></span><br><span class=\"line\">msgrcv(<span class=\"keyword\">int</span> msgid, <span class=\"keyword\">void</span> *msg_ptr, <span class=\"keyword\">size_t</span> msg_st, <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> msgtype, <span class=\"keyword\">int</span> msgflg);</span><br><span class=\"line\"><span class=\"comment\">// 控制消息队列</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">msgctl</span><span class=\"params\">(<span class=\"keyword\">int</span> msgid, <span class=\"keyword\">int</span> command, struct msgid_ds *buf)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-1-7-leetcode题目\"><a href=\"#2-1-7-leetcode题目\" class=\"headerlink\" title=\"2.1.7 leetcode题目\"></a>2.1.7 leetcode题目</h4><ul>\n<li><p>重复N次的元素&lt;数组&gt;</p>\n</li>\n<li><p>两数相加&lt;链表&gt;</p>\n</li>\n<li><p>基本计算器&lt;栈&gt;</p>\n</li>\n<li><p>设计循环队列&lt;队列&gt;</p>\n</li>\n</ul>\n<h3 id=\"2-2-哈希表\"><a href=\"#2-2-哈希表\" class=\"headerlink\" title=\"2.2 哈希表\"></a>2.2 哈希表</h3><p>&ensp;哈希表是一种最有效的检索方法，散列，从本质上看，一个哈希表包含一个数组，通过特殊的索引（键）来访问数组中的元素。哈希表主要思想是通过一个哈希函数，在所有可能的键和值直接建立映射表。<br>&ensp;每个记录的关键字k通过一种函数H(k)计算出函数值.此函数为哈希函数或散列函数.</p>\n<h4 id=\"2-2-1-哈希函数设计\"><a href=\"#2-2-1-哈希函数设计\" class=\"headerlink\" title=\"2.2.1 哈希函数设计\"></a>2.2.1 哈希函数设计</h4><ul>\n<li><p>直接地址法<br>关键字是整数类型的数据,直接地址的哈希函数H直接利用关键字求得哈希地址.<br>H(k) = aK*i + b</p>\n</li>\n<li><p>数字分析法<br>取关键字数中分布均匀的若干作为哈希地址</p>\n</li>\n<li><p>平方取中法<br>取关键字平方中间几位作为散列地址</p>\n</li>\n<li><p>折叠法</p>\n</li>\n<li><p>除留取余法<br>关键字K除以一个合适的不大于哈希表长度的正整数P,所得余数作为哈希地址.<br>H(K) = K MOD P</p>\n</li>\n</ul>\n<h4 id=\"2-2-2-哈希冲突\"><a href=\"#2-2-2-哈希冲突\" class=\"headerlink\" title=\"2.2.2 哈希冲突\"></a>2.2.2 哈希冲突</h4><p>&ensp;理想情况下,哈希函数在关键字和地址之间建立一对一关系.但H(k1) = H(k2),即为冲突.</p>\n<p>&emsp;解决哈希冲突常用方法:</p>\n<ul>\n<li>链地址法<br>将哈希值相同的元素构成一个同义词的单链表,并将单链表头指针存放在哈希表的地i个单元中,查找,插入和删除主要在同义词链表中.</li>\n</ul>\n<h4 id=\"2-2-3-uthash\"><a href=\"#2-2-3-uthash\" class=\"headerlink\" title=\"2.2.3 uthash\"></a>2.2.3 uthash</h4><p>&ensp;uthash的插入、查找、删除的操作时间都是常量</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&quot;uthash.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;            <span class=\"comment\">/* we&#x27;ll use this field as the key */</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> name[<span class=\"number\">10</span>];</span><br><span class=\"line\">    UT_hash_handle hh; <span class=\"comment\">/* makes this structure hashable */</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">my_struct</span> *<span class=\"title\">users</span> =</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_user</span><span class=\"params\">(struct my_struct *s)</span> </span>&#123;</span><br><span class=\"line\">    HASH_ADD_INT(users, id, s );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>参考链接<br>官网:<a href=\"https://troydhanson.github.io/uthash/\">https://troydhanson.github.io/uthash/</a><br><a href=\"https://blog.csdn.net/fan_h_l/article/details/107241520\">https://blog.csdn.net/fan_h_l/article/details/107241520</a><br><a href=\"https://blog.csdn.net/whatday/article/details/95926766\">https://blog.csdn.net/whatday/article/details/95926766</a><br><a href=\"https://www.cnblogs.com/pam-sh/p/12827658.html\">https://www.cnblogs.com/pam-sh/p/12827658.html</a></li>\n</ul>\n<h4 id=\"2-2-4-leetcode题目\"><a href=\"#2-2-4-leetcode题目\" class=\"headerlink\" title=\"2.2.4 leetcode题目\"></a>2.2.4 leetcode题目</h4><ul>\n<li><p>设计哈希集合 </p>\n</li>\n<li><p>设计哈希映射</p>\n</li>\n<li><p>根据字符出现频率排序</p>\n</li>\n</ul>\n<h3 id=\"2-3-树与二叉树\"><a href=\"#2-3-树与二叉树\" class=\"headerlink\" title=\"2.3 树与二叉树\"></a>2.3 树与二叉树</h3><p>&emsp;树(tree)是一种用来模拟树状结构的抽象数据结构(ADT);</p>\n<p>&emsp;树的特点:</p>\n<ul>\n<li>没有父节点的节点称为根节点</li>\n<li>每个非根节点有且只有一个父节点</li>\n<li>除了根结点外,每个子节点可分为多个不相交的子树</li>\n<li>树中没有环路</li>\n</ul>\n<h4 id=\"2-3-1-概述\"><a href=\"#2-3-1-概述\" class=\"headerlink\" title=\"2.3.1 概述\"></a>2.3.1 概述</h4><ul>\n<li>节点的度: 一个节点含有子树的个数</li>\n<li>树的度: 树中最大的节点度</li>\n<li>叶节点: 度为零的节点</li>\n<li>父节点</li>\n<li>子节点</li>\n<li>兄弟节点</li>\n<li>节点的层次</li>\n<li>深度: 任意节点n,n的深度为从n到一片树叶的最长路径长,根的深度为0</li>\n<li>高度: 对任意节点n,n的高度为从n到一片树叶的最长路径长,所有树叶的高度为0.</li>\n<li>森林</li>\n</ul>\n<p>&emsp;树由称为结点的元素按照层次结构的方式组织而成。最顶端称为根。与根直接相连的结点称为根的子结点。子节点本身也可以有子结点。除根结点外，每个结点都有唯一的父结点。</p>\n<h4 id=\"2-3-2-树的种类\"><a href=\"#2-3-2-树的种类\" class=\"headerlink\" title=\"2.3.2 树的种类\"></a>2.3.2 树的种类</h4><ul>\n<li><p>无序树</p>\n</li>\n<li><p>有序树</p>\n<ul>\n<li><p>二叉树: 每个节点最多含有两个子树的树.</p>\n<ul>\n<li>完全二叉树: 对于一颗深度为d的二叉树,除第d层外,其他各层节点数目均达最大值,且第d层所有节点从左向右连续紧密排列.<ul>\n<li>满二叉树:所有叶节点都最底层的完全二叉树.</li>\n</ul>\n</li>\n<li>平衡二叉树(AVL):当且仅当任何节点的两颗子树的高度差不大于1的二叉树.</li>\n<li>排序二叉树:二叉查找树</li>\n</ul>\n</li>\n<li><p>霍夫曼树:带权路径最短的二叉树(又称最优二叉树).</p>\n</li>\n<li><p>B树:一种堆读写操作进行优化的自平衡二叉查找树,能够保持数据有序,拥有多余两个子树.</p>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>二叉树</td>\n<td>二叉查找树(BST) 笛卡尔树 MVP树 Top tree T树</td>\n</tr>\n<tr>\n<td>自平衡二叉查找树</td>\n<td>AVL树 红黑树</td>\n</tr>\n<tr>\n<td>B树</td>\n<td>B树 B+树</td>\n</tr>\n</tbody></table>\n<p>&emsp;树有多种结构形式，包括二叉树、。</p>\n<h4 id=\"2-3-3-二叉树\"><a href=\"#2-3-3-二叉树\" class=\"headerlink\" title=\"2.3.3 二叉树\"></a>2.3.3 二叉树</h4><p>&ensp;二叉树两个条件:</p>\n<ul>\n<li>本身是有序树</li>\n<li>树中包含的各个节点的度不能超过2,即只能是0,1或者2</li>\n</ul>\n<p>&emsp;二叉树中结点包含三部分：一个数据成员两个左右指针。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTreeNode_</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *data;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTreeNode_</span> *<span class=\"title\">left</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTreeNode_</span> *<span class=\"title\">right</span>;</span></span><br><span class=\"line\">&#125;BiTreeNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BiTree_</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*compare)(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key1, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key2);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*destroy)(<span class=\"keyword\">void</span> *data);</span><br><span class=\"line\">    BiTreeNode *root;</span><br><span class=\"line\">&#125;BiTree;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*树根*/</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tree</span>&#123;</span></span><br><span class=\"line\">\tNode * root;</span><br><span class=\"line\">&#125;Tree;</span><br></pre></td></tr></table></figure>\n<p>&ensp;二叉树性质:</p>\n<ul>\n<li>二叉树中,第i层最多有 2^(i-1)个节点</li>\n<li>如果二叉树的深度为K,则二叉树最多有<code>2^K - 1</code>个节点</li>\n</ul>\n<p>满二叉树</p>\n<p>完全二叉树</p>\n<p>&emsp;树的周游算法包含先序遍历、中序遍历、后序遍历和层序遍历。</p>\n<ul>\n<li>先序遍历：先访问根结点，然后左子树，最后右子结点。深度优先思想。</li>\n<li>中序遍历：先访问左子结点，然后根结点，最后右子结点。</li>\n<li>后序遍历：先访问左子结点，然后右子结点，最后根结点。</li>\n<li>层序遍历：先访问树的根结点，然后依次向下层处理，按照从左向右的顺序访问每层结点。广度优先的策略。</li>\n</ul>\n<h4 id=\"2-3-4-二叉查找树-BST\"><a href=\"#2-3-4-二叉查找树-BST\" class=\"headerlink\" title=\"2.3.4 二叉查找树(BST)\"></a>2.3.4 二叉查找树(BST)</h4><p>&ensp;二叉查找树也称二叉搜索树,有序二叉树或排序二叉树,具有性质:</p>\n<ul>\n<li>若任意节点左子树不为空,则左子树上所有节点的值均小于它的根节点的值</li>\n<li>若任意节点的右子树不为空,则右子树所有节点的值均大于根节点的值</li>\n<li>任意节点的左,右子树也分别为二叉查找树</li>\n<li>没有键值相等的节点</li>\n</ul>\n<p>&emsp;一颗二叉搜索树要插入一个结点，要从根结点开始，一层一层往下，适当地移动左或右子结点上，当到达树的分支尽头时，执行插入操作。<br>&emsp;二叉搜索树是一种用于查找操作的高效数据结构，在最坏情况下，只需查找一个分支上的数据即可。<strong>查找,插入</strong>操作的复杂度是 <code>O(lgn)</code>，<strong>搜索,插入,删除</strong>复杂度等于树高,期望<code>O(logn)</code>,最坏为<code>O(n)</code>,(树退化为线性表)n为树中结点数。<br>&emsp;保持一棵树的平衡是指对于给定数量的结点，要使得树的高度尽可能短。</p>\n<p>&emsp;二叉查找树是由二叉树组成的专用于查找和搜索目的的一种数据结构。二叉搜索树中查找一个结点，从根结点开始一层一层向下查找，当遇到一个比目标结点值大的结点时，顺着该结点左子树继续查找，如果遇到的结点值小于目标结点，则顺着该结点的右子树查找，直到找到目标结点为止。</p>\n<p>&ensp;<strong>查找算法</strong><br>&emsp;&emsp;1.若b是空树,则搜索失败,否则;<br>&emsp;&emsp;2.若x等于b的根节点的数据域之值,则查找成功;<br>&emsp;&emsp;3.若x小于b的根节点的数据域之值,则搜索左子树<br>&emsp;&emsp;4.查找右子树</p>\n<p>&ensp;<strong>插入算法</strong><br>&emsp;&emsp;1.若b是空树,则将s所指节点作为根节点插入;否则<br>&emsp;&emsp;2.若<code>s-&gt;data</code>等于b的根节点的数据域值,则返回,否则;<br>&emsp;&emsp;3.若<code>s-&gt;data</code>小于b的根节点的数据域之值,则把s所值节点插入到左子树中,否则<br>&emsp;&emsp;4.把s所指节点插入到右子树中,(新插入节点总是叶子节点)</p>\n<p>&ensp;<strong>删除算法</strong><br>&emsp;&emsp;1.若*p节点为叶子节点,即PL(左子树)和PR(右子树)均为空树.由于删去叶子节点不破坏整棵树的结构,则只需修改其双亲节点的指针即可.</p>\n<h4 id=\"2-3-5-平衡树\"><a href=\"#2-3-5-平衡树\" class=\"headerlink\" title=\"2.3.5 平衡树\"></a>2.3.5 平衡树</h4><p>&ensp;平衡树是一类改进的二叉查找树,一般二叉查找树的查询复杂度与目标节点到树根的距离(深度)有关,因此当深度较大时,查询均摊复杂度会上升.<br>&ensp;<strong>平衡指所有叶子的深度趋于平衡</strong>,更广义指树上所有可能查找的均摊复杂度偏低.<strong>平衡树的操作时基于树旋转操作,通过旋转可使树趋于平衡</strong>.<br>&ensp;对一颗查找树进行查询,新增,删除等操作,所花的时间与树的高度h成比例,并不与树的容量n成比例.</p>\n<ul>\n<li><strong>AVL树</strong></li>\n</ul>\n<p>&emsp;在<strong>AVL树中,任一节点对于的两颗子树的最大高度差为1,因此也称为高度平衡树</strong>.查找,插入和删除的平均和最坏时间复杂度是O(logn),增加和删除元素的操作则可能需要借由一层或多次旋转,以实现树的重新平衡.<br>&emsp;<strong>高度为h的AVL树,总节点数最多为2^h-1</strong>; 当前节点数为N时,高度h最多为:</p>\n<blockquote>\n<p>log(5*0.5 * (N + 1)) - 2</p>\n</blockquote>\n<br>\n\n<ul>\n<li><strong>红黑树</strong></li>\n</ul>\n<p>&ensp;红黑树是一种自平衡二叉查找树,典型的用途是实现关联数组.红黑树实现复制,查找,插入和删除时间复杂度为O(logn)<br>&ensp;红黑树相对于AVL树,牺牲了部分平衡性以换取插入\\删除操作时少量的旋转操作,整体性能优于AVL树.</p>\n<p>&emsp;红黑树与AVL树的相比:<br>&emsp;&emsp;AVL树在插入,删除节点时要把树调整到完全平衡,红黑树只要调整到大致平衡,因此通常红黑树的插入,删除节点性能稍好.<br>&emsp;&emsp;AVL的查找性能通常比红黑树好<br>&emsp;&emsp;如果节点的增删操作远小于查找操作,则应选择AVL;反之,红黑树可能更好.</p>\n<p>&ensp;红黑树是每个节点都带有颜色属性的二叉树,颜色为红色或黑色.在二叉查找树强制一般要求以外,对于任何有效的红黑树我们怎讲了弱小额外要求:<br>&emsp;&emsp;1.节点是红或黑色<br>&emsp;&emsp;2.根是黑色<br>&emsp;&emsp;3.所有叶子都是黑色(叶子是NIL节点)<br>&emsp;&emsp;4.每个红色节点必须右两个黑色的子节点.(从每个叶子到根的所有路径上不能右两个连续的红色节点.)<br>&emsp;&emsp;5.从任一节点到其每个叶子的所有简单路径都包含相同苏后面的黑色节点.<br>&ensp;红黑树关键特性:<strong>从根到叶子的最长的可能路径不多于最短的可能路径的两倍长</strong>.红黑树是大致平衡的.插入,删除和查找某个值最坏情况下与树的高度成比例.</p>\n<ul>\n<li><strong>B+树</strong><br>&ensp;B+树通常用于数据库和操作系统的文件系统中.<strong>B+树的特点是能够保持数据稳定有序,其插入与修改拥有较文档的对数时间复杂度</strong>.B+树元素自底向上插入,与二叉树相反.<br>&ensp;B+树是内部节点可右在预定范围内的可变量目的子节点.因此,B+树不需要像其他自平衡二叉查找树那样重新平衡.</li>\n</ul>\n<h4 id=\"2-3-6-堆树和优先队列\"><a href=\"#2-3-6-堆树和优先队列\" class=\"headerlink\" title=\"2.3.6 堆树和优先队列\"></a>2.3.6 堆树和优先队列</h4><p>&ensp;堆(heap)也称为优先队列,堆遵守队列操作模式,在堆底插入元素,在堆顶取出元素,但堆中元素的排列不是按照到来的先后顺序,而是按照一定的有序顺序排列的.<br>&ensp;堆的本质是一个完全二叉树,可使用二叉树表示堆,也可使用数组来表示.<br>&ensp;堆的特性:<br>&emsp;&emsp;必须是完全二叉树<br>&emsp;&emsp;用数组实现<br>&emsp;&emsp;任一节点的值是其子树所有节点的最大值或最小值<br>&emsp;&emsp;&emsp;最大值时,称为最大堆,也称大顶堆<br>&emsp;&emsp;&emsp;最小时,称为最小堆,也称小顶堆.<br>&emsp;<strong>堆不能保证整棵树都是有序的,堆中的插入和删除操作时时间复杂度为O(log2n)</strong></p>\n<p>&emsp;堆是一颗二叉树，通常其子结点存储的值比父结点的值小，所以，根结点为树中最大的结点(大顶堆)。同样，根结点也可以是树中最小的结点(小顶堆)。能够快速确定包含最大(小)值的特点。<br>&emsp;堆时左平衡的树，随着结点增加，树会逐级从左至右增长。一个较好地表示左平衡二叉树的方式是，将结点通过层序遍历方式连续存储到一个数组中。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Heap_</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> size;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*compare)(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key1, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key2);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> (*destroy)(<span class=\"keyword\">void</span> *data);</span><br><span class=\"line\">    <span class=\"keyword\">void</span> **tree;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>&emsp;堆排序，要排序的数据首先存储在一个堆中。从堆中一次取出一个结点。放置到有序数据集的尾部。当取出每个结点时，它的下一个结点就会浮现到堆的顶部。</p>\n<p>&emsp;优先队列是从堆衍生的数据结构。在优先队列中，数据保存在一个堆中，可快速确定下一个最高优先级的结点。</p>\n<p>&emsp;优先队列将数据按照优先级顺序排列。一个优先队列由许多有序元素构成，所以优先级最高的元素可以有效而快速的确定。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> Heap PQueue;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"2-3-7-leetcode题目\"><a href=\"#2-3-7-leetcode题目\" class=\"headerlink\" title=\"2.3.7 leetcode题目\"></a>2.3.7 leetcode题目</h4><ul>\n<li>先序遍历构造二叉树</li>\n<li>从中序与后序遍历构造二叉树</li>\n<li>二叉树的层次遍历</li>\n<li>从二叉搜索树到更大和树</li>\n<li>二叉搜索树的最近公共祖先</li>\n<li>前K个高频单词&lt;堆&gt;</li>\n</ul>\n<h3 id=\"2-4-图\"><a href=\"#2-4-图\" class=\"headerlink\" title=\"2.4 图\"></a>2.4 图</h3><p>&ensp;图(Graph)是由顶点的有穷非空集合和顶点之间的边的集合组成,通常表示为:<code>G(V,E)</code>.其中,G表示一个图,V是入G中顶点的集合,E是图G中的集合.</p>\n<p>&emsp;图是一种灵活的数据结构，用来定义对象之间关联或联系的模型。对象由顶点表示，而对象直接的关系或关联则通过顶点之间的边来表示。<br>&emsp;图的访问方式：广度优先和深度优先。</p>\n<h4 id=\"2-4-1-基础知识\"><a href=\"#2-4-1-基础知识\" class=\"headerlink\" title=\"2.4.1 基础知识\"></a>2.4.1 基础知识</h4><p>&emsp;图由两种类型的元素组成：顶点和边，顶点代表对象，边则建立起对象之间的关系或关联。图的边可关联值或权重信息。<br>&emsp;图分为有向图和无向图。有向图，边是由两个顶点组成的有序对，具有特定的方向。边也可称为弧。无向图中，边是没有方向的。</p>\n<p>&ensp;图可分为连通图和非连通图</p>\n<h4 id=\"2-4-2-图表示\"><a href=\"#2-4-2-图表示\" class=\"headerlink\" title=\"2.4.2 图表示\"></a>2.4.2 图表示</h4><p>&emsp;图的表示方法是G=(V, E)，V代表顶点的集合，而E和V之间是二元关系。<br>&emsp;图中由两个重要关系邻接(adjacency)和关联(incidence)。邻接是两个顶点之间的关系。关联是顶点和边之间的关系。<br>邻接矩阵表示<br>邻接链表表示</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">AdjList_</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> *vertex;</span><br><span class=\"line\">    Set adjacent;</span><br><span class=\"line\">&#125;AdjList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Graph_</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> vcount;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ecount;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> (*match)(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key1, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key2);</span><br><span class=\"line\">    List adjlists;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-4-3-图遍历\"><a href=\"#2-4-3-图遍历\" class=\"headerlink\" title=\"2.4.3 图遍历\"></a>2.4.3 图遍历</h4><p>&ensp;图的搜索方法：深度优先搜索和广度优先搜索。<br>&emsp;深度优先遍历(DFS)<br>&emsp;思路: 从图中某点v出发:<br>&emsp;&emsp;&emsp;1.访问顶点v<br>&emsp;&emsp;&emsp;2.从v的未被访问的邻接点中选取一个顶点w,从w出发进行深度优先遍历.<br>&emsp;&emsp;&emsp;3.重复上述两步,直到图中所有和v有路径相通的顶点都被访问.<br>&emsp;伪代码: </p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DFS</span><span class=\"params\">(Vertex v)</span> </span>&#123;</span><br><span class=\"line\">    vistied[v] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (v 的每个邻接点 w) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!visited[w]) &#123;</span><br><span class=\"line\">            DFS(w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>&ensp;广度优先遍历(BFS)<br>&emsp;思路:<br>&emsp;&emsp;&emsp;1.顶点v入队列<br>&emsp;&emsp;&emsp;2.当队列非空时则继续执行,否则算法结束.<br>&emsp;&emsp;&emsp;3.出队列取得队头顶点v’,访问顶点v 并标记顶点v已被访问.<br>&emsp;&emsp;&emsp;4.查找顶点v的第一个邻接顶点col<br>&emsp;&emsp;&emsp;5.若v的邻接顶点col未被访问过的,则col继续.<br>&emsp;&emsp;&emsp;6.查找顶点v的另一个新的邻接顶点col,转到步骤5入队列,直到顶点v的所有未被访问过的邻接点处理完,转到步骤2.</p>\n<p>&ensp;深度优先搜索和广度优先搜索,时间复杂度都为O(n^2)</p>\n<p>深度优先:从初始点出发,不断向前走,如果碰到死路,就往回走一步,尝试另一条路,直到发现目标位置.<br>广度优先:从初始点出发,把所有可能的路径都走一遍,如果里面没有目标位置,则尝试把所有两步能够到的位置都走一遍,看有没有目标位置.</p>\n<h4 id=\"2-4-4-最短路径\"><a href=\"#2-4-4-最短路径\" class=\"headerlink\" title=\"2.4.4 最短路径\"></a>2.4.4 最短路径</h4><p><strong>迪杰斯特拉Dijkstra算法</strong><br>&ensp;Dijkstra算法适用于权值为正的图.<br>&ensp;Dijkstra算法属于单源算法,即只能求出某点到其它点最短距离,并不能得出任意两点之间的最短距离.<br>&ensp;在源点可达的情况下,Dijkstra算法的时间复杂度时 <code>O(ElogV)</code><br>&ensp;算法步骤:<br>&emsp;&emsp;1.将所有边初始化为无穷大<br>&emsp;&emsp;2.旋转一个开始的顶点,添加到优先队列中.<br>&emsp;&emsp;3.对于该点的所有邻接顶点进行判断,如果到该点的距离小于原先的值,则该值进行更新.<br>&emsp;&emsp;4.将该点所有邻接顶点添加到优先队列中.<br>&emsp;&emsp;5.从优先队列中挑选除一个路径值最小的顶点,将其弹出,作为新的顶点,重复步骤3,4,5<br>&emsp;&emsp;6.直到所有点都被处理过一次.</p>\n<p><strong>弗洛伊德Floyd算法</strong><br>&ensp;Floyd算法是一个经典的动态规划算法.首先目标是寻找从点<code>i</code>到<code>j</code>的最短路径.<br>&ensp;<strong>Floyd算法可以求出任意两点的最短距离.时间复杂度:</strong><code>O(你^3)</code><br>&ensp;从任意节点i到任意节点j的最短路径不外乎2种可能:<br>&emsp;&emsp;1.是之间从i到j<br>&emsp;&emsp;2是从i到经过若干个节点k到j</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; n; k++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (A[i][j] &gt; (A[i][k] + A[k][j])) &#123;</span><br><span class=\"line\">                A[i][j] = A[i][k] + A[k][j];</span><br><span class=\"line\">                path[i][j] = k;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"2-4-5-拓扑排序\"><a href=\"#2-4-5-拓扑排序\" class=\"headerlink\" title=\"2.4.5 拓扑排序\"></a>2.4.5 拓扑排序</h4><p>&ensp;拓扑排序是一个有向无环图(DAG)的所有顶点的线性序列.且该序列必须满足下面两个条件:</p>\n<ul>\n<li>每个顶点出现且只出现一次</li>\n<li>若存在一条顶点A到顶点B的路径,那么在序列中顶点A出现在顶点B的前面.</li>\n</ul>\n<h4 id=\"2-4-6-leetcode题目\"><a href=\"#2-4-6-leetcode题目\" class=\"headerlink\" title=\"2.4.6 leetcode题目\"></a>2.4.6 leetcode题目</h4><ul>\n<li>判断二分图</li>\n<li>克隆图</li>\n<li>找到小镇的法官</li>\n<li>钥匙和房间</li>\n<li>最短路径访问所有节点</li>\n</ul>\n<h2 id=\"3-常见算法\"><a href=\"#3-常见算法\" class=\"headerlink\" title=\"3 常见算法\"></a>3 常见算法</h2><h3 id=\"3-1-分治法\"><a href=\"#3-1-分治法\" class=\"headerlink\" title=\"3.1 分治法\"></a>3.1 分治法</h3><p>&emsp;把复杂问题分成两个或者更多相同或相似的子问题，再把子问题分成更小的子问题…，直到可以直接求解，原问题的解为子问题解的合并。<br>&emsp;分治法应用：排序算法(快速排序、归并排序);傅里叶变换()。</p>\n<h4 id=\"3-1-1-概述\"><a href=\"#3-1-1-概述\" class=\"headerlink\" title=\"3.1.1 概述\"></a>3.1.1 概述</h4><p>&ensp;分治法思想:将一个难以直接解决的大问题,分割成一些规模小的相同问题,分而治之.</p>\n<h4 id=\"3-1-2-策略\"><a href=\"#3-1-2-策略\" class=\"headerlink\" title=\"3.1.2 策略\"></a>3.1.2 策略</h4><p>&ensp;分治策略:对于一个规模为n的问题,若该问题可以容易解决则直接解决,否则将其分解为k个规模较小的子问题,子问题之间相互独立且与原问题形式相同,可递归求解.分治通常用递归实现.</p>\n<h4 id=\"3-1-3-应用场景\"><a href=\"#3-1-3-应用场景\" class=\"headerlink\" title=\"3.1.3 应用场景\"></a>3.1.3 应用场景</h4><p>&ensp;分治法特征:</p>\n<ul>\n<li>问题缩小到一定程度可容易解决.</li>\n<li>问题可分解为若干个规模较小的相同问题,即问题具有最优子结构性质.</li>\n<li>子问题的解可合并为该问题的解.</li>\n<li>问题分解的子问题相互独立,子问题之间不包含公告子问题.</li>\n</ul>\n<h4 id=\"3-1-4-步骤\"><a href=\"#3-1-4-步骤\" class=\"headerlink\" title=\"3.1.4 步骤\"></a>3.1.4 步骤</h4><p>&ensp;分治法一层递归步骤:</p>\n<ul>\n<li><ol>\n<li><strong>分解</strong>:将原问题分解为若干规模较小,相互独立,与原问题形式相同的子问题.</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li><strong>解决</strong>:若子问题可直接求解,则直接求解,否则递归解各个子问题.</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li><strong>合并</strong>:将各个子问题的解合并为原问题的解.</li>\n</ol>\n</li>\n</ul>\n<p>&ensp;</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<br>\n\n<h4 id=\"3-1-5-应用\"><a href=\"#3-1-5-应用\" class=\"headerlink\" title=\"3.1.5 应用\"></a>3.1.5 应用</h4><blockquote>\n<p>分治思维方式：二分搜索;大整数乘法;合并排序;快速排序。</p>\n</blockquote>\n<p>&ensp;求x的n次幂<br>&emsp;对数复杂度O(logn)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">power</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        result = power(x, n/<span class=\"number\">2</span>) * power(x, n / <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        result = power(x, (n + <span class=\"number\">1</span>) / <span class=\"number\">2</span>) * power(x, (n - <span class=\"number\">1</span>) / <span class=\"number\">2</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-1-6-leetcode题目\"><a href=\"#3-1-6-leetcode题目\" class=\"headerlink\" title=\"3.1.6 leetcode题目\"></a>3.1.6 leetcode题目</h4><ul>\n<li>搜索二维矩阵II</li>\n<li>求众数</li>\n<li>合并k个排序链表</li>\n</ul>\n<h2 id=\"3-2-排序算法\"><a href=\"#3-2-排序算法\" class=\"headerlink\" title=\"3.2 排序算法\"></a>3.2 排序算法</h2><p>&emsp;各种排序算法，主要包括：插入排序、快速排序、归并排序、计数排序和技术排序。二分查找，</p>\n<h3 id=\"3-2-1-冒泡排序\"><a href=\"#3-2-1-冒泡排序\" class=\"headerlink\" title=\"3.2.1 冒泡排序\"></a>3.2.1 冒泡排序</h3><p><strong>冒泡排序算法复杂度是O(n^2)</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = arr.length;</span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> out = size - <span class=\"number\">1</span>; out &gt; <span class=\"number\">0</span>; out--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// </span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> in = <span class=\"number\">0</span>; in &lt; out; in++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[in] &gt; arr[in + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">                swap(arr, in, in + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-2-选择排序\"><a href=\"#3-2-2-选择排序\" class=\"headerlink\" title=\"3.2.2 选择排序\"></a>3.2.2 选择排序</h3><p>&emsp;选择排序算法时间复杂度为O(n^2)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">selectSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = arr.lenght;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> out = <span class=\"number\">0</span>; out &lt; size; out++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mixIndex = out;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> in = out - <span class=\"number\">1</span>; in &lt; size; in++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[mixIndex] &gt; arr[in]) &#123;</span><br><span class=\"line\">                mixIndex = in;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mixIndex != out) &#123;</span><br><span class=\"line\">            swap(arr, mixIndex, out);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-3-插入排序\"><a href=\"#3-2-3-插入排序\" class=\"headerlink\" title=\"3.2.3 插入排序\"></a>3.2.3 插入排序</h3><p>&emsp;插入排序每次从无序数据集合中取出一个元素，插入到已经排好序的数据集中适当位置，使数据集仍然有序。插入排序不需要额外空间。时间复杂度O(n2)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = arr.lenght;</span><br><span class=\"line\">    <span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> out = <span class=\"number\">1</span>; out &lt; size; out++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = arr[out];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> in = out;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"comment\">// </span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (in - <span class=\"number\">1</span> &gt;= <span class=\"number\">0</span> &amp;&amp; arr[in - <span class=\"number\">1</span>] &gt; temp) &#123;</span><br><span class=\"line\">            arr[in] = arr[in - <span class=\"number\">1</span>];</span><br><span class=\"line\">            in--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (in != out) &#123;</span><br><span class=\"line\">            arr[in] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">issort</span><span class=\"params\">(<span class=\"keyword\">void</span> *data, <span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> esize, <span class=\"keyword\">int</span> (*compare)(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key1, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *key2))</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *a = data;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> *key;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((key = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(esize)) == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">1</span>; j &lt; size; j++) &#123;</span><br><span class=\"line\">        i = j - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span> &amp;&amp; compare(&amp;a[i * esize], key) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            mamcpy(&amp;a[(i + <span class=\"number\">1</span>) * esize], &amp;a[i * esize], esize);</span><br><span class=\"line\">            i--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(&amp;a[(i + <span class=\"number\">1</span>) * esize], key, esize);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">free</span>(key);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-4-希尔排序\"><a href=\"#3-2-4-希尔排序\" class=\"headerlink\" title=\"3.2.4 希尔排序\"></a>3.2.4 希尔排序</h3><p>&ensp;希尔排序时间复杂度O(n*(logn)^2)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> size = arr.lenght;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> h = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (h &lt;= size / <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        h = h * <span class=\"number\">3</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (h &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> out = h; out &lt; size; out++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = arr[out];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> in = out;</span><br><span class=\"line\">            <span class=\"comment\">//</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (in - h &gt;= <span class=\"number\">0</span> &amp;&amp; arr[in - h] &gt; temp) &#123;</span><br><span class=\"line\">                arr[in] = arr[in - h];</span><br><span class=\"line\">                in = in - h;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (in != out) &#123;</span><br><span class=\"line\">                arr[in] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        h = (h - <span class=\"number\">1</span>) / <span class=\"number\">3</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-5-归并排序\"><a href=\"#3-2-5-归并排序\" class=\"headerlink\" title=\"3.2.5 归并排序\"></a>3.2.5 归并排序</h3><p>&emsp;归并排序是一种分支排序算法。归并排序需要额外存储空间来完成排序。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">min</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>  x &lt; y ? x : y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *a = arr;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *b = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(len * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> seg, start;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (seg = <span class=\"number\">1</span>; seg &lt; len; seg += seg) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (start )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-6-快速排序\"><a href=\"#3-2-6-快速排序\" class=\"headerlink\" title=\"3.2.6 快速排序\"></a>3.2.6 快速排序</h3><p>&emsp;快速排序是一种分治排序算法。不需要额外存储空间，时间复杂度O(nlgn)</p>\n<p>&emsp;快速排序三个步骤：</p>\n<ul>\n<li>分：设定一个分割值并将数据分为两部分。</li>\n<li>治：分别在两部分使用递归方式继续使用快速排序方法。</li>\n<li>和：对分割部分排序直至完成。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> _<span class=\"title\">Range</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> start;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end;</span><br><span class=\"line\">&#125; Range;</span><br><span class=\"line\"><span class=\"function\">Range <span class=\"title\">now_Range</span><span class=\"params\">(<span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span> e)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Range r;</span><br><span class=\"line\">    r.start = s;</span><br><span class=\"line\">    r.end = e;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *x, <span class=\"keyword\">int</span> *y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> t = *x;</span><br><span class=\"line\">    *x = *y;</span><br><span class=\"line\">    *y = t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[], <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> len)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Range r[len];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    r[p++] = new_Range(<span class=\"number\">0</span>, len - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (p) &#123;</span><br><span class=\"line\">        Range range = r[--p];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (range.start &gt;= range.end) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = arr[(range.start + range.end) / <span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> left = range.start;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> right = range.end;</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (arr[left] &lt; mid) &#123;</span><br><span class=\"line\">                ++left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (arr[right] &gt; mid) &#123;</span><br><span class=\"line\">                --right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (left &lt;= right) &#123;</span><br><span class=\"line\">                swap(&amp;arr[left], &amp;arr[right]);</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (left &lt;= right);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (range.start &lt; right) &#123;</span><br><span class=\"line\">            r[p++] = new_Range(range.start, right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (range.end &gt; left) &#123;</span><br><span class=\"line\">            r[p++] = new_Range(left, range.end);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(<span class=\"keyword\">int</span> *arr, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (low &lt; high) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = low;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = high;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = arr[low];</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; j) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 从右向左找第一个小于k的数</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= k) &#123;</span><br><span class=\"line\">                j--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &lt; j) &#123;</span><br><span class=\"line\">                arr[i++] = arr[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 从左向右找第一个大于等于k的数</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (i &lt; j &amp;&amp; arr[i] &lt; k) &#123;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &lt; j) &#123;</span><br><span class=\"line\">                arr[j--] = arr[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[i] = k;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 递归调用</span></span><br><span class=\"line\">        QuickSort(arr, low, i - <span class=\"number\">1</span>); <span class=\"comment\">// 排序k左边</span></span><br><span class=\"line\">        QuickSort(arr, i + <span class=\"number\">1</span>, high); <span class=\"comment\">// 排序k右边</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">( <span class=\"keyword\">int</span> *a, <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j, p, tmp;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>)  <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    p = a[n / <span class=\"number\">2</span>];   <span class=\"comment\">// Get the middle element as pivot ..</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( i = <span class=\"number\">0</span>, j = n <span class=\"number\">-1</span>;; i++, j--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (a[i] &lt; p)</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p &lt; a[j])</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( i &gt;= j)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        tmp = a[i]; a[i] = a[j]; a[j] = tmp;    <span class=\"comment\">//swap both ..</span></span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\"></span><br><span class=\"line\">    quick_sort( a, i); </span><br><span class=\"line\">    quick_sort( a + i, n - i); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>qsort/sort函数</strong><br>&ensp;在c语言库函数中已经实现了qsort函数,<br>&emsp;qsort函数用法:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">qsort</span><span class=\"params\">(<span class=\"keyword\">void</span> *base, <span class=\"keyword\">int</span> nelem, <span class=\"keyword\">int</span> width, <span class=\"keyword\">int</span> (*fcmp)(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *))</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// 参数:1 带排序数组首地址, nelem 数组中待排元素数量  width 各元素所在空间大小  *fcmp 指向函数的指针</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// int 数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *a, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (*(<span class=\"keyword\">int</span> *)a - *(<span class=\"keyword\">int</span> *)b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">qsort(arr, n, <span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>]), cmp);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// char 数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">com</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *a, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *(<span class=\"keyword\">char</span> *)a - *(<span class=\"keyword\">char</span> *)b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">char</span> word[<span class=\"number\">100</span>];</span><br><span class=\"line\">qsort(word, <span class=\"number\">100</span>, <span class=\"keyword\">sizeof</span>(word[<span class=\"number\">0</span>]), cmp);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// double 类型</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *a, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *(<span class=\"keyword\">double</span> *)a &gt; *(<span class=\"keyword\">double</span>*)b ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">double</span> in[<span class=\"number\">100</span>];</span><br><span class=\"line\">qsort(in, <span class=\"number\">100</span>, <span class=\"keyword\">sizeof</span>(in[<span class=\"number\">00</span>]), cmp);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// struct 结构体</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Sample</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> num;</span><br><span class=\"line\">&#125;st[<span class=\"number\">100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *a, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (*(Sample *)a).data &gt; (*(Sampel *)b).data ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">qsort(s, <span class=\"number\">100</span>, <span class=\"keyword\">sizeof</span>(s[<span class=\"number\">0</span>]), cmp);</span><br><span class=\"line\"><span class=\"comment\">// </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *a, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Sample</span> *<span class=\"title\">c</span> =</span> (Sample *)a;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Sample</span> *<span class=\"title\">d</span> =</span> (Sample *)b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(c-&gt;x != d-&gt;x) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c-&gt;x - d-&gt;x;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> d-&gt;y - c-&gt;y;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">qsort(s,<span class=\"number\">100</span>,<span class=\"keyword\">sizeof</span>(s[<span class=\"number\">0</span>]),cmp);</span><br><span class=\"line\"></span><br><span class=\"line\">truct Sample</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> str[<span class=\"number\">100</span>];</span><br><span class=\"line\">&#125;s[<span class=\"number\">100</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//按照结构体中字符串str的字典顺序排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">cmp</span> <span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *a, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span> *b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">strcmp</span>((*(Sample *)a)-&gt;str , (*(Sample *)b)-&gt;str);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">qsort(s,<span class=\"number\">100</span>,<span class=\"keyword\">sizeof</span>(s[<span class=\"number\">0</span>]),cmp);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-7-堆排序\"><a href=\"#3-2-7-堆排序\" class=\"headerlink\" title=\"3.2.7 堆排序\"></a>3.2.7 堆排序</h3><p>&emsp;桶排序算法基本原理：把数组中的所有元素分为若干个数据块，也就是若干个桶，然后对每个桶里的数据进行排序，最后将所有桶里的数据依次排列。<br>&emsp;存在两个问题：<br>&emsp;(1)怎样划分数据块，也就是分几个桶，每个桶放哪几个数据。<br>&emsp;(2)对每个数据块里的数据怎样排序。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;sdtio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> key;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125; KeyNode;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">bucket_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> keys[], <span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> bucket_size)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, j;</span><br><span class=\"line\">    KeyNode **bucket_table = (KeyNode **)mallov(bucket_size * <span class=\"keyword\">sizeof</span>(KeyNode*));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; bucket_size;i++) &#123;</span><br><span class=\"line\">        bucket_table[i] = (KeyNode*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(KeyNode));</span><br><span class=\"line\">        bucket_table[i]-&gt;key = <span class=\"number\">0</span>;</span><br><span class=\"line\">        bucket_table[i]-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(j = <span class=\"number\">0</span>;j &lt; size;j++) &#123;</span><br><span class=\"line\">\t\tKeyNode *node = (KeyNode *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(KeyNode));</span><br><span class=\"line\">\t\tnode-&gt;key = keys[j];</span><br><span class=\"line\">\t\tnode-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> index = keys[j]/<span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tKeyNode *p = bucket_table[index];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p-&gt;key == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tbucket_table[index]-&gt;next = node;</span><br><span class=\"line\">\t\t\t(bucket_table[index]-&gt;key)++;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(p-&gt;next != <span class=\"literal\">NULL</span> &amp;&amp; p-&gt;next-&gt;key &lt;= node-&gt;key)</span><br><span class=\"line\">\t\t\t\tp = p-&gt;next;</span><br><span class=\"line\">\t\t\tnode-&gt;next = p-&gt;next;</span><br><span class=\"line\">\t\t\tp-&gt;next = node;</span><br><span class=\"line\">\t\t\t(bucket_table[index]-&gt;key)++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">//print result</span></span><br><span class=\"line\">\tKeyNode * k = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>;i &lt; bucket_size;i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(k = bucket_table[i]-&gt;next;k!=<span class=\"literal\">NULL</span>;k=k-&gt;next)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,k-&gt;key);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> raw[] = &#123;<span class=\"number\">49</span>,<span class=\"number\">38</span>,<span class=\"number\">65</span>,<span class=\"number\">97</span>,<span class=\"number\">76</span>,<span class=\"number\">13</span>,<span class=\"number\">27</span>,<span class=\"number\">49</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> size = <span class=\"keyword\">sizeof</span>(raw)/<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>);</span><br><span class=\"line\">\tbucket_sort(raw,size,<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Heapify</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> size)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> lef_child = <span class=\"number\">2</span> * i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right_child = <span class=\"number\">2</span> * i + <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> max = i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lef_child &lt; size &amp;&amp; A[lef_child] &gt; A[max]) &#123;</span><br><span class=\"line\">        max = lef_child;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (right_child &lt; size &amp;&amp; A[right_child] &gt; A[max]) &#123;</span><br><span class=\"line\">        max = right_child;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (max != i) &#123;</span><br><span class=\"line\">        Swap(A, i max);</span><br><span class=\"line\">        Heapify(A, max, size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">BuildHeap</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> heap_size = n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = heap_size / w - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        Heapify(A, i, heap_size);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> heap_size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">HeapSort</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> heap_size = BuildHeap(A, n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (heap_size &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        Swap(A, <span class=\"number\">0</span>, heap_size);</span><br><span class=\"line\">        Heap(A, <span class=\"number\">0</span>, heap_size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-8-leetcode排序\"><a href=\"#3-2-8-leetcode排序\" class=\"headerlink\" title=\"3.2.8 leetcode排序\"></a>3.2.8 leetcode排序</h3><h2 id=\"3-3-贪心算法\"><a href=\"#3-3-贪心算法\" class=\"headerlink\" title=\"3.3 贪心算法\"></a>3.3 贪心算法</h2><h3 id=\"3-3-1-基本概念\"><a href=\"#3-3-1-基本概念\" class=\"headerlink\" title=\"3.3.1 基本概念\"></a>3.3.1 基本概念</h3><p>&ensp;贪心算法:在对问题求解时,总是做出在当前是最好的选择,即不考虑整体最优,仅考虑局部最优解.<br>&ensp;贪心算法没有固定算法框架,算法关键是贪心策略的选择.他想算法不是所有问题都得到最优解,选择贪心策略必须具备无后效性,即某个状态以后的过程不会影响一起的状态,只与当前状态有关.</p>\n<h3 id=\"3-3-2-描述\"><a href=\"#3-3-2-描述\" class=\"headerlink\" title=\"3.3.2 描述\"></a>3.3.2 描述</h3><p>&ensp;贪心算法实现步骤:<br>&emsp;1.建立数学模型描述问题<br>&emsp;2.把求解的问题分成若干个子问题<br>&emsp;3.对每个子问题求解,得到子问题的局部最优解<br>&emsp;4.把子问题的解局部最优解合成原来问题的一个解.<br>&ensp;实现算法过程:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (能朝给定总目标前进一步)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    利用可行的决策,求出可行解的一个解元素;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">由所有解元素组合成问题的一个可行解</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-3-应用\"><a href=\"#3-3-3-应用\" class=\"headerlink\" title=\"3.3.3. 应用\"></a>3.3.3. 应用</h3><p><strong>最小生成树算法</strong><br>&ensp;贪心算法经典实践:最小生成树算法<br>&emsp;设<code>G=(V, E)</code>是无向连通带权图,即一个网络,E中的每一条边<code>(v,w)</code> 的全为 <code>c[v][w]</code>.如果G的字体 G’ 是一颗包含 G 的所有顶点的数,则称 G’ 为 G 的生成树.生成树上各边权的总和称为生成树的耗费.在 G 的所有生成树中,耗费最小的生成树称为 G 的最小生成树.<br>&ensp;最小伸出手的性质:<br>&emsp;&emsp;设<code>G=(V, E)</code>是连通带权图, U是V的真子集.如果(u,v)属于E,且u属于E,v属于V-U,且在所有这样的边中,(u,v)的权c[u][v]最小,那么一定存在G的一颗最小生成树,它亦是(u,v)为其中一条边,这个性质有时也称为MST性质.</p>\n<p><strong>Prim算法</strong><br>&emsp;&emsp;设<code>G=(V, E)</code>是连通带权图, V={1,2,…,n}.构造G的最小生成树Prim算法的基本思想是:**首先置S={1},然后,只有S是V的真子集,就进行如下的贪心选择:选取满足添加i属于S,j属于V-S,且c[i][j]最小的边,将顶点j添加到S中.这个过程一直进行到S=V时为止.在这个过程中选取到的所有边恰好构成G的一颗最小生成树.</p>\n<h3 id=\"3-3-4-leetcode题目\"><a href=\"#3-3-4-leetcode题目\" class=\"headerlink\" title=\"3.3.4 leetcode题目\"></a>3.3.4 leetcode题目</h3><ul>\n<li>柠檬水找零</li>\n<li>分发饼干</li>\n</ul>\n<h2 id=\"3-4-动态规划\"><a href=\"#3-4-动态规划\" class=\"headerlink\" title=\"3.4 动态规划\"></a>3.4 动态规划</h2><p>&ensp;动态规划(<code>DP</code>):是一种通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法.常用于重叠子问题和最优子结构性质的问题,动态规划时间通常远小于朴素解法.</p>\n<h3 id=\"3-4-1-基本概念\"><a href=\"#3-4-1-基本概念\" class=\"headerlink\" title=\"3.4.1 基本概念\"></a>3.4.1 基本概念</h3><p>&ensp;动态规划:要解一个给定问题,需要解其不同部分(即子问题),再根据子问题的解以得出原问题的解.通常子问题非常相似,子问题解算出后,将其记录.<br>&ensp;动态规划过程是:每次决策依赖于当前状态,又随即引起状态转移.一个决策序列就是在变化的状态中产生除留的,这种多阶段最优化决策解决过程称为动态规划.<br>&ensp;动态规划与分治法的区别是子问题通常不是独立的.</p>\n<h3 id=\"3-4-2-描述算法\"><a href=\"#3-4-2-描述算法\" class=\"headerlink\" title=\"3.4.2 描述算法\"></a>3.4.2 描述算法</h3><p>&ensp;可采用动态规划的问题3个性质:<br>&emsp;1) <strong>最优化原理</strong>:如果问题的最优解所包含的子问题的解也是最优的,则称该问题具有最优子结构,即满足最优化原理.<br>&emsp;2) <strong>无后效性</strong>:即某阶段状态确定后,就不受之后的决策影响,即某状态以后过程不影响以前的状态,只与当前状态有关.<br>&emsp;3) <strong>有重叠子问题</strong>:</p>\n<br>\n&ensp;动态规划所处理的问题是一个多阶段决策问题,由初始状态开始,通过中间阶段决策的选择,达到结束状态.形成一个决策序列.\n\n<p>&ensp;动态规划求解三要素:</p>\n<blockquote>\n<p>(1) 问题的节点<br>(2) 每个阶段的状态<br>(3) 从前一个阶段转化到后一个阶段之间的递推关系</p>\n</blockquote>\n<p>&ensp;<strong>最优决策表</strong></p>\n<blockquote>\n<p>f(n, m) = max{f(n-1, m), f(n-1, m-w[n]) + P(n, m)}</p>\n</blockquote>\n<h3 id=\"3-4-3-背包问题\"><a href=\"#3-4-3-背包问题\" class=\"headerlink\" title=\"3.4.3 背包问题\"></a>3.4.3 背包问题</h3><p>&ensp;问题描述:<br>&emsp;有N件物品和一个体积为V的背包.(每种物品只有一件)第i件物品的体积是volume[i],价值是value[i],求解哪些物品装入背包可使这些物品的体积综合不超过背包体积,且价值总和最大.<br>&ensp;解题思路:<br>&emsp;p[i][j]代表前i件物品组合在容量为j的背包的最优解.将前i件物品放入容量为v的背包中这个子问题,若只考虑第i件物品的策略(放或不放),那么可以转化为一个只牵扯前i-1物品的问题.如果不放第i件物品,那么问题就转化为”前i-1件物品放入容量为v的背包中,价值为p[i-1][v];如果放第i件物品,那么问题就转化为”前i-1物品放入剩下的容量为v-volume[i]的背包中”,此时能获得的最大价值就是p[i-1][j-volume]再加上通过放入第i件物品获得的价值value[i].</p>\n<p>&ensp;<strong>状态转移方程:</strong></p>\n<blockquote>\n<p>p[i][j] = max{p[i-1][j-vol] + value[i], p[i-1][j]}<br>&ensp;伪代码描述:</p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1.</span>..N</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j = V..<span class=\"number\">.0</span></span><br><span class=\"line\">        p[j] = max&#123;p[j-volume[i]] + value[i], p[j]&#125;;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"3-4-4-最长公共子序列\"><a href=\"#3-4-4-最长公共子序列\" class=\"headerlink\" title=\"3.4.4 最长公共子序列\"></a>3.4.4 最长公共子序列</h3><p>&ensp;问题描述:<br>&emsp;一个散列S,如果分别是两个或多个已知数列的子序列,且是所有匹配此条件序列中最长的,则S称为已知序列的最长公共子序列(LCS)<br>&ensp;给定两个序列X,Y,求两个序列的最长公共子序列.<br>&ensp;截图思路:<br>&emsp;</p>\n<p>&ensp;伪代码:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">LCSLength</span><span class=\"params\">(X[<span class=\"number\">1.</span>.m], Y[<span class=\"number\">1.</span>.n])</span></span></span><br><span class=\"line\"><span class=\"function\">    C </span>= <span class=\"built_in\">array</span>(<span class=\"number\">0.</span>.m, <span class=\"number\">0.</span>.n)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0.</span>.m</span><br><span class=\"line\">        C[i, <span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0.</span>.n</span><br><span class=\"line\">        C[<span class=\"number\">0</span>, j] = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">1.</span>.m</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j := <span class=\"number\">1.</span>.n</span><br><span class=\"line\">            <span class=\"keyword\">if</span> X[i] = Y[j]</span><br><span class=\"line\">                C[i, j] := C[i<span class=\"number\">-1</span>, j<span class=\"number\">-1</span>] + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                C[i, j] := max(C[i, j<span class=\"number\">-1</span>], C[i<span class=\"number\">-1</span>,j])</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> C[m, n]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-4-5-leetcode题目\"><a href=\"#3-4-5-leetcode题目\" class=\"headerlink\" title=\"3.4.5 leetcode题目\"></a>3.4.5 leetcode题目</h3><ul>\n<li>最大子序和</li>\n<li>编辑距离</li>\n<li>大礼包</li>\n<li>最长上升子序列</li>\n</ul>\n<h2 id=\"3-5-回溯法\"><a href=\"#3-5-回溯法\" class=\"headerlink\" title=\"3.5 回溯法\"></a>3.5 回溯法</h2><h3 id=\"3-5-1-基本概念\"><a href=\"#3-5-1-基本概念\" class=\"headerlink\" title=\"3.5.1 基本概念\"></a>3.5.1 基本概念</h3><h3 id=\"3-5-2-八皇后问题\"><a href=\"#3-5-2-八皇后问题\" class=\"headerlink\" title=\"3.5.2 八皇后问题\"></a>3.5.2 八皇后问题</h3><h3 id=\"3-5-3-leetcode题目\"><a href=\"#3-5-3-leetcode题目\" class=\"headerlink\" title=\"3.5.3 leetcode题目\"></a>3.5.3 leetcode题目</h3><h2 id=\"4-参考链接\"><a href=\"#4-参考链接\" class=\"headerlink\" title=\"4 参考链接\"></a>4 参考链接</h2><ul>\n<li>复杂度速查表<br><a href=\"https://liam.page/2016/06/20/big-O-cheat-sheet/\">https://liam.page/2016/06/20/big-O-cheat-sheet/</a></li>\n<li>线性表<br><a href=\"https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E8%A1%A8\">https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E8%A1%A8</a><ul>\n<li>单链表<br><a href=\"https://www.jianshu.com/p/73f0d8f807aa\">https://www.jianshu.com/p/73f0d8f807aa</a></li>\n</ul>\n</li>\n</ul>"},{"title":"leetcode题解算法分析","date":"2021-10-26T16:47:53.000Z","updated":"2021-10-26T16:53:53.000Z","_content":"\n## 单调栈\n\n<!--more-->\n&emsp;单调递增栈，元素进栈过程，若当前进栈的元素a，如果a>栈顶元素，则直接将a进栈，如果a<=栈顶元素，则不断将栈顶元素出栈，直到满足a>栈顶元素。单调递减栈则为a<栈顶元素时进栈。\n> 单调递增栈：单调递增栈就是从栈底到栈顶数据是从大到小\n> 单调递减栈：单调递减栈就是从栈底到栈顶数据是从小到大\n\n- leetcode题目\n84.[柱状图中最大的矩形](https://leetcode-cn.com/problems/largest-rectangle-in-histogram/description/\n)\n```c\nint largestRectangleArea(int* heights, int heightsSize) {\n    // 栈顶标记\n    int top = -1;\n    int area = 0;\n    int maxArea = 0;\n    int *stack = (int *)malloc(sizeof(int) * (heightsSize + 2));\n    int *buf = (int *)malloc(sizeof(int) * (heightsSize + 2));\n\n    // 增加前哨兵\n    buf[0] = 0;\n    for (int i = 1; i <= heightsSize; i++) {\n        buf[i] = heights[i - 1];\n    }\n\n    // 在最后增加哨兵\n    buf[heightsSize + 1] = 0;\n\n    stack[++top] = 0;\n    for (int i = 1; i < heightsSize + 2; i++) {\n        while (top > 0 && buf[i] < buf[stack[top]]) {\n            area = (i - stack[top - 1] - 1) * buf[stack[top]];\n            maxArea = maxArea > area ? maxArea : area;\n            top--;\n        }\n        // 索引入栈，其他可能是元素入栈\n        stack[++top] = i;\n    }\n\n    return maxArea;\n}\n```\nleetcode 496、503、739、239\n42.接雨水\nhttps://blog.csdn.net/chongbin007/article/details/112741867?utm_term=%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97leetcode&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-112741867&spm=3001.4430\n\n\n\n## 单调队列\n&emsp;单调队列是指：队列中的元素之间的关系具有单调性，而且，队首和队尾都可以进行出队操作，只有队尾开源进行入队操作。\n&emsp;单调队列与单调栈及其相似，把单调栈先进后出的性质改为先进先出既可。\n元素进队列的过程对于单调递增队列。\n对于一个元素a，如果a>队尾元素，那么直接将a扔进队列，如果a<=队尾元素，则将队尾元素出队列，直到满足 a>队尾元素即可。\n\n>单调递增队列(从队首到队尾满足递增)\n>单调递减队列(从队首到队尾满足递减)\n- 单调队列作用：队列里的元素满足出队的单调性。\n- 单调队列操作：去头和删尾\n\n- leetcode 题目\n[剑指 Offer 59 - II. 队列的最大值](https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof/)\n```c\ntypedef struct {\n    int arr[20000];\n    int begin;\n    int end;\n} MaxQueue;\n\nMaxQueue* maxQueueCreate()\n{\n    MaxQueue *tmp = (MaxQueue*)malloc(sizeof(MaxQueue));\n    tmp->begin = 0;\n    tmp->end = 0;\n    return tmp;\n}\n\nint maxQueueMax_value(MaxQueue* obj)\n{\n    int ans = -1;\n    for (int i = obj->begin; i < obj->end; i++) {\n        ans = fmax(ans, obj->arr[i]);\n    }\n    return ans;\n}\n\nvoid maxQueuPus_back(MaxQueue* obj, int value)\n{\n    obj->arr[obj->end++] = value;\n}\nint maxQueuePop_front(MaxQueue* obj) \n{\n    if(obj->begin==obj->end)\n    {\n        return -1;\n    }\n    else\n    {\n        return obj->arr[obj->begin++];\n    }\n}\n\nvoid maxQueueFree(MaxQueue* obj) \n{\n    obj->end=0;\n    obj->begin=0;\n}\n\n```\n\n239.滑动窗口最大值\n\n```c\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int Size=1000005;\nint a[Size],qmax[Size],qmin[Size],savemax[Size],savemin[Size];\nint main()\n{\n    int n,k,cnt=1;\n    scanf(\"%d %d\",&n,&k);\n    for(int i=1;i<=n;i++)\n    {scanf(\"%d\",&a[i]);}\n    int beg=1,top=0;//qmax队列的队首指针和队尾指针\n    int st=1,ed=0;//qmin队列的队首指针和队尾指针\n    for(int i=1;i<=n;i++)\n    {\n        while(beg<=top&&a[i]>=a[qmax[top]])\n        {top--;}\n        qmax[++top]=i;\n        while(st<=ed&&a[i]<=a[qmin[ed]])\n        {ed--;}\n        qmin[++ed]=i;\n        if(i>=k)\n        {\n            while(qmax[beg]<=i-k)beg++;\n            while(qmin[st]<=i-k)st++;\n            savemax[cnt]=a[qmax[beg]];\n            savemin[cnt]=a[qmin[st]];\n            cnt++;\n        }\n    }\n    for(int i=1;i< cnt;i++) {\n        printf(\"%d \",savemin[i]);\n    }\n    printf(\"\\n\");\n    for(int i=1;i< cnt;i++) {\n        printf(\"%d \",savemax[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n```\n## 并查集\n\n## 滑动窗口&双指针\n\nhttps://www.cnblogs.com/zzcxxoo/p/13216030.html\n\n## 前缀与哈希\n\n## 拓扑排序\n\n## 字符串\n\n## BFS\n\n## DFS\n\n## 动态规划\n\n## 贪心算法\n\n## 字典树\n\n\n\n","source":"_posts/2021/11/leetcode题解算法.md","raw":"---\ntitle: leetcode题解算法分析\ndate: 2021-10-27 00:47:53\nupdated: 2021-10-27 00:53:53\ncategories: \n    - tool\ntags: \n    - 实用教程\n    - Another Tag\n---\n\n## 单调栈\n\n<!--more-->\n&emsp;单调递增栈，元素进栈过程，若当前进栈的元素a，如果a>栈顶元素，则直接将a进栈，如果a<=栈顶元素，则不断将栈顶元素出栈，直到满足a>栈顶元素。单调递减栈则为a<栈顶元素时进栈。\n> 单调递增栈：单调递增栈就是从栈底到栈顶数据是从大到小\n> 单调递减栈：单调递减栈就是从栈底到栈顶数据是从小到大\n\n- leetcode题目\n84.[柱状图中最大的矩形](https://leetcode-cn.com/problems/largest-rectangle-in-histogram/description/\n)\n```c\nint largestRectangleArea(int* heights, int heightsSize) {\n    // 栈顶标记\n    int top = -1;\n    int area = 0;\n    int maxArea = 0;\n    int *stack = (int *)malloc(sizeof(int) * (heightsSize + 2));\n    int *buf = (int *)malloc(sizeof(int) * (heightsSize + 2));\n\n    // 增加前哨兵\n    buf[0] = 0;\n    for (int i = 1; i <= heightsSize; i++) {\n        buf[i] = heights[i - 1];\n    }\n\n    // 在最后增加哨兵\n    buf[heightsSize + 1] = 0;\n\n    stack[++top] = 0;\n    for (int i = 1; i < heightsSize + 2; i++) {\n        while (top > 0 && buf[i] < buf[stack[top]]) {\n            area = (i - stack[top - 1] - 1) * buf[stack[top]];\n            maxArea = maxArea > area ? maxArea : area;\n            top--;\n        }\n        // 索引入栈，其他可能是元素入栈\n        stack[++top] = i;\n    }\n\n    return maxArea;\n}\n```\nleetcode 496、503、739、239\n42.接雨水\nhttps://blog.csdn.net/chongbin007/article/details/112741867?utm_term=%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97leetcode&utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-112741867&spm=3001.4430\n\n\n\n## 单调队列\n&emsp;单调队列是指：队列中的元素之间的关系具有单调性，而且，队首和队尾都可以进行出队操作，只有队尾开源进行入队操作。\n&emsp;单调队列与单调栈及其相似，把单调栈先进后出的性质改为先进先出既可。\n元素进队列的过程对于单调递增队列。\n对于一个元素a，如果a>队尾元素，那么直接将a扔进队列，如果a<=队尾元素，则将队尾元素出队列，直到满足 a>队尾元素即可。\n\n>单调递增队列(从队首到队尾满足递增)\n>单调递减队列(从队首到队尾满足递减)\n- 单调队列作用：队列里的元素满足出队的单调性。\n- 单调队列操作：去头和删尾\n\n- leetcode 题目\n[剑指 Offer 59 - II. 队列的最大值](https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof/)\n```c\ntypedef struct {\n    int arr[20000];\n    int begin;\n    int end;\n} MaxQueue;\n\nMaxQueue* maxQueueCreate()\n{\n    MaxQueue *tmp = (MaxQueue*)malloc(sizeof(MaxQueue));\n    tmp->begin = 0;\n    tmp->end = 0;\n    return tmp;\n}\n\nint maxQueueMax_value(MaxQueue* obj)\n{\n    int ans = -1;\n    for (int i = obj->begin; i < obj->end; i++) {\n        ans = fmax(ans, obj->arr[i]);\n    }\n    return ans;\n}\n\nvoid maxQueuPus_back(MaxQueue* obj, int value)\n{\n    obj->arr[obj->end++] = value;\n}\nint maxQueuePop_front(MaxQueue* obj) \n{\n    if(obj->begin==obj->end)\n    {\n        return -1;\n    }\n    else\n    {\n        return obj->arr[obj->begin++];\n    }\n}\n\nvoid maxQueueFree(MaxQueue* obj) \n{\n    obj->end=0;\n    obj->begin=0;\n}\n\n```\n\n239.滑动窗口最大值\n\n```c\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst int Size=1000005;\nint a[Size],qmax[Size],qmin[Size],savemax[Size],savemin[Size];\nint main()\n{\n    int n,k,cnt=1;\n    scanf(\"%d %d\",&n,&k);\n    for(int i=1;i<=n;i++)\n    {scanf(\"%d\",&a[i]);}\n    int beg=1,top=0;//qmax队列的队首指针和队尾指针\n    int st=1,ed=0;//qmin队列的队首指针和队尾指针\n    for(int i=1;i<=n;i++)\n    {\n        while(beg<=top&&a[i]>=a[qmax[top]])\n        {top--;}\n        qmax[++top]=i;\n        while(st<=ed&&a[i]<=a[qmin[ed]])\n        {ed--;}\n        qmin[++ed]=i;\n        if(i>=k)\n        {\n            while(qmax[beg]<=i-k)beg++;\n            while(qmin[st]<=i-k)st++;\n            savemax[cnt]=a[qmax[beg]];\n            savemin[cnt]=a[qmin[st]];\n            cnt++;\n        }\n    }\n    for(int i=1;i< cnt;i++) {\n        printf(\"%d \",savemin[i]);\n    }\n    printf(\"\\n\");\n    for(int i=1;i< cnt;i++) {\n        printf(\"%d \",savemax[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n```\n## 并查集\n\n## 滑动窗口&双指针\n\nhttps://www.cnblogs.com/zzcxxoo/p/13216030.html\n\n## 前缀与哈希\n\n## 拓扑排序\n\n## 字符串\n\n## BFS\n\n## DFS\n\n## 动态规划\n\n## 贪心算法\n\n## 字典树\n\n\n\n","slug":"2021/11/leetcode题解算法","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckwji3h3x000eakuubyp56yik","content":"<h2 id=\"单调栈\"><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h2><span id=\"more\"></span>\n<p> 单调递增栈，元素进栈过程，若当前进栈的元素a，如果a&gt;栈顶元素，则直接将a进栈，如果a&lt;=栈顶元素，则不断将栈顶元素出栈，直到满足a&gt;栈顶元素。单调递减栈则为a&lt;栈顶元素时进栈。</p>\n<blockquote>\n<p>单调递增栈：单调递增栈就是从栈底到栈顶数据是从大到小<br>单调递减栈：单调递减栈就是从栈底到栈顶数据是从小到大</p>\n</blockquote>\n<ul>\n<li>leetcode题目</li>\n</ul>\n<p>84.<a href=\"https://leetcode-cn.com/problems/largest-rectangle-in-histogram/description/\">柱状图中最大的矩形</a></p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">largestRectangleArea</span><span class=\"params\">(<span class=\"keyword\">int</span>* heights, <span class=\"keyword\">int</span> heightsSize)</span> </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 栈顶标记</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> top = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> area = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxArea = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *<span class=\"built_in\">stack</span> = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (heightsSize + <span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *buf = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (heightsSize + <span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 增加前哨兵</span></span><br><span class=\"line\">    buf[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= heightsSize; i++) {</span><br><span class=\"line\">        buf[i] = heights[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在最后增加哨兵</span></span><br><span class=\"line\">    buf[heightsSize + <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">stack</span>[++top] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; heightsSize + <span class=\"number\">2</span>; i++) {</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (top &gt; <span class=\"number\">0</span> &amp;&amp; buf[i] &lt; buf[<span class=\"built_in\">stack</span>[top]]) {</span><br><span class=\"line\">            area = (i - <span class=\"built_in\">stack</span>[top - <span class=\"number\">1</span>] - <span class=\"number\">1</span>) * buf[<span class=\"built_in\">stack</span>[top]];</span><br><span class=\"line\">            maxArea = maxArea &gt; area ? maxArea : area;</span><br><span class=\"line\">            top--;</span><br><span class=\"line\">        }</span><br><span class=\"line\">        <span class=\"comment\">// 索引入栈，其他可能是元素入栈</span></span><br><span class=\"line\">        <span class=\"built_in\">stack</span>[++top] = i;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxArea;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<p>leetcode 496、503、739、239<br>42.接雨水<br><a href=\"https://blog.csdn.net/chongbin007/article/details/112741867?utm_term=%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97leetcode&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-112741867&amp;spm=3001.4430\">https://blog.csdn.net/chongbin007/article/details/112741867?utm_term=%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97leetcode&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-112741867&amp;spm=3001.4430</a></p>\n<h2 id=\"单调队列\"><a href=\"#单调队列\" class=\"headerlink\" title=\"单调队列\"></a>单调队列</h2><p> 单调队列是指：队列中的元素之间的关系具有单调性，而且，队首和队尾都可以进行出队操作，只有队尾开源进行入队操作。<br> 单调队列与单调栈及其相似，把单调栈先进后出的性质改为先进先出既可。<br>元素进队列的过程对于单调递增队列。<br>对于一个元素a，如果a&gt;队尾元素，那么直接将a扔进队列，如果a&lt;=队尾元素，则将队尾元素出队列，直到满足 a&gt;队尾元素即可。</p>\n<blockquote>\n<p>单调递增队列(从队首到队尾满足递增)<br>单调递减队列(从队首到队尾满足递减)</p>\n</blockquote>\n<ul>\n<li><p>单调队列作用：队列里的元素满足出队的单调性。</p>\n</li>\n<li><p>单调队列操作：去头和删尾</p>\n</li>\n<li><p>leetcode 题目<br><a href=\"https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof/\">剑指 Offer 59 - II. 队列的最大值</a></p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> {</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[<span class=\"number\">20000</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> begin;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end;</span><br><span class=\"line\">} MaxQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">MaxQueue* <span class=\"title\">maxQueueCreate</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    MaxQueue *tmp = (MaxQueue*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(MaxQueue));</span><br><span class=\"line\">    tmp-&gt;begin = <span class=\"number\">0</span>;</span><br><span class=\"line\">    tmp-&gt;end = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxQueueMax_value</span><span class=\"params\">(MaxQueue* obj)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = obj-&gt;begin; i &lt; obj-&gt;end; i++) {</span><br><span class=\"line\">        ans = fmax(ans, obj-&gt;arr[i]);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">maxQueuPus_back</span><span class=\"params\">(MaxQueue* obj, <span class=\"keyword\">int</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    obj-&gt;arr[obj-&gt;end++] = value;</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxQueuePop_front</span><span class=\"params\">(MaxQueue* obj)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj-&gt;begin==obj-&gt;end)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj-&gt;arr[obj-&gt;begin++];</span><br><span class=\"line\">    }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">maxQueueFree</span><span class=\"params\">(MaxQueue* obj)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    obj-&gt;end=<span class=\"number\">0</span>;</span><br><span class=\"line\">    obj-&gt;begin=<span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></tbody></table></figure></li>\n</ul>\n<p>239.滑动窗口最大值</p>\n<figure class=\"highlight c\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> Size=<span class=\"number\">1000005</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[Size],qmax[Size],qmin[Size],savemax[Size],savemin[Size];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>{</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,k,cnt=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>,&amp;n,&amp;k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    {<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;a[i]);}</span><br><span class=\"line\">    <span class=\"keyword\">int</span> beg=<span class=\"number\">1</span>,top=<span class=\"number\">0</span>;<span class=\"comment\">//qmax队列的队首指针和队尾指针</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> st=<span class=\"number\">1</span>,ed=<span class=\"number\">0</span>;<span class=\"comment\">//qmin队列的队首指针和队尾指针</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    {</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(beg&lt;=top&amp;&amp;a[i]&gt;=a[qmax[top]])</span><br><span class=\"line\">        {top--;}</span><br><span class=\"line\">        qmax[++top]=i;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(st&lt;=ed&amp;&amp;a[i]&lt;=a[qmin[ed]])</span><br><span class=\"line\">        {ed--;}</span><br><span class=\"line\">        qmin[++ed]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;=k)</span><br><span class=\"line\">        {</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(qmax[beg]&lt;=i-k)beg++;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(qmin[st]&lt;=i-k)st++;</span><br><span class=\"line\">            savemax[cnt]=a[qmax[beg]];</span><br><span class=\"line\">            savemin[cnt]=a[qmin[st]];</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt; cnt;i++) {</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,savemin[i]);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt; cnt;i++) {</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>,savemax[i]);</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h2><h2 id=\"滑动窗口-amp-双指针\"><a href=\"#滑动窗口-amp-双指针\" class=\"headerlink\" title=\"滑动窗口&amp;双指针\"></a>滑动窗口&amp;双指针</h2><p><a href=\"https://www.cnblogs.com/zzcxxoo/p/13216030.html\">https://www.cnblogs.com/zzcxxoo/p/13216030.html</a></p>\n<h2 id=\"前缀与哈希\"><a href=\"#前缀与哈希\" class=\"headerlink\" title=\"前缀与哈希\"></a>前缀与哈希</h2><h2 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h2><h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h2 id=\"BFS\"><a href=\"#BFS\" class=\"headerlink\" title=\"BFS\"></a>BFS</h2><h2 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h2><h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><h2 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h2><h2 id=\"字典树\"><a href=\"#字典树\" class=\"headerlink\" title=\"字典树\"></a>字典树</h2>","site":{"data":{}},"abbrlink":"15JYAPP","length":3129,"excerpt":"<h2 id=\"单调栈\"><a href=\"#单调栈\" class=\"headerlink\" title=\"单调栈\"></a>单调栈</h2>","more":"<p>&emsp;单调递增栈，元素进栈过程，若当前进栈的元素a，如果a&gt;栈顶元素，则直接将a进栈，如果a&lt;=栈顶元素，则不断将栈顶元素出栈，直到满足a&gt;栈顶元素。单调递减栈则为a&lt;栈顶元素时进栈。</p>\n<blockquote>\n<p>单调递增栈：单调递增栈就是从栈底到栈顶数据是从大到小<br>单调递减栈：单调递减栈就是从栈底到栈顶数据是从小到大</p>\n</blockquote>\n<ul>\n<li>leetcode题目</li>\n</ul>\n<p>84.<a href=\"https://leetcode-cn.com/problems/largest-rectangle-in-histogram/description/\">柱状图中最大的矩形</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">largestRectangleArea</span><span class=\"params\">(<span class=\"keyword\">int</span>* heights, <span class=\"keyword\">int</span> heightsSize)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 栈顶标记</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> top = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> area = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> maxArea = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *<span class=\"built_in\">stack</span> = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (heightsSize + <span class=\"number\">2</span>));</span><br><span class=\"line\">    <span class=\"keyword\">int</span> *buf = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>) * (heightsSize + <span class=\"number\">2</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 增加前哨兵</span></span><br><span class=\"line\">    buf[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= heightsSize; i++) &#123;</span><br><span class=\"line\">        buf[i] = heights[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 在最后增加哨兵</span></span><br><span class=\"line\">    buf[heightsSize + <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">stack</span>[++top] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; heightsSize + <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (top &gt; <span class=\"number\">0</span> &amp;&amp; buf[i] &lt; buf[<span class=\"built_in\">stack</span>[top]]) &#123;</span><br><span class=\"line\">            area = (i - <span class=\"built_in\">stack</span>[top - <span class=\"number\">1</span>] - <span class=\"number\">1</span>) * buf[<span class=\"built_in\">stack</span>[top]];</span><br><span class=\"line\">            maxArea = maxArea &gt; area ? maxArea : area;</span><br><span class=\"line\">            top--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 索引入栈，其他可能是元素入栈</span></span><br><span class=\"line\">        <span class=\"built_in\">stack</span>[++top] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxArea;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>leetcode 496、503、739、239<br>42.接雨水<br><a href=\"https://blog.csdn.net/chongbin007/article/details/112741867?utm_term=%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97leetcode&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-112741867&amp;spm=3001.4430\">https://blog.csdn.net/chongbin007/article/details/112741867?utm_term=%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97leetcode&amp;utm_medium=distribute.pc_aggpage_search_result.none-task-blog-2~all~sobaiduweb~default-0-112741867&amp;spm=3001.4430</a></p>\n<h2 id=\"单调队列\"><a href=\"#单调队列\" class=\"headerlink\" title=\"单调队列\"></a>单调队列</h2><p>&emsp;单调队列是指：队列中的元素之间的关系具有单调性，而且，队首和队尾都可以进行出队操作，只有队尾开源进行入队操作。<br>&emsp;单调队列与单调栈及其相似，把单调栈先进后出的性质改为先进先出既可。<br>元素进队列的过程对于单调递增队列。<br>对于一个元素a，如果a&gt;队尾元素，那么直接将a扔进队列，如果a&lt;=队尾元素，则将队尾元素出队列，直到满足 a&gt;队尾元素即可。</p>\n<blockquote>\n<p>单调递增队列(从队首到队尾满足递增)<br>单调递减队列(从队首到队尾满足递减)</p>\n</blockquote>\n<ul>\n<li><p>单调队列作用：队列里的元素满足出队的单调性。</p>\n</li>\n<li><p>单调队列操作：去头和删尾</p>\n</li>\n<li><p>leetcode 题目<br><a href=\"https://leetcode-cn.com/problems/dui-lie-de-zui-da-zhi-lcof/\">剑指 Offer 59 - II. 队列的最大值</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[<span class=\"number\">20000</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> begin;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> end;</span><br><span class=\"line\">&#125; MaxQueue;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">MaxQueue* <span class=\"title\">maxQueueCreate</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    MaxQueue *tmp = (MaxQueue*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(MaxQueue));</span><br><span class=\"line\">    tmp-&gt;begin = <span class=\"number\">0</span>;</span><br><span class=\"line\">    tmp-&gt;end = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxQueueMax_value</span><span class=\"params\">(MaxQueue* obj)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ans = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = obj-&gt;begin; i &lt; obj-&gt;end; i++) &#123;</span><br><span class=\"line\">        ans = fmax(ans, obj-&gt;arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">maxQueuPus_back</span><span class=\"params\">(MaxQueue* obj, <span class=\"keyword\">int</span> value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    obj-&gt;arr[obj-&gt;end++] = value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxQueuePop_front</span><span class=\"params\">(MaxQueue* obj)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(obj-&gt;begin==obj-&gt;end)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj-&gt;arr[obj-&gt;begin++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">maxQueueFree</span><span class=\"params\">(MaxQueue* obj)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    obj-&gt;end=<span class=\"number\">0</span>;</span><br><span class=\"line\">    obj-&gt;begin=<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>239.滑动窗口最大值</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ll long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> Size=<span class=\"number\">1000005</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[Size],qmax[Size],qmin[Size],savemax[Size],savemin[Size];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n,k,cnt=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>,&amp;n,&amp;k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a[i]);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> beg=<span class=\"number\">1</span>,top=<span class=\"number\">0</span>;<span class=\"comment\">//qmax队列的队首指针和队尾指针</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> st=<span class=\"number\">1</span>,ed=<span class=\"number\">0</span>;<span class=\"comment\">//qmin队列的队首指针和队尾指针</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(beg&lt;=top&amp;&amp;a[i]&gt;=a[qmax[top]])</span><br><span class=\"line\">        &#123;top--;&#125;</span><br><span class=\"line\">        qmax[++top]=i;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(st&lt;=ed&amp;&amp;a[i]&lt;=a[qmin[ed]])</span><br><span class=\"line\">        &#123;ed--;&#125;</span><br><span class=\"line\">        qmin[++ed]=i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;=k)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(qmax[beg]&lt;=i-k)beg++;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(qmin[st]&lt;=i-k)st++;</span><br><span class=\"line\">            savemax[cnt]=a[qmax[beg]];</span><br><span class=\"line\">            savemin[cnt]=a[qmin[st]];</span><br><span class=\"line\">            cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt; cnt;i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,savemin[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt; cnt;i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,savemax[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"并查集\"><a href=\"#并查集\" class=\"headerlink\" title=\"并查集\"></a>并查集</h2><h2 id=\"滑动窗口-amp-双指针\"><a href=\"#滑动窗口-amp-双指针\" class=\"headerlink\" title=\"滑动窗口&amp;双指针\"></a>滑动窗口&amp;双指针</h2><p><a href=\"https://www.cnblogs.com/zzcxxoo/p/13216030.html\">https://www.cnblogs.com/zzcxxoo/p/13216030.html</a></p>\n<h2 id=\"前缀与哈希\"><a href=\"#前缀与哈希\" class=\"headerlink\" title=\"前缀与哈希\"></a>前缀与哈希</h2><h2 id=\"拓扑排序\"><a href=\"#拓扑排序\" class=\"headerlink\" title=\"拓扑排序\"></a>拓扑排序</h2><h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h2 id=\"BFS\"><a href=\"#BFS\" class=\"headerlink\" title=\"BFS\"></a>BFS</h2><h2 id=\"DFS\"><a href=\"#DFS\" class=\"headerlink\" title=\"DFS\"></a>DFS</h2><h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><h2 id=\"贪心算法\"><a href=\"#贪心算法\" class=\"headerlink\" title=\"贪心算法\"></a>贪心算法</h2><h2 id=\"字典树\"><a href=\"#字典树\" class=\"headerlink\" title=\"字典树\"></a>字典树</h2>"},{"title":"C/C++内存管理","date":"2021-11-06T16:47:53.000Z","updated":"2021-11-06T16:53:53.000Z","_content":"\n## 一、内存\n&emsp;在计算机中，不同应用程序之间的内存是相互独立的，通常情况下不可以相互访问。\n\n<!--more-->\n\n1、内存四区\n从下到上为：代码区、数据区、堆区、栈区。\n栈区：存储临时变量的区域，临时变量包括：局部变量、返回值、参数、返回地址。这些变量超出作用域自动弹出。超出栈大小将会栈溢出。栈从栈顶自上而下，最下端为0x0000。\n堆区：比较大的内存区域，用于动态内存分配，由开放人员申请和释放，在程序结束时未释放，将会右系统自动回收。\n数据区：主要存放全局变量、常量和静态变量；数据区又可以划分为：全局区和静态区。\n代码区：主要纯粹可执行代码。属性为只读的。\n\n## 二、malloc和free\n&emsp;在 C 语言（不是 C++)中，malloc 和 free 是系统提供的函数，成对使用，用于从堆中分配和释放内存。malloc 的全称是 memory allocation 译为“动态内存分配”。\n\n- 参考链接：\nhttps://mp.weixin.qq.com/s/mgJXEnhgvGSY4uwMRzLZeQ","source":"_posts/2021/11/内存.md","raw":"---\ntitle: C/C++内存管理\ndate: 2021-11-07 00:47:53\nupdated: 2021-11-07 00:53:53\ncategories: \n    - tool\ntags: \n    - Computer Science\n    - Another Tag\n---\n\n## 一、内存\n&emsp;在计算机中，不同应用程序之间的内存是相互独立的，通常情况下不可以相互访问。\n\n<!--more-->\n\n1、内存四区\n从下到上为：代码区、数据区、堆区、栈区。\n栈区：存储临时变量的区域，临时变量包括：局部变量、返回值、参数、返回地址。这些变量超出作用域自动弹出。超出栈大小将会栈溢出。栈从栈顶自上而下，最下端为0x0000。\n堆区：比较大的内存区域，用于动态内存分配，由开放人员申请和释放，在程序结束时未释放，将会右系统自动回收。\n数据区：主要存放全局变量、常量和静态变量；数据区又可以划分为：全局区和静态区。\n代码区：主要纯粹可执行代码。属性为只读的。\n\n## 二、malloc和free\n&emsp;在 C 语言（不是 C++)中，malloc 和 free 是系统提供的函数，成对使用，用于从堆中分配和释放内存。malloc 的全称是 memory allocation 译为“动态内存分配”。\n\n- 参考链接：\nhttps://mp.weixin.qq.com/s/mgJXEnhgvGSY4uwMRzLZeQ","slug":"2021/11/内存","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ckwji3h4g000yakuuadrqd1h6","content":"<h2 id=\"一、内存\"><a href=\"#一、内存\" class=\"headerlink\" title=\"一、内存\"></a>一、内存</h2><p> 在计算机中，不同应用程序之间的内存是相互独立的，通常情况下不可以相互访问。</p>\n<span id=\"more\"></span>\n\n<p>1、内存四区<br>从下到上为：代码区、数据区、堆区、栈区。<br>栈区：存储临时变量的区域，临时变量包括：局部变量、返回值、参数、返回地址。这些变量超出作用域自动弹出。超出栈大小将会栈溢出。栈从栈顶自上而下，最下端为0x0000。<br>堆区：比较大的内存区域，用于动态内存分配，由开放人员申请和释放，在程序结束时未释放，将会右系统自动回收。<br>数据区：主要存放全局变量、常量和静态变量；数据区又可以划分为：全局区和静态区。<br>代码区：主要纯粹可执行代码。属性为只读的。</p>\n<h2 id=\"二、malloc和free\"><a href=\"#二、malloc和free\" class=\"headerlink\" title=\"二、malloc和free\"></a>二、malloc和free</h2><p> 在 C 语言（不是 C++)中，malloc 和 free 是系统提供的函数，成对使用，用于从堆中分配和释放内存。malloc 的全称是 memory allocation 译为“动态内存分配”。</p>\n<ul>\n<li>参考链接：<br><a href=\"https://mp.weixin.qq.com/s/mgJXEnhgvGSY4uwMRzLZeQ\">https://mp.weixin.qq.com/s/mgJXEnhgvGSY4uwMRzLZeQ</a></li>\n</ul>\n","site":{"data":{}},"abbrlink":"1MVTB59","length":428,"excerpt":"<h2 id=\"一、内存\"><a href=\"#一、内存\" class=\"headerlink\" title=\"一、内存\"></a>一、内存</h2><p> 在计算机中，不同应用程序之间的内存是相互独立的，通常情况下不可以相互访问。</p>","more":"<p>1、内存四区<br>从下到上为：代码区、数据区、堆区、栈区。<br>栈区：存储临时变量的区域，临时变量包括：局部变量、返回值、参数、返回地址。这些变量超出作用域自动弹出。超出栈大小将会栈溢出。栈从栈顶自上而下，最下端为0x0000。<br>堆区：比较大的内存区域，用于动态内存分配，由开放人员申请和释放，在程序结束时未释放，将会右系统自动回收。<br>数据区：主要存放全局变量、常量和静态变量；数据区又可以划分为：全局区和静态区。<br>代码区：主要纯粹可执行代码。属性为只读的。</p>\n<h2 id=\"二、malloc和free\"><a href=\"#二、malloc和free\" class=\"headerlink\" title=\"二、malloc和free\"></a>二、malloc和free</h2><p>&emsp;在 C 语言（不是 C++)中，malloc 和 free 是系统提供的函数，成对使用，用于从堆中分配和释放内存。malloc 的全称是 memory allocation 译为“动态内存分配”。</p>\n<ul>\n<li>参考链接：<br><a href=\"https://mp.weixin.qq.com/s/mgJXEnhgvGSY4uwMRzLZeQ\">https://mp.weixin.qq.com/s/mgJXEnhgvGSY4uwMRzLZeQ</a></li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckwji3h3u0009akuu9v290dq2","category_id":"ckwji3h3r0004akuu0g194urk","_id":"ckwji3h3y000fakuudn11fbeu"},{"post_id":"ckwji3h3o0001akuu26hw1ifk","category_id":"ckwji3h3r0004akuu0g194urk","_id":"ckwji3h3z000iakuuek17cads"},{"post_id":"ckwji3h3w000bakuubukv1ulc","category_id":"ckwji3h3r0004akuu0g194urk","_id":"ckwji3h3z000kakuu4hhr4hl5"},{"post_id":"ckwji3h3x000eakuubyp56yik","category_id":"ckwji3h3r0004akuu0g194urk","_id":"ckwji3h3z000nakuugpz62aiz"},{"post_id":"ckwji3h3q0003akuuc8lxffwx","category_id":"ckwji3h3r0004akuu0g194urk","_id":"ckwji3h40000pakuug9jbeoxn"},{"post_id":"ckwji3h4g000yakuuadrqd1h6","category_id":"ckwji3h3r0004akuu0g194urk","_id":"ckwji3h4i0010akuu4hamaem5"},{"post_id":"ckwji3h3x000eakuubyp56yik","category_id":"ckwji3h7z0013akuu3p3d9rhf","_id":"ckwji3h9e0017akuu8xbufr9e"},{"post_id":"ckwji3h3x000eakuubyp56yik","category_id":"ckwji3h9d0015akuu86b166kr","_id":"ckwji3h9e0018akuu6v5ledf1"},{"post_id":"ckwji3h4g000yakuuadrqd1h6","category_id":"ckwji3h7z0013akuu3p3d9rhf","_id":"ckwji3h9e0019akuu3b4b8tle"},{"post_id":"ckwji3h4g000yakuuadrqd1h6","category_id":"ckwji3h9d0015akuu86b166kr","_id":"ckwji3h9e001aakuugt3yavc4"}],"PostTag":[{"post_id":"ckwji3h3x000eakuubyp56yik","tag_id":"ckwji3h3s0005akuue1ad0j2y","_id":"ckwji3h3z000hakuudxejdny5"},{"post_id":"ckwji3h3x000eakuubyp56yik","tag_id":"ckwji3h3w000dakuu1zfp7zof","_id":"ckwji3h3z000jakuud3zz2az6"},{"post_id":"ckwji3h3o0001akuu26hw1ifk","tag_id":"ckwji3h3s0005akuue1ad0j2y","_id":"ckwji3h3z000makuue2vefgoa"},{"post_id":"ckwji3h3o0001akuu26hw1ifk","tag_id":"ckwji3h3w000dakuu1zfp7zof","_id":"ckwji3h3z000oakuu2vy8aiw5"},{"post_id":"ckwji3h3q0003akuuc8lxffwx","tag_id":"ckwji3h3s0005akuue1ad0j2y","_id":"ckwji3h40000rakuu7r170euy"},{"post_id":"ckwji3h3q0003akuuc8lxffwx","tag_id":"ckwji3h3w000dakuu1zfp7zof","_id":"ckwji3h40000sakuudd863qqs"},{"post_id":"ckwji3h3u0009akuu9v290dq2","tag_id":"ckwji3h3s0005akuue1ad0j2y","_id":"ckwji3h40000uakuu9fcz29s2"},{"post_id":"ckwji3h3u0009akuu9v290dq2","tag_id":"ckwji3h3w000dakuu1zfp7zof","_id":"ckwji3h40000vakuu7ml9efgd"},{"post_id":"ckwji3h3w000bakuubukv1ulc","tag_id":"ckwji3h3s0005akuue1ad0j2y","_id":"ckwji3h41000wakuuer4m6b7k"},{"post_id":"ckwji3h3w000bakuubukv1ulc","tag_id":"ckwji3h3w000dakuu1zfp7zof","_id":"ckwji3h41000xakuu84ra8d0l"},{"post_id":"ckwji3h4g000yakuuadrqd1h6","tag_id":"ckwji3h4h000zakuu3i8x6i93","_id":"ckwji3h4i0011akuu9w2gat2w"},{"post_id":"ckwji3h4g000yakuuadrqd1h6","tag_id":"ckwji3h3w000dakuu1zfp7zof","_id":"ckwji3h4i0012akuuglmnfipx"}],"Tag":[{"name":"实用教程","_id":"ckwji3h3s0005akuue1ad0j2y"},{"name":"Another Tag","_id":"ckwji3h3w000dakuu1zfp7zof"},{"name":"Computer Science","_id":"ckwji3h4h000zakuu3i8x6i93"}]}}