<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>WSL</title>
    <url>/2021/10/27/WSL/</url>
    <content><![CDATA[<h2 id="安装ubuntu20-04"><a href="#安装ubuntu20-04" class="headerlink" title="安装ubuntu20.04"></a>安装ubuntu20.04</h2><p>安装到非系统盘目录，下载离线安装包，复制到想要安装的目录下，解压，以管理员身份运行ubuntu2004.exe</p>
<h2 id="卸载wsl"><a href="#卸载wsl" class="headerlink" title="卸载wsl"></a>卸载wsl</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wslconfig /l</span><br><span class="line"><span class="comment"># 从列表中选择要卸载的发行版（例如Ubuntu）并键入命令</span></span><br><span class="line">wslconfig /u Ubuntu</span><br></pre></td></tr></table></figure>
<p>参考链接：<a href="https://blog.csdn.net/zhangpeterx/article/details/97616268">WSL系列操作：安装，卸载</a></p>
<span id="more"></span>

<h2 id="设置wsl"><a href="#设置wsl" class="headerlink" title="设置wsl"></a>设置wsl</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更改默认root用户登录</span></span><br><span class="line">ubuntu1804.exe config --default-user root</span><br><span class="line"><span class="comment"># 更改默认登陆目录</span></span><br><span class="line"><span class="comment"># list 中 Ubuntu-20.04 条目中添加</span></span><br><span class="line"><span class="string">&quot;startingDirectory&quot;</span>: <span class="string">&quot;//wsl$/Ubuntu-20.04&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="ubuntu-换源"><a href="#ubuntu-换源" class="headerlink" title="ubuntu 换源"></a>ubuntu 换源</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 备份</span></span><br><span class="line">cp /etc/apt/sources.list /etc/apt/sources.list.20211013</span><br><span class="line">lsb_release -c</span><br><span class="line">lsb_release -a</span><br><span class="line"><span class="comment"># </span></span><br><span class="line"></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>参考链接：<a href="https://blog.csdn.net/qq_33706673/article/details/106869016">ubuntu20.04更改国内镜像源</a></p>
<h2 id="Read-The-Docs-环境搭建"><a href="#Read-The-Docs-环境搭建" class="headerlink" title="Read The Docs 环境搭建"></a>Read The Docs 环境搭建</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">sudo apt-get install python3-pip</span><br><span class="line"></span><br><span class="line">pip install sphinx sphinx-autobuild sphinx_rtd_theme</span><br><span class="line">pip install recommonmark</span><br><span class="line">pip install sphinx-markdown-tables</span><br><span class="line">pip install Pyinstaller -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</span><br><span class="line">（其中的Pyinstaller是你需要下载的库或包名，根据自己需求自行更改即可）</span><br><span class="line"></span><br><span class="line">extensions = [</span><br><span class="line">    <span class="string">&#x27;recommonmark&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sphinx_markdown_tables&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">python3 -m pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>

<p>参考链接：<br><a href="https://zhuanlan.zhihu.com/p/112919704">VsCode +Read The Docs 环境搭建</a><br><br></p>
<p><a href="https://zhuanlan.zhihu.com/p/264647009">Sphinx + Read the Docs 从懵逼到入门</a><br><br></p>
<p><a href="https://zhuanlan.zhihu.com/p/388640347">ReadTheDocs搭建第一本电子书</a></p>
<p><a href="https://www.jianshu.com/p/8aae1c1453ae">https://www.jianshu.com/p/8aae1c1453ae</a></p>
<h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>git push -u origin main</p>
<p><a href="https://zhuanlan.zhihu.com/p/252505037">玩转WSL(6)之Git配置</a></p>
<h2 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h2><p>winget search Microsoft.PowerShell</p>
<ul>
<li><a href="https://blog.csdn.net/The_Time_Runner/article/details/106038222">Windows Powershell和Windows Terminal的区别</a><br></li>
</ul>
<p><a href="https://docs.microsoft.com/zh-cn/windows/terminal/get-started">安装和设置 Windows 终端</a></p>
<h2 id="windows-包管理工具"><a href="#windows-包管理工具" class="headerlink" title="windows 包管理工具"></a>windows 包管理工具</h2><ul>
<li><p>winget 官方推出</p>
</li>
<li><p>choro</p>
</li>
<li><p>vcpkg<br><a href="https://vcpkg.io/en/getting-started.html">Get started with vcpkg</a></p>
<br></li>
</ul>
<p><a href="https://blog.csdn.net/cjmqas/article/details/79282847">开源库集成器Vcpkg全教程</a></p>
<p> Scoop </p>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>实用教程</tag>
        <tag>Another Tag</tag>
      </tags>
  </entry>
  <entry>
    <title>Software&amp;Tool</title>
    <url>/2021/10/26/Software&amp;Tool/</url>
    <content><![CDATA[<h2 id="GitHub-Pages-Hexo使用及配置"><a href="#GitHub-Pages-Hexo使用及配置" class="headerlink" title="GitHub Pages + Hexo使用及配置"></a>GitHub Pages + Hexo使用及配置</h2><p>github上创建一个  username.github.io 的工程，username 必须为github的用户名</p>
<span id="more"></span>

<h3 id="Hexo-安装"><a href="#Hexo-安装" class="headerlink" title="Hexo 安装"></a>Hexo 安装</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清理缓存</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment"># 生成网页</span></span><br><span class="line">hexo g</span><br><span class="line"><span class="comment"># 启动本地服务端口</span></span><br><span class="line">hexo s</span><br><span class="line"><span class="comment"># 发布到github</span></span><br><span class="line">hexo d</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.jianshu.com/p/f82c76b90336">https://www.jianshu.com/p/f82c76b90336</a></p>
<p><a href="https://www.jianshu.com/p/5d0b31032d55">https://www.jianshu.com/p/5d0b31032d55</a></p>
<p><a href="https://blog.csdn.net/weixin_41922289/article/details/95639870">https://blog.csdn.net/weixin_41922289/article/details/95639870</a></p>
<p><a href="https://theme-next.org/">https://theme-next.org/</a></p>
<p><a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>
<p><a href="https://www.jianshu.com/p/3a05351a37dc">https://www.jianshu.com/p/3a05351a37dc</a></p>
<p><a href="https://www.zhyong.cn/posts/ca02/">https://www.zhyong.cn/posts/ca02/</a></p>
<p><a href="http://theme-next.iissnan.com/">http://theme-next.iissnan.com/</a></p>
<ul>
<li>Hexo博客添加helper-live2d动态模型插件<br><a href="https://blog.csdn.net/qq_30930805/article/details/">https://blog.csdn.net/qq_30930805/article/details/</a></li>
</ul>
<h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><h3 id="vscode-上传图片"><a href="#vscode-上传图片" class="headerlink" title="vscode 上传图片"></a>vscode 上传图片</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 上传剪贴板中的图片到服务器。</span></span><br><span class="line">ctrl + alt + u</span><br><span class="line"><span class="comment"># 打开文件浏览器选择图片上传。</span></span><br><span class="line">ctrl + alt + e</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><a href="https://www.jianshu.com/p/868b3a2028f8">https://www.jianshu.com/p/868b3a2028f8</a></li>
</ul>
<h2 id="plantuml"><a href="#plantuml" class="headerlink" title="plantuml"></a>plantuml</h2><h2 id="windows-开源软件"><a href="#windows-开源软件" class="headerlink" title="windows 开源软件"></a>windows 开源软件</h2><p> potplayer<br><a href="https://iptv-org.github.io/iptv/index.m3u">https://iptv-org.github.io/iptv/index.m3u</a></p>
<p>everyting</p>
<p>7zip</p>
<p>rustdesk  远程开源软件</p>
<p>maya</p>
<p>imagine</p>
<p>screentogif</p>
<p>ditto</p>
<p>bleachbit</p>
<p>qbittorrent</p>
<p>grammarly</p>
<p>剪切板win10自带的有很多剪切记录的快捷键Windows键➕V键</p>
<p>线上思维导图<br><a href="https://gitmind.cn/app/template">https://gitmind.cn/app/template</a><br>在线文档转换<br><a href="https://www.aconvert.com/cn/">https://www.aconvert.com/cn/</a><br>开源软件下载网站<br><a href="https://www.fosshub.com/#">https://www.fosshub.com/#</a></p>
<h3 id="windows-ternial"><a href="#windows-ternial" class="headerlink" title="windows ternial"></a>windows ternial</h3><ul>
<li>添加 git base 到ternial</li>
</ul>
<h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h2><h3 id="linux-各种系统"><a href="#linux-各种系统" class="headerlink" title="linux 各种系统"></a>linux 各种系统</h3><p>ubuntu、Linux Mint、suse、Manjaro</p>
<h3 id="chrome插件"><a href="#chrome插件" class="headerlink" title="chrome插件"></a>chrome插件</h3><p>油猴</p>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>实用教程</tag>
        <tag>Another Tag</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/10/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>书单</title>
    <url>/2021/10/27/%E4%B9%A6%E5%8D%95/</url>
    <content><![CDATA[<h2 id=""><a href="#" class="headerlink" title=""></a></h2><ul>
<li>C语言编程魔法书：基于C11标准</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@startuml</span><br><span class="line"></span><br><span class="line">Bob -&gt; Alice : Hello, how are you</span><br><span class="line">Alice -&gt; Bob : Fine, thank you, and you?</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure>

<img  src=http://www.plantuml.com/plantuml/svg/Syp9J4vLqBLJSCfFib9mB2t9ICqhoKnEBCdCprC8IYqiJIqkuGBAAUW2rJY256DHLLoGdrUSoiNbY6fONZvGNP52OaafDaCXYcrqTT5KOpSS0000>]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>实用教程</tag>
        <tag>Another Tag</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法基础</title>
    <url>/2021/10/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="1-程序性能"><a href="#1-程序性能" class="headerlink" title="1 程序性能"></a>1 程序性能</h2><span id="more"></span>

<p>&ensp;程序性能是指运行程序所需要的内存和时间,运行时间和占用空间是算法性能最关键的指标。<br>&ensp;软件程序性能衡量指标:<br>&emsp;响应时间、启动时间、执行时间、执行速度、计算资源分配、内存分配、磁盘吞吐量、网络吞吐量、负载承受能力<br>&ensp;算法在计算机存储器上所占用的存储空间，包括<strong>存储程序本身占用的存储空间，算法输入输出数据所占的存储空间和算法在运行过程中临时占用的存储空间</strong>。</p>
<h3 id="1-1-空间复杂度"><a href="#1-1-空间复杂度" class="headerlink" title="1.1 空间复杂度"></a>1.1 空间复杂度</h3><p>&ensp;空间复杂度(Space complexity)，算法完全运行所需存储空间。表示算法的存储空间与数据规模之间的增长关系：常量空间、线性空间、二维空间。</p>
<h3 id="1-2-时间复杂度"><a href="#1-2-时间复杂度" class="headerlink" title="1.2 时间复杂度"></a>1.2 时间复杂度</h3><p>&ensp;时间复杂度(Time complexity)，算法完全运行所需运算时间。</p>
<p><img src="https://i.loli.net/2021/10/27/UxWCvnRQLYz5eiG.png" alt="20211027233029"></p>
<h4 id="1-2-1-常见算法大O"><a href="#1-2-1-常见算法大O" class="headerlink" title="1.2.1 常见算法大O"></a>1.2.1 常见算法大O</h4><p><img src="https://i.loli.net/2021/10/28/GWOFcUi3qdVIlmf.png" alt="20211028010721"></p>
<h4 id="1-2-2-常见数据结构"><a href="#1-2-2-常见数据结构" class="headerlink" title="1.2.2 常见数据结构"></a>1.2.2 常见数据结构</h4><h3 id="本章参考："><a href="#本章参考：" class="headerlink" title="本章参考："></a>本章参考：</h3><ul>
<li>复杂度速查表<br><a href="https://liam.page/2016/06/20/big-O-cheat-sheet/">https://liam.page/2016/06/20/big-O-cheat-sheet/</a></li>
</ul>
<h2 id="2-基本数据结构"><a href="#2-基本数据结构" class="headerlink" title="2 基本数据结构"></a>2 基本数据结构</h2><h3 id="2-1-线性表"><a href="#2-1-线性表" class="headerlink" title="2.1 线性表"></a>2.1 线性表</h3><p>&ensp;线性表是n个具有相同特性的数据元素的有序序列。线性表除第一个和最后一个数据元素之外，其他数据元素都是首尾相接的。<br>&ensp;数据在实际的物理存储中有两种形式：分散存储和集中存储,常见数据结构有栈、队列、字符串、链表等。<br>&ensp;两种情况下数据的存储问题：<br>&emsp; 数据元素在内存中集中存储，采用顺序表示结构，简称“顺序存储”；<br>&emsp; 数据元素在内存中分散存储，采用链式表示结构，简称“链式存储”</p>
<h4 id="2-1-1-数组"><a href="#2-1-1-数组" class="headerlink" title="2.1.1 数组"></a>2.1.1 数组</h4><p>二分搜索</p>
<h4 id="2-1-2-单链表"><a href="#2-1-2-单链表" class="headerlink" title="2.1.2 单链表"></a>2.1.2 单链表</h4><p>&emsp; 单链表元素之间有一个单独的指针链接。这种结构的链表可以使得从第一个元素遍历到最后一个元素</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ListElmt_</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *data;  <span class="comment">// 数据成员</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ListElmt_</span> * <span class="title">next</span>;</span> <span class="comment">// next指针</span></span><br><span class="line">&#125; ListElmt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List_</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> (*match)(<span class="keyword">const</span> <span class="keyword">void</span> *key1, <span class="keyword">const</span> <span class="keyword">void</span> *key2);</span><br><span class="line">    <span class="keyword">void</span> (*destroy)(<span class="keyword">void</span> *data);</span><br><span class="line">    ListElmt *head;</span><br><span class="line">    ListElmt *tail;</span><br><span class="line">&#125; List;</span><br></pre></td></tr></table></figure>

<h4 id="2-1-3-双链表"><a href="#2-1-3-双链表" class="headerlink" title="2.1.3 双链表"></a>2.1.3 双链表</h4><p>&emsp; 双向链表的元素通过两个指针链接。双向链表可以正向遍历，也可反向遍历。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DListElmt_</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DListElmt_</span> *<span class="title">prev</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DListElmt_</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; DListElmt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DList_</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> (*match)(<span class="keyword">const</span> <span class="keyword">void</span> *key1, <span class="keyword">const</span> <span class="keyword">void</span> *key2);</span><br><span class="line">    <span class="keyword">void</span> (*destroy)(<span class="keyword">void</span> *data);</span><br><span class="line">    DListElmt *head;</span><br><span class="line">    DListElmt *tail;</span><br><span class="line">&#125; DList;</span><br></pre></td></tr></table></figure>

<h4 id="2-1-4-跳表"><a href="#2-1-4-跳表" class="headerlink" title="2.1.4 跳表"></a>2.1.4 跳表</h4><h4 id="2-1-5-栈"><a href="#2-1-5-栈" class="headerlink" title="2.1.5 栈"></a>2.1.5 栈</h4><p>&emsp;栈按照后进先出(LIFO)的顺序存储和检索数据的数据结构，检索元素的顺序和存储元素顺序相反。<br>&emsp;可通过链表来实现栈stack</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> List Stack;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> stack_init list_init;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stack_push</span><span class="params">(Stack *<span class="built_in">stack</span>, <span class="keyword">const</span> <span class="keyword">void</span> *data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">stack_pop</span><span class="params">(Stack *<span class="built_in">stack</span>, <span class="keyword">void</span> **data)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> stack_peek(stack) ((stack)-&gt;head == NULL ? NULL : (stack)-&gt;head-&gt;data);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> stack_size list_size;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-1-6-队列"><a href="#2-1-6-队列" class="headerlink" title="2.1.6 队列"></a>2.1.6 队列</h4><p>&emsp;队列，按照先进先出(FIFO)的顺序存储和检索数据的高效数据结构，按照元素的存储顺序检索元素。<br>&emsp;队列也可通过链表实现。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> List Queue;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> queue_init list_init;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> queue_destroy list_destroy;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queue_enqueue</span><span class="params">(Queue *<span class="built_in">queue</span>, <span class="keyword">const</span> <span class="keyword">void</span> *data)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queue_dequeue</span><span class="params">(Queue *<span class="built_in">queue</span>, <span class="keyword">void</span> **data)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> queue_peek(queue) ((queue)-&gt;head == NULL ? NULL : (queue)-&gt;head-&gt;data);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> queue_size list_size;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-1-7-leetcode题目"><a href="#2-1-7-leetcode题目" class="headerlink" title="2.1.7 leetcode题目"></a>2.1.7 leetcode题目</h4><h3 id="2-2-哈希表"><a href="#2-2-哈希表" class="headerlink" title="2.2 哈希表"></a>2.2 哈希表</h3><p>&emsp;哈希表是一种最有效的检索方法，散列，从本质上看，一个哈希表包含一个数组，通过特殊的索引（键）来访问数组中的元素。哈希表主要思想是通过一个哈希函数，在所有可能的键和值直接建立映射表。</p>
<h4 id="2-2-1-哈希函数设计"><a href="#2-2-1-哈希函数设计" class="headerlink" title="2.2.1 哈希函数设计"></a>2.2.1 哈希函数设计</h4><h4 id="2-2-2-哈希冲突"><a href="#2-2-2-哈希冲突" class="headerlink" title="2.2.2 哈希冲突"></a>2.2.2 哈希冲突</h4><h4 id="2-2-3-leetcode题目"><a href="#2-2-3-leetcode题目" class="headerlink" title="2.2.3 leetcode题目"></a>2.2.3 leetcode题目</h4><h3 id="2-3-树与二叉树"><a href="#2-3-树与二叉树" class="headerlink" title="2.3 树与二叉树"></a>2.3 树与二叉树</h3><h4 id="2-3-1-概述"><a href="#2-3-1-概述" class="headerlink" title="2.3.1 概述"></a>2.3.1 概述</h4><p>&emsp;树由称为结点的元素按照层次结构的方式组织而成。最顶端称为根。与根直接相连的结点称为根的子结点。子节点本身也可以有子结点。除根结点外，每个结点都有唯一的父结点。</p>
<h4 id="2-3-2-树的种类"><a href="#2-3-2-树的种类" class="headerlink" title="2.3.2 树的种类"></a>2.3.2 树的种类</h4><p>&emsp;树有多种结构形式，包括二叉树、。</p>
<h4 id="2-3-3-二叉树"><a href="#2-3-3-二叉树" class="headerlink" title="2.3.3 二叉树"></a>2.3.3 二叉树</h4><p>&emsp;二叉树每个结点最多只有两个与它直接相关联的子结点。直接相连下方的结点称为子结点，每个子结点直接相连的上方结点称为父结点。<br>&emsp;二叉树中结点包含三部分：一个数据成员两个左右指针。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTreeNode_</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTreeNode_</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BiTreeNode_</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125;BiTreeNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiTree_</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> (*compare)(<span class="keyword">const</span> <span class="keyword">void</span> *key1, <span class="keyword">const</span> <span class="keyword">void</span> *key2);</span><br><span class="line">    <span class="keyword">void</span> (*destroy)(<span class="keyword">void</span> *data);</span><br><span class="line">    BiTreeNode *root;</span><br><span class="line">&#125;BiTree;</span><br></pre></td></tr></table></figure>
<p>&emsp;树的周游算法包含先序遍历、中序遍历、后序遍历和层序遍历。</p>
<ul>
<li>先序遍历：先访问根结点，然后左子树，最后右子结点。深度优先思想。</li>
<li>中序遍历：先访问左子结点，然后根结点，最后右子结点。</li>
<li>后序遍历：先访问左子结点，然后右子结点，最后根结点。</li>
<li>层序遍历：先访问树的根结点，然后依次向下层处理，按照从左向右的顺序访问每层结点。广度优先的策略。</li>
</ul>
<h4 id="2-3-4-二叉查找树"><a href="#2-3-4-二叉查找树" class="headerlink" title="2.3.4 二叉查找树"></a>2.3.4 二叉查找树</h4><p>&emsp;二叉查找树是由二叉树组成的专用于查找和搜索目的的一种数据结构。二叉搜索树中查找一个结点，从根结点开始一层一层向下查找，当遇到一个比目标结点值大的结点时，顺着该结点左子树继续查找，如果遇到的结点值小于目标结点，则顺着该结点的右子树查找，直到找到目标结点为止。<br>&emsp;一颗二叉搜索树要插入一个结点，要从根结点开始，一层一层往下，适当地移动左或右子结点上，当到达树的分支尽头时，执行插入操作。<br>&emsp;二叉搜索树是一种用于查找操作的高效数据结构，在最坏情况下，只需查找一个分支上的数据即可。查找操作的复杂度是 O(lgn)，n为树中结点数。<br>&emsp;保持一棵树的平衡是指对于给定数量的结点，要使得树的高度尽可能短。</p>
<p>&emsp;AVL树</p>
<h4 id="2-3-5-平衡树"><a href="#2-3-5-平衡树" class="headerlink" title="2.3.5 平衡树"></a>2.3.5 平衡树</h4><h4 id="2-3-6-堆树和优先队列"><a href="#2-3-6-堆树和优先队列" class="headerlink" title="2.3.6 堆树和优先队列"></a>2.3.6 堆树和优先队列</h4><p>&emsp;堆是一颗二叉树，通常其子结点存储的值比父结点的值小，所以，根结点为树中最大的结点(大顶堆)。同样，根结点也可以是树中最小的结点(小顶堆)。能够快速确定包含最大(小)值的特点。<br>&emsp;堆时左平衡的树，随着结点增加，树会逐级从左至右增长。一个较好地表示左平衡二叉树的方式是，将结点通过层序遍历方式连续存储到一个数组中。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Heap_</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">int</span> (*compare)(<span class="keyword">const</span> <span class="keyword">void</span> *key1, <span class="keyword">const</span> <span class="keyword">void</span> *key2);</span><br><span class="line">    <span class="keyword">void</span> (*destroy)(<span class="keyword">void</span> *data);</span><br><span class="line">    <span class="keyword">void</span> **tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;堆排序，要排序的数据首先存储在一个堆中。从堆中一次取出一个结点。放置到有序数据集的尾部。当取出每个结点时，它的下一个结点就会浮现到堆的顶部。</p>
<p>&emsp;优先队列是从堆衍生的数据结构。在优先队列中，数据保存在一个堆中，可快速确定下一个最高优先级的结点。</p>
<p>&emsp;优先队列将数据按照优先级顺序排列。一个优先队列由许多有序元素构成，所以优先级最高的元素可以有效而快速的确定。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> Heap PQueue;</span><br></pre></td></tr></table></figure>


<h4 id="2-3-7-leetcode题目"><a href="#2-3-7-leetcode题目" class="headerlink" title="2.3.7 leetcode题目"></a>2.3.7 leetcode题目</h4><h2 id="2-4-图"><a href="#2-4-图" class="headerlink" title="2.4 图"></a>2.4 图</h2><p>&emsp;图是一种灵活的数据结构，用来定义对象之间关联或联系的模型。对象由顶点表示，而对象直接的关系或关联则通过顶点之间的边来表示。<br>&emsp;图的访问方式：广度优先和深度优先。</p>
<h3 id="2-4-1-基础知识"><a href="#2-4-1-基础知识" class="headerlink" title="2.4.1 基础知识"></a>2.4.1 基础知识</h3><p>&emsp;图由两种类型的元素组成：顶点和边，顶点代表对象，边则建立起对象之间的关系或关联。图的边可关联值或权重信息。<br>&emsp;图分为有向图和无向图。有向图，边是由两个顶点组成的有序对，具有特定的方向。边也可称为弧。无向图中，边是没有方向的。</p>
<h3 id="2-4-2-图表示"><a href="#2-4-2-图表示" class="headerlink" title="2.4.2 图表示"></a>2.4.2 图表示</h3><p>&emsp;图的表示方法是G=(V, E)，V代表顶点的集合，而E和V之间是二元关系。<br>&emsp;图中由两个重要关系邻接(adjacency)和关联(incidence)。邻接是两个顶点之间的关系。关联是顶点和边之间的关系。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AdjList_</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *vertex;</span><br><span class="line">    Set adjacent;</span><br><span class="line">&#125;AdjList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Graph_</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> vcount;</span><br><span class="line">    <span class="keyword">int</span> ecount;</span><br><span class="line">    <span class="keyword">int</span> (*match)(<span class="keyword">const</span> <span class="keyword">void</span> *key1, <span class="keyword">const</span> <span class="keyword">void</span> *key2);</span><br><span class="line">    List adjlists;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-4-3-图遍历"><a href="#2-4-3-图遍历" class="headerlink" title="2.4.3 图遍历"></a>2.4.3 图遍历</h3><p>&emsp;图的搜索方法：广度优先搜索和深度优先搜索。</p>
<h3 id="2-4-4-最短路径"><a href="#2-4-4-最短路径" class="headerlink" title="2.4.4 最短路径"></a>2.4.4 最短路径</h3><h3 id="2-4-5-拓扑排序"><a href="#2-4-5-拓扑排序" class="headerlink" title="2.4.5 拓扑排序"></a>2.4.5 拓扑排序</h3><h3 id="2-4-6-leetcode题目"><a href="#2-4-6-leetcode题目" class="headerlink" title="2.4.6 leetcode题目"></a>2.4.6 leetcode题目</h3><h2 id="3-常见算法"><a href="#3-常见算法" class="headerlink" title="3 常见算法"></a>3 常见算法</h2><h3 id="3-1-分治法"><a href="#3-1-分治法" class="headerlink" title="3.1 分治法"></a>3.1 分治法</h3><h4 id="3-1-1-概述"><a href="#3-1-1-概述" class="headerlink" title="3.1.1 概述"></a>3.1.1 概述</h4><h4 id="3-1-2-策略"><a href="#3-1-2-策略" class="headerlink" title="3.1.2 策略"></a>3.1.2 策略</h4><h4 id="3-1-3-应用场景"><a href="#3-1-3-应用场景" class="headerlink" title="3.1.3 应用场景"></a>3.1.3 应用场景</h4><h4 id="3-1-4-步骤"><a href="#3-1-4-步骤" class="headerlink" title="3.1.4 步骤"></a>3.1.4 步骤</h4><h4 id="3-1-5-应用"><a href="#3-1-5-应用" class="headerlink" title="3.1.5 应用"></a>3.1.5 应用</h4><h4 id="3-1-6-leetcode题目"><a href="#3-1-6-leetcode题目" class="headerlink" title="3.1.6 leetcode题目"></a>3.1.6 leetcode题目</h4><h2 id="3-2-排序算法"><a href="#3-2-排序算法" class="headerlink" title="3.2 排序算法"></a>3.2 排序算法</h2><p>&emsp;各种排序算法，主要包括：插入排序、快速排序、归并排序、计数排序和技术排序。二分查找，</p>
<h3 id="3-2-1-冒泡排序"><a href="#3-2-1-冒泡排序" class="headerlink" title="3.2.1 冒泡排序"></a>3.2.1 冒泡排序</h3><h3 id="3-2-2-选择排序"><a href="#3-2-2-选择排序" class="headerlink" title="3.2.2 选择排序"></a>3.2.2 选择排序</h3><p>&emsp;</p>
<h3 id="3-2-3-插入排序"><a href="#3-2-3-插入排序" class="headerlink" title="3.2.3 插入排序"></a>3.2.3 插入排序</h3><p>&emsp;插入排序每次从无序数据集合中取出一个元素，插入到已经排好序的数据集中适当位置，使数据集仍然有序。插入排序不需要额外空间。时间复杂度O(n2)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">issort</span><span class="params">(<span class="keyword">void</span> *data, <span class="keyword">int</span> size, <span class="keyword">int</span> esize, <span class="keyword">int</span> (*compare)(<span class="keyword">const</span> <span class="keyword">void</span> *key1, <span class="keyword">const</span> <span class="keyword">void</span> *key2))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *a = data;</span><br><span class="line">    <span class="keyword">void</span> *key;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((key = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(esize)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; size; j++) &#123;</span><br><span class="line">        i = j - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &gt;= <span class="number">0</span> &amp;&amp; compare(&amp;a[i * esize], key) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            mamcpy(&amp;a[(i + <span class="number">1</span>) * esize], &amp;a[i * esize], esize);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;a[(i + <span class="number">1</span>) * esize], key, esize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="3-2-4-希尔排序"><a href="#3-2-4-希尔排序" class="headerlink" title="3.2.4 希尔排序"></a>3.2.4 希尔排序</h3><h3 id="3-2-5-归并排序"><a href="#3-2-5-归并排序" class="headerlink" title="3.2.5 归并排序"></a>3.2.5 归并排序</h3><p>&emsp;归并排序是一种分支排序算法。归并排序需要额外存储空间来完成排序。</p>
<h3 id="3-2-6-快速排序"><a href="#3-2-6-快速排序" class="headerlink" title="3.2.6 快速排序"></a>3.2.6 快速排序</h3><p>&emsp;快速排序是一种分治排序算法。不需要额外存储空间，时间复杂度O(nlgn)</p>
<p>&emsp;快速排序三个步骤：</p>
<ul>
<li>分：设定一个分割值并将数据分为两部分。</li>
<li>治：分别在两部分使用递归方式继续使用快速排序方法。</li>
<li>和：对分割部分排序直至完成。<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = low;</span><br><span class="line">        <span class="keyword">int</span> j = high;</span><br><span class="line">        <span class="keyword">int</span> k = arr[low];</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="comment">// 从右向左找第一个小于k的数</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= k) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                arr[i++] = arr[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 从左向右找第一个大于等于k的数</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt; k) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">                arr[j--] = arr[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[i] = k;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 递归调用</span></span><br><span class="line">        QuickSort(arr, low, i - <span class="number">1</span>); <span class="comment">// 排序k左边</span></span><br><span class="line">        QuickSort(arr, i + <span class="number">1</span>, high); <span class="comment">// 排序k右边</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">( <span class="keyword">int</span> *a, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, p, tmp;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span>)  <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    p = a[n / <span class="number">2</span>];   <span class="comment">// Get the middle element as pivot ..</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>, j = n <span class="number">-1</span>;; i++, j--) &#123;</span><br><span class="line">        <span class="keyword">while</span> (a[i] &lt; p)</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">while</span> (p &lt; a[j])</span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">if</span> ( i &gt;= j)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        tmp = a[i]; a[i] = a[j]; a[j] = tmp;    <span class="comment">//swap both ..</span></span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    quick_sort( a, i); </span><br><span class="line">    quick_sort( a + i, n - i); </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-2-7-堆排序"><a href="#3-2-7-堆排序" class="headerlink" title="3.2.7 堆排序"></a>3.2.7 堆排序</h3><p>&emsp;桶排序算法基本原理：把数组中的所有元素分为若干个数据块，也就是若干个桶，然后对每个桶里的数据进行排序，最后将所有桶里的数据依次排列。<br>&emsp;存在两个问题：<br>&emsp;(1)怎样划分数据块，也就是分几个桶，每个桶放哪几个数据。<br>&emsp;(2)对每个数据块里的数据怎样排序。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sdtio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; KeyNode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bucket_sort</span><span class="params">(<span class="keyword">int</span> keys[], <span class="keyword">int</span> size, <span class="keyword">int</span> bucket_size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    KeyNode **bucket_table = (KeyNode **)mallov(bucket_size * <span class="keyword">sizeof</span>(KeyNode*));</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; bucket_size;i++) &#123;</span><br><span class="line">		bucket_table[i] = (KeyNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(KeyNode));</span><br><span class="line">		bucket_table[i]-&gt;key = <span class="number">0</span>;</span><br><span class="line">		bucket_table[i]-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; size;j++) &#123;</span><br><span class="line">		KeyNode *node = (KeyNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(KeyNode));</span><br><span class="line">		node-&gt;key = keys[j];</span><br><span class="line">		node-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">int</span> index = keys[j]/<span class="number">10</span>;</span><br><span class="line">		KeyNode *p = bucket_table[index];</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;key == <span class="number">0</span>) &#123;</span><br><span class="line">			bucket_table[index]-&gt;next = node;</span><br><span class="line">			(bucket_table[index]-&gt;key)++;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">while</span>(p-&gt;next != <span class="literal">NULL</span> &amp;&amp; p-&gt;next-&gt;key &lt;= node-&gt;key)</span><br><span class="line">				p = p-&gt;next;</span><br><span class="line">			node-&gt;next = p-&gt;next;</span><br><span class="line">			p-&gt;next = node;</span><br><span class="line">			(bucket_table[index]-&gt;key)++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//print result</span></span><br><span class="line">	KeyNode * k = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; bucket_size;i++)</span><br><span class="line">		<span class="keyword">for</span>(k = bucket_table[i]-&gt;next;k!=<span class="literal">NULL</span>;k=k-&gt;next)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,k-&gt;key);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> raw[] = &#123;<span class="number">49</span>,<span class="number">38</span>,<span class="number">65</span>,<span class="number">97</span>,<span class="number">76</span>,<span class="number">13</span>,<span class="number">27</span>,<span class="number">49</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span> size = <span class="keyword">sizeof</span>(raw)/<span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">	bucket_sort(raw,size,<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-8-leetcode排序"><a href="#3-2-8-leetcode排序" class="headerlink" title="3.2.8 leetcode排序"></a>3.2.8 leetcode排序</h3><h2 id="3-3-贪心算法"><a href="#3-3-贪心算法" class="headerlink" title="3.3 贪心算法"></a>3.3 贪心算法</h2><h3 id="3-3-1-基本概念"><a href="#3-3-1-基本概念" class="headerlink" title="3.3.1 基本概念"></a>3.3.1 基本概念</h3><h3 id="3-3-2-描述"><a href="#3-3-2-描述" class="headerlink" title="3.3.2 描述"></a>3.3.2 描述</h3><h3 id="3-3-3-应用"><a href="#3-3-3-应用" class="headerlink" title="3.3.3. 应用"></a>3.3.3. 应用</h3><h3 id="3-3-4-leetcode题目"><a href="#3-3-4-leetcode题目" class="headerlink" title="3.3.4 leetcode题目"></a>3.3.4 leetcode题目</h3><h2 id="3-4-动态规划"><a href="#3-4-动态规划" class="headerlink" title="3.4 动态规划"></a>3.4 动态规划</h2><h3 id="3-4-1-基本概念"><a href="#3-4-1-基本概念" class="headerlink" title="3.4.1 基本概念"></a>3.4.1 基本概念</h3><h3 id="3-4-2-描述算法"><a href="#3-4-2-描述算法" class="headerlink" title="3.4.2 描述算法"></a>3.4.2 描述算法</h3><h3 id="3-4-3-背包问题"><a href="#3-4-3-背包问题" class="headerlink" title="3.4.3 背包问题"></a>3.4.3 背包问题</h3><h3 id="3-4-4-最长公共子序列"><a href="#3-4-4-最长公共子序列" class="headerlink" title="3.4.4 最长公共子序列"></a>3.4.4 最长公共子序列</h3><h3 id="3-4-5-leetcode题目"><a href="#3-4-5-leetcode题目" class="headerlink" title="3.4.5 leetcode题目"></a>3.4.5 leetcode题目</h3><h2 id="3-5-回溯法"><a href="#3-5-回溯法" class="headerlink" title="3.5 回溯法"></a>3.5 回溯法</h2><h3 id="3-5-1-基本概念"><a href="#3-5-1-基本概念" class="headerlink" title="3.5.1 基本概念"></a>3.5.1 基本概念</h3><h3 id="3-5-2-八皇后问题"><a href="#3-5-2-八皇后问题" class="headerlink" title="3.5.2 八皇后问题"></a>3.5.2 八皇后问题</h3><h3 id="3-5-3-leetcode题目"><a href="#3-5-3-leetcode题目" class="headerlink" title="3.5.3 leetcode题目"></a>3.5.3 leetcode题目</h3><h2 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4 参考链接"></a>4 参考链接</h2><ul>
<li>复杂度速查表<br><a href="https://liam.page/2016/06/20/big-O-cheat-sheet/">https://liam.page/2016/06/20/big-O-cheat-sheet/</a></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
      </categories>
      <tags>
        <tag>实用教程</tag>
        <tag>Another Tag</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode题解算法分析</title>
    <url>/2021/10/27/2021/11/leetcode%E9%A2%98%E8%A7%A3%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h2 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h2><span id="more"></span>
<p>&emsp;单调递增栈，元素进栈过程，若当前进栈的元素a，如果a&gt;栈顶元素，则直接将a进栈，如果a&lt;=栈顶元素，则不断将栈顶元素出栈，直到满足a&gt;栈顶元素。单调递减栈则为a&lt;栈顶元素时进栈。</p>
<h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><p>&emsp;单调队列与单调栈及其相似，把单调栈先进后出的性质改为先进先出既可。<br>元素进队列的过程对于单调递增队列。<br>对于一个元素a，如果a&gt;队尾元素，那么直接将a扔进队列，如果a&lt;=队尾元素，则将队尾元素出队列，直到满足 a&gt;队尾元素即可。</p>
<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h2 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h2><h2 id="前缀与哈希"><a href="#前缀与哈希" class="headerlink" title="前缀与哈希"></a>前缀与哈希</h2><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h2 id="BFS"><a href="#BFS" class="headerlink" title="BFS"></a>BFS</h2><h2 id="DFS"><a href="#DFS" class="headerlink" title="DFS"></a>DFS</h2><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><h2 id="字典树"><a href="#字典树" class="headerlink" title="字典树"></a>字典树</h2>]]></content>
      <categories>
        <category>tool</category>
        <category>2021</category>
        <category>11</category>
      </categories>
      <tags>
        <tag>实用教程</tag>
        <tag>Another Tag</tag>
      </tags>
  </entry>
  <entry>
    <title>C/C++内存管理</title>
    <url>/2021/11/07/2021/11/%E5%86%85%E5%AD%98/</url>
    <content><![CDATA[<h2 id="一、内存"><a href="#一、内存" class="headerlink" title="一、内存"></a>一、内存</h2><p>&emsp;在计算机中，不同应用程序之间的内存是相互独立的，通过情况下不可以相互访问。</p>
<span id="more"></span>

<p>1、内存四区<br>从下到上为：代码区、数据区、堆区、栈区。<br>栈区：存储临时变量的区域，临时变量包括：局部变量、返回值、参数、返回地址。这些变量超出作用域自动弹出。超出栈大小将会栈溢出。栈从栈顶自上而下，最下端为0x0000。<br>堆区：比较大的内存区域，用于动态内存分配，由开放人员申请和释放，在程序结束时未释放，将会右系统自动回收。<br>数据区：主要存放全局变量、常量和静态变量；数据区又可以划分为：全局区和静态区。<br>代码区：主要纯粹可执行代码。属性为只读的。</p>
<h2 id="二、malloc和free"><a href="#二、malloc和free" class="headerlink" title="二、malloc和free"></a>二、malloc和free</h2><p>&emsp;在 C 语言（不是 C++)中，malloc 和 free 是系统提供的函数，成对使用，用于从堆中分配和释放内存。malloc 的全称是 memory allocation 译为“动态内存分配”。</p>
<ul>
<li>参考链接：<br><a href="https://mp.weixin.qq.com/s/mgJXEnhgvGSY4uwMRzLZeQ">https://mp.weixin.qq.com/s/mgJXEnhgvGSY4uwMRzLZeQ</a></li>
</ul>
]]></content>
      <categories>
        <category>tool</category>
        <category>2021</category>
        <category>11</category>
      </categories>
      <tags>
        <tag>Another Tag</tag>
        <tag>Computer Science</tag>
      </tags>
  </entry>
</search>
